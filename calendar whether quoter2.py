import os
import requests
import random
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler
from PIL import Image, ImageDraw, ImageFont
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
load_dotenv("token.env")
TOKEN = os.getenv("TOKEN")
WEATHER_API_KEY = os.getenv("WEATHER_API_KEY")
EXCHANGE_API_KEY = os.getenv("EXCHANGE_API_KEY")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CITIES = {
    "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫": {"code": "Krasnoyarsk", "emoji": "üèôÔ∏è"},
    "–ò—Ä–∫—É—Ç—Å–∫": {"code": "Irkutsk", "emoji": "üèîÔ∏è"}
}

QUOTES = [
    "–°—á–∞—Å—Ç—å–µ - —ç—Ç–æ –Ω–µ —á—Ç–æ-—Ç–æ –≥–æ—Ç–æ–≤–æ–µ. –û–Ω–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–∞—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π. ‚Äî –î–∞–ª–∞–π-–ª–∞–º–∞",
    "–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–¥–µ–ª–∞—Ç—å –≤–µ–ª–∏–∫—É—é —Ä–∞–±–æ—Ç—É ‚Äî –ª—é–±–∏—Ç—å —Ç–æ, —á—Ç–æ –≤—ã –¥–µ–ª–∞–µ—Ç–µ. ‚Äî –°—Ç–∏–≤ –î–∂–æ–±—Å",
    "–í–∞—à–µ –≤—Ä–µ–º—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ, –Ω–µ —Ç—Ä–∞—Ç—å—Ç–µ –µ–≥–æ, –∂–∏–≤—è —á—É–∂–æ–π –∂–∏–∑–Ω—å—é. ‚Äî –°—Ç–∏–≤ –î–∂–æ–±—Å"
]

PSYCHO_NET_GROUPS = [
    {"name": "–ü—Å–∏—Ö–æ–Ω–µ—Ç –û—Å–Ω–æ–≤–Ω–æ–π", "url": "https://t.me/psycho_net_main"},
    {"name": "–ü—Å–∏—Ö–æ–Ω–µ—Ç –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "url": "https://t.me/psycho_net_support"}
]


async def generate_weather_image(city: str, weather_data: dict):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–≥–æ–¥–æ–π"""
    try:
        img = Image.new('RGB', (800, 400), color=(240, 240, 240))
        draw = ImageDraw.Draw(img)

        try:
            city_img = Image.open(f"images/{CITIES[city]['code']}.jpg")
            city_img = city_img.resize((400, 400))
            img.paste(city_img, (0, 0))
        except Exception as e:
            logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞: {e}")
            draw.rectangle([0, 0, 400, 400], fill="#3498db")
            try:
                font = ImageFont.truetype("arial.ttf", 30)
            except:
                font = ImageFont.load_default()
            draw.text((100, 180), f"{CITIES[city]['emoji']} {city}", fill="white", font=font)

        try:
            font = ImageFont.truetype("arial.ttf", 30)
        except:
            font = ImageFont.load_default()

        weather_text = f"""{CITIES[city]['emoji']} –ü–æ–≥–æ–¥–∞ –≤ {city}
üå°Ô∏è {weather_data['temp']}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è {weather_data['feels_like']}¬∞C)
‚òÄÔ∏è {weather_data['description']}
üå¨Ô∏è –í–µ—Ç–µ—Ä: {weather_data['wind_speed']} –º/—Å
üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather_data['humidity']}%
üïí {weather_data['time']}"""

        draw.text((420, 50), weather_text, fill="black", font=font)
        img.save("weather_card.jpg")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return False


async def get_weather_data(city: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ"""
    try:
        city_code = CITIES.get(city, {}).get('code', city)
        url = f"http://api.openweathermap.org/data/2.5/weather?q={city_code}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
        response = requests.get(url).json()

        return {
            'temp': int(response["main"]["temp"]),
            'feels_like': int(response["main"]["feels_like"]),
            'description': response["weather"][0]["description"],
            'wind_speed': response["wind"]["speed"],
            'humidity': response["main"]["humidity"],
            'time': datetime.now().strftime("%H:%M")
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–≥–æ–¥—ã: {e}")
        return None


async def get_exchange_rates():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç"""
    try:
        url = f"https://openexchangerates.org/api/latest.json?app_id={EXCHANGE_API_KEY}"
        response = requests.get(url).json()
        return {
            'USD': response['rates']['RUB'],
            'EUR': response['rates']['RUB'] / response['rates']['EUR']
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç: {e}")
        return {'USD': 75.0, 'EUR': 85.0}


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = [
        [InlineKeyboardButton("üå§ –ü–æ–≥–æ–¥–∞", callback_data='weather')],
        [InlineKeyboardButton("üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data='calendar')],
        [InlineKeyboardButton("üí∞ –í–∞–ª—é—Ç–∞", callback_data='currency')],
        [InlineKeyboardButton("üí¨ –¶–∏—Ç–∞—Ç–∞", callback_data='quote')],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data='help')],
        [InlineKeyboardButton(PSYCHO_NET_GROUPS[0]['name'], url=PSYCHO_NET_GROUPS[0]['url'])],
        [InlineKeyboardButton(PSYCHO_NET_GROUPS[1]['name'], url=PSYCHO_NET_GROUPS[1]['url'])]
]
     #   reply_markup = InlineKeyboardMarkup(keyboard)
        reply_markup:  InlineKeyboardMarkup = InlineKeyboardMarkup(keyboard)

    if update.message:
        await update.message.reply_text(
            "üîÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Å–∏—Ö–æ-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç!\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:",
            reply_markup=reply_markup
        )
    else:
        await update.callback_query.message.reply_text(
            "üîÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Å–∏—Ö–æ-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç!\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:",
            reply_markup=reply_markup
        )

    async

    def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()

        if query.data == 'weather':
            await weather_menu(query, context)
        elif query.data == 'calendar':
            await calendar(query, context)
        elif query.data == 'currency':
            await currency(query, context)
        elif query.data == 'quote':
            await quote(query, context)
        elif query.data == 'help':
            await help_command(query, context)
        elif query.data.startswith('city_'):
            city = query.data[5:]
            await send_weather(query, city, context)
        elif query.data == 'back':
            await start(update, context)

    async def weather_menu(query, context: ContextTypes.DEFAULT_TYPE):
        """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–≥–æ–¥—ã"""
        keyboard = [[InlineKeyboardButton(f"{data['emoji']} {city}", callback_data=f'city_{city}')]
                    for city, data in CITIES.items()]
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')])

        await query.edit_message_text(
            text="üå§ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–≥–æ–¥—ã:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def send_weather(query, city, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ"""
        weather_data = await get_weather_data(city)
        if not weather_data:
            await query.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        if await generate_weather_image(city, weather_data):
            await context.bot.send_photo(
                chat_id=query.message.chat_id,
                photo=open("weather_card.jpg", "rb"),
                caption=f"{CITIES[city]['emoji']} –ü–æ–≥–æ–¥–∞ –≤ {city} –Ω–∞ {weather_data['time']}"
            )
        else:
            await query.edit_message_text(
                f"{CITIES[city]['emoji']} –ü–æ–≥–æ–¥–∞ –≤ {city}:\n"
                f"üå°Ô∏è {weather_data['temp']}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è {weather_data['feels_like']}¬∞C)\n"
                f"‚òÄÔ∏è {weather_data['description']}\n"
                f"üå¨Ô∏è –í–µ—Ç–µ—Ä: {weather_data['wind_speed']} –º/—Å\n"
                f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather_data['humidity']}%\n"
                f"üïí –û–±–Ω–æ–≤–ª–µ–Ω–æ: {weather_data['time']}"
            )

    async def calendar(query, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
        now = datetime.now()
        await query.edit_message_text(
            f"üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å:\n"
            f"–°–µ–≥–æ–¥–Ω—è: {now.strftime('%d.%m.%Y')}\n"
            f"–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {now.strftime('%A')}\n"
            f"–í—Ä–µ–º—è: {now.strftime('%H:%M')}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]])
        )

    async def currency(query, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç"""
        rates = await get_exchange_rates()
        await query.edit_message_text(
            f"üí∞ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç:\n"
            f"1 USD = {rates['USD']:.2f} RUB\n"
            f"1 EUR = {rates['EUR']:.2f} RUB\n"
            f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M')}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]])
        )

    async def quote(query, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π —Ü–∏—Ç–∞—Ç—ã"""
        await query.edit_message_text(
            f"üí¨ –¶–∏—Ç–∞—Ç–∞ –¥–Ω—è:\n{random.choice(QUOTES)}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]])
        )

    async def help_command(query, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É"""
        await query.edit_message_text(
            "‚ÑπÔ∏è –ü–æ–º–æ—â—å:\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç:\n"
            "- –¢–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ\n"
            "- –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç\n"
            "- –ö–∞–ª–µ–Ω–¥–∞—Ä—å –∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è\n"
            "- –í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–µ —Ü–∏—Ç–∞—Ç—ã\n\n"
            "–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ –º–µ–Ω—é!",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]])
        )

    def main():
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            app = Application.builder().token(TOKEN).build()

            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            app.add_handler(CommandHandler("start", start))
            app.add_handler(CallbackQueryHandler(button_handler))

            logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
            app.run_polling()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

    if __name__ == "__main__":
        main()