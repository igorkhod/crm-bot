import asyncio
import json
import os
import random
from datetime import datetime
from pathlib import Path

import aiohttp
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv

from db import init_db, update_visitor, start_session, update_session, get_stats
# –≤–µ—Ä—Å–∏—è –æ—Ç17:16 30.07.2025
# ========== –ó–∞–≥—Ä—É–∑–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è ==========
local_env = Path(__file__).parent / "token_local.env"
prod_env = Path(__file__).parent / "token.env"

if local_env.exists():
    ENVIRONMENT = "LOCAL"
    load_dotenv(local_env)
    env_file = local_env
elif prod_env.exists():
    ENVIRONMENT = "PROD_LOCAL"
    load_dotenv(prod_env)
    env_file = prod_env
else:
    ENVIRONMENT = "RENDER"
    load_dotenv("/etc/secrets/token.env")
    env_file = Path("/etc/secrets/token.env")

print(f"–ò—Å–ø–æ–ª—å–∑—É—é —Å–µ–∫—Ä–µ—Ç—ã: {env_file}")
print(f"–†–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞: {ENVIRONMENT}")

# ========== –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ==========
TOKEN = os.getenv("TELEGRAM_TOKEN")
WEATHER_API_KEY = os.getenv("WEATHER_API_KEY")
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = "https://telegram-cloud-bot-kwcs.onrender.com/webhook"

bot = Bot(token=TOKEN)
dp = Dispatcher()

# <<< –°—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è dp –≤—Å—Ç–∞–≤–ª—è–µ—à—å init_db() >>>
init_db()

if ENVIRONMENT == "RENDER":
    from fastapi import FastAPI, Request
    from contextlib import asynccontextmanager


    @asynccontextmanager
    async def lifespan(app: "FastAPI"):
        await bot.set_webhook(WEBHOOK_URL)
        yield


    app = FastAPI(lifespan=lifespan)

CITIES = {"–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫": "Krasnoyarsk", "–ò—Ä–∫—É—Ç—Å–∫": "Irkutsk"}
WEEKDAYS_RU = {
    "Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
    "Wednesday": "–°—Ä–µ–¥–∞", "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
    "Friday": "–ü—è—Ç–Ω–∏—Ü–∞", "Saturday": "–°—É–±–±–æ—Ç–∞",
    "Sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
}
QUOTES_FILE = Path(__file__).parent / "data" / "quotes.json"
user_choice = {}


# ========== –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ==========
def main_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÆ –ü—Å–∏—Ö–æ–Ω–µ—Ç–∏–∫–∞ –ò–Ω—å-–Ø–Ω", callback_data="group_psy"),
         InlineKeyboardButton(text="üå≤ –ò—Ä–∫—É—Ç—Å–∫ –ø—Å–∏—Ö–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", callback_data="group_irkutsk")],
        [InlineKeyboardButton(text="üå§ –ü–æ–≥–æ–¥–∞", callback_data="weather"),
         InlineKeyboardButton(text="üíµ –ö—É—Ä—Å –≤–∞–ª—é—Ç", callback_data="currency")],
        [InlineKeyboardButton(text="üí¨ –¶–∏—Ç–∞—Ç–∞", callback_data="quote")],
        [InlineKeyboardButton(text="ü§ñ ChatGPT", callback_data="ask_gpt"),
         InlineKeyboardButton(text="üß† DeepSeek", callback_data="ask_deepseek")],
        [InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
    ])


def city_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=name, callback_data=f"city:{name}")] for name in CITIES.keys()
    ])


def load_quotes():
    if QUOTES_FILE.exists():
        try:
            with open(QUOTES_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        except:
            return []
    return []


async def animate_dots(chat_id, text, stop_event: asyncio.Event):
    dots = ["‚Ä¢", "‚óè", "‚óè‚óè", "‚óè‚óè‚óè"]
    msg = await bot.send_message(chat_id, f"{text} ‚Ä¶")
    while not stop_event.is_set():
        for dot in dots:
            if stop_event.is_set():
                break
            try:
                await msg.edit_text(f"{text} {dot}")
                await asyncio.sleep(0.25)
            except:
                return msg
    return msg


# ========== /start ==========
@dp.message(Command("start"))
async def cmd_start(message: Message):
    # --- –∑–∞–ø–ª–∞—Ç–∫–∞: –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞—á–∏–Ω–∞–µ–º —Å–µ—Å—Å–∏—é ---
    update_visitor(message.from_user.id, message.from_user.username or "")
    start_session(message.from_user.id)
    # --- –∫–æ–Ω–µ—Ü –∑–∞–ø–ª–∞—Ç–∫–∏ ---
    now = datetime.now()
    weekday = WEEKDAYS_RU[now.strftime("%A")]
    date_str = now.strftime("%d.%m.%Y") + f" ({weekday})"

    await message.answer(f"–ü—Ä–∏–≤–µ—Ç! –°–µ–≥–æ–¥–Ω—è {date_str}", reply_markup=main_keyboard())
# ========== /start ==========
# ========== /stats –Ω–∞—á–∞–ª–æ ==========
@dp.message(Command("stats"))
async def cmd_stats(message: Message):
    loop = asyncio.get_running_loop()
    # –≤—ã–ø–æ–ª–Ω—è–µ–º get_stats –≤ –ø—É–ª–µ –ø–æ—Ç–æ–∫–æ–≤
    stats = await loop.run_in_executor(None, get_stats)
    count, first_seen, session_count, first_session, total_seconds = stats
    h = total_seconds // 3600
    m = (total_seconds % 3600) // 60
    await message.answer(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count}\n–ü–µ—Ä–≤—ã–π –≤–∏–∑–∏—Ç: {first_seen}\n\n"
        f"–°–µ—Å—Å–∏–π: {session_count}\n–ü–µ—Ä–≤—ã–π —Å–µ–∞–Ω—Å: {first_session}\n"
        f"–í—Ä–µ–º—è –≤ –±–æ—Ç–µ: {h} —á {m} –º–∏–Ω"
    )
    # ========== /stats –∫–æ–Ω–µ—Ü==========
# ========== Callback Query (–æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∫–Ω–æ–ø–æ–∫) ==========
@dp.callback_query()
async def callback_handler(callback: types.CallbackQuery):
    # --- –∑–∞–ø–ª–∞—Ç–∫–∞: –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ---
    loop = asyncio.get_running_loop()
    loop.run_in_executor(None, update_session, callback.from_user.id)
    # --- –∫–æ–Ω–µ—Ü –∑–∞–ø–ª–∞—Ç–∫–∏ ---

    data = callback.data

    if data == "group_psy":
        await callback.message.edit_text(
            "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å:\nhttps://t.me/+EL9esd0xZ-xkMTU6",
            reply_markup=main_keyboard())
        return

    if data == "group_irkutsk":
        await callback.message.edit_text(
            "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å:\nhttps://t.me/+7ZBrobhAJoRhM2U6",
            reply_markup=main_keyboard())
        return

    if data == "weather":
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=city_keyboard())
        return

    if data.startswith("city:"):
        city = data.split(":", 1)[1]
        await show_weather(callback.message, city)
        return

    if data == "currency":
        await show_currency(callback.message)
        return

    if data == "quote":
        await send_random_quote(callback.message)
        return

    if data == "ask_gpt":
        user_choice[callback.from_user.id] = "ask_gpt"
        await callback.message.edit_text("–¢—ã –≤—ã–±—Ä–∞–ª ChatGPT. –ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º.")
        return

    if data == "ask_deepseek":
        user_choice[callback.from_user.id] = "ask_deepseek"
        await callback.message.edit_text("–¢—ã –≤—ã–±—Ä–∞–ª DeepSeek. –ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º.")
        return

    if data == "help":
        await show_help(callback.message)
        return


# ========== –û–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è –ò–ò) ==========
@dp.message()
async def process_user_message(message: Message):
    # --- –∑–∞–ø–ª–∞—Ç–∫–∞: –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ---
    loop = asyncio.get_running_loop()
    loop.run_in_executor(None, update_session, message.from_user.id)
    # --- –∫–æ–Ω–µ—Ü –∑–∞–ø–ª–∞—Ç–∫–∏ ---

    choice = user_choice.get(message.from_user.id)

    if choice == "ask_gpt":
        stop = asyncio.Event()
        task = asyncio.create_task(animate_dots(message.chat.id, "–ñ–¥—É –æ—Ç–≤–µ—Ç –æ—Ç ChatGPT", stop))
        answer = await call_chatgpt_api(message.text)
        stop.set()
        msg = await task
        await msg.edit_text(answer)
        user_choice.pop(message.from_user.id, None)
        return

    if choice == "ask_deepseek":
        stop = asyncio.Event()
        task = asyncio.create_task(animate_dots(message.chat.id, "–ñ–¥—É –æ—Ç–≤–µ—Ç –æ—Ç DeepSeek", stop))
        answer = await call_deepseek_api(message.text)
        stop.set()
        msg = await task
        await msg.edit_text(answer)
        user_choice.pop(message.from_user.id, None)
        return


# ========== –§—É–Ω–∫—Ü–∏–∏ ==========
async def show_weather(msg, city):
    code = CITIES[city]
    url = f"http://api.openweathermap.org/data/2.5/weather?q={code},RU&appid={WEATHER_API_KEY}&units=metric&lang=ru"
    r = requests.get(url).json()
    temp = r["main"]["temp"]
    desc = r["weather"][0]["description"].capitalize()
    await msg.edit_text(f"–ü–æ–≥–æ–¥–∞ –≤ {city}: {temp:.1f}¬∞C, {desc}", reply_markup=main_keyboard())


async def show_currency(msg):
    data = requests.get("https://www.cbr-xml-daily.ru/daily_json.js").json()
    usd, eur = data["Valute"]["USD"]["Value"], data["Valute"]["EUR"]["Value"]
    await msg.edit_text(f"USD: {usd:.2f}‚ÇΩ\nEUR: {eur:.2f}‚ÇΩ", reply_markup=main_keyboard())


async def send_random_quote(msg):
    q = random.choice(load_quotes() or ["–ù–µ—Ç —Ü–∏—Ç–∞—Ç"])
    text = q["text"] if isinstance(q, dict) else q
    await msg.edit_text(f"¬´{text}¬ª", reply_markup=main_keyboard())


async def show_help(msg):
    await msg.edit_text("–ü–æ–º–æ—â—å: –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é", reply_markup=main_keyboard())


# ========== AI API ==========
async def call_chatgpt_api(prompt: str) -> str:
    key = os.getenv("IGOR_OPENAI_API")
    headers = {"Authorization": f"Bearer {key}", "Content-Type": "application/json"}
    data = {"model": "gpt-4o-mini", "messages": [{"role": "user", "content": prompt}], "max_tokens": 200}
    async with aiohttp.ClientSession() as s:
        async with s.post("https://api.openai.com/v1/chat/completions", headers=headers, json=data) as r:
            return (await r.json())["choices"][0]["message"]["content"]


async def call_deepseek_api(prompt: str) -> str:
    key = os.getenv("IGOR_KHOD_DEEPSEEK_API_KEY")
    headers = {"Authorization": f"Bearer {key}", "Content-Type": "application/json"}
    data = {"model": "deepseek-chat",
            "messages": [{"role": "system", "content": "–¢—ã DeepSeek."}, {"role": "user", "content": prompt}],
            "max_tokens": 200}
    async with aiohttp.ClientSession() as s:
        async with s.post("https://api.deepseek.com/v1/chat/completions", headers=headers, json=data) as r:
            return (await r.json())["choices"][0]["message"]["content"]


# ========== Webhook ==========
if ENVIRONMENT == "RENDER":
    @app.post(WEBHOOK_PATH)
    async def webhook(request: Request):
        data = await request.json()
        await dp.feed_webhook_update(bot, types.Update(**data))
        return {"ok": True}


    @app.get("/")
    def root():
        return {"status": "ok", "bot": "running"}

if __name__ == "__main__":
    if ENVIRONMENT in ["LOCAL", "PROD_LOCAL"]:
        print("LOCAL POLLING...")
        asyncio.run(dp.start_polling(bot))
    else:
        import uvicorn

        print("RENDER WEBHOOK...")
        uvicorn.run(app, host="0.0.0.0", port=10000)
