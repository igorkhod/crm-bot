from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from crm.db import get_user_by_nickname
from crm.keyboards import get_role_keyboard
from crm.services import verify_user_password

router = Router()


class LoginStates(StatesGroup):
    waiting_for_nickname = State()
    waiting_for_password = State()


@router.message(F.text == "/start")
async def cmd_start(message: types.Message, state: FSMContext):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                         reply_markup=get_role_keyboard(is_authenticated=False))
    await state.clear()


@router.message(F.text.contains("–í–æ–π—Ç–∏"))
async def login_start(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º:")
    await state.set_state(LoginStates.waiting_for_nickname)


@router.message(LoginStates.waiting_for_nickname)
async def login_nickname_received(message: types.Message, state: FSMContext):
    """
    1) –ë–µ—Ä—ë–º –Ω–∏–∫ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è.
    2) –°—Ä–∞–∑—É –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ë–î, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
    3) –ï—Å–ª–∏ –ù–ï —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –º—è–≥–∫–æ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –Ω–∏–∫ –µ—â—ë —Ä–∞–∑ (–∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é).
    4) –ï—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∏–∫ –≤ FSM –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –ø–∞—Ä–æ–ª—è.
    """
    nickname = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
    db_user = await get_user_by_nickname(nickname)
    if db_user is None:
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–≤—É–º—è –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏: –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥ –Ω–∏–∫–∞ –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
            [types.KeyboardButton(text="üîÅ –í–≤–µ—Å—Ç–∏ –Ω–∏–∫ –µ—â—ë —Ä–∞–∑")],
            [types.KeyboardButton(text="üÜï –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")]
        ])
        await message.answer(
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–∏–∫–Ω–µ–π–º–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. "
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, –ª–∏–±–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.",
            reply_markup=kb
        )
        # –û—Å—Ç–∞—ë–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∏–∫–∞
        await state.set_state(LoginStates.waiting_for_nickname)
        return

    # –ù–∏–∫ –≤–∞–ª–∏–¥–µ–Ω ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
    await state.update_data(nickname=nickname)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:")
    await state.set_state(LoginStates.waiting_for_password)


@router.message(F.text == "üîÅ –í–≤–µ—Å—Ç–∏ –Ω–∏–∫ –µ—â—ë —Ä–∞–∑")
async def retry_nickname(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º:")
    await state.set_state(LoginStates.waiting_for_nickname)


@router.message(F.text == "üÜï –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
async def go_register(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –Ω–∏–∫–Ω–µ–π–º –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:")
    await state.set_state(LoginStates.waiting_for_nickname)


@router.message(LoginStates.waiting_for_password)
async def login_password_received(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    nickname = user_data.get("nickname")
    password = message.text.strip()

    db_user = await get_user_by_nickname(nickname)
    if db_user is None:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–∏–∫–Ω–µ–π–º–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        # await state.clear()
        # –±—ã–ª–æ: await state.clear()
        # —Å—Ç–∞–ª–æ: –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –≤ FSM –¥–∞–Ω–Ω—ã–µ –æ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await state.update_data(role=db_user["role"], nickname=db_user["nickname"], user_id=db_user.get("id"))
        # —Å–Ω–∏–º–∞–µ–º —Ç–µ–∫—É—â–∏–π state, –Ω–æ –¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞–≤–ª—è–µ–º
        await state.set_state(None)

        await message.answer(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {db_user['full_name']}!",
            reply_markup=get_role_keyboard(role=db_user["role"], is_authenticated=True)
        )

        return
    ok = await verify_user_password(nickname, password)
    if not ok:
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞: –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥ –∏–ª–∏ —Å–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å
        retry_kb = types.ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
            [types.KeyboardButton(text="üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–∞—Ä–æ–ª—å")],
            [types.KeyboardButton(text="üîê –°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å")]
        ])
        await message.answer("–í–≤–µ–¥—ë–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å.", reply_markup=retry_kb)
        # –û—Å—Ç–∞–≤–ª—è–µ–º nickname –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏ —Å–Ω–æ–≤–∞ –∂–¥—ë–º –ø–∞—Ä–æ–ª—å
        await state.set_state(LoginStates.waiting_for_password)
        return

    await state.clear()
    await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {db_user['full_name']}!",
                         reply_markup=get_role_keyboard(role=db_user["role"], is_authenticated=True))


registration_router = router

@router.message(F.text == "–í—ã–π—Ç–∏")
async def logout(message: types.Message, state: FSMContext):
    # –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–æ—Å—Ç–µ–≤–æ–µ –º–µ–Ω—é
    await state.clear()
    await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.", reply_markup=get_role_keyboard(is_authenticated=False))

# –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π ‚Äî –æ—Ç–≤–µ—Ç –Ω–∞ /logout
@router.message(F.text == "/logout")
async def logout_cmd(message: types.Message, state: FSMContext):
    await logout(message, state)

