import os
from datetime import datetime

import aiosqlite
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from from_chatgpt.crm.db import DB_PATH
from crm.db import get_user_by_nickname

router = Router()

# ------------------ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ ------------------
def _weekday_ru(dt: datetime) -> str:
    days = {
        0: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", 1: "–í—Ç–æ—Ä–Ω–∏–∫", 2: "–°—Ä–µ–¥–∞",
        3: "–ß–µ—Ç–≤–µ—Ä–≥",     4: "–ü—è—Ç–Ω–∏—Ü–∞", 5: "–°—É–±–±–æ—Ç–∞", 6: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    }
    return days[dt.weekday()]


def _is_admin(message: Message, state_data: dict) -> bool:
    """
    –ù–∞–¥—ë–∂–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:
    - –µ—Å–ª–∏ –≤ FSM –∑–∞–ø–∏—Å–∞–Ω–∞ —Ä–æ–ª—å 'admin'
    - –ª–∏–±–æ –µ—Å–ª–∏ from_user.id —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å ADMIN_ID –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    (—á–∏—Ç–∞–µ–º ADMIN_ID –Ω–∞–ø—Ä—è–º—É—é –∏–∑ os.environ –≤ –º–æ–º–µ–Ω—Ç –≤—ã–∑–æ–≤–∞, –∞ –Ω–µ –Ω–∞ —ç—Ç–∞–ø–µ –∏–º–ø–æ—Ä—Ç–∞)
    """
    role = state_data.get("role")
    admin_env = os.getenv("ADMIN_ID")
    return (role == "admin") or (admin_env and str(message.from_user.id) == str(admin_env))


async def _user_cohorts(db, user_id: int, nickname: str):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ cohort_id, –∫ –∫–æ—Ç–æ—Ä—ã–º –ø—Ä–∏–≤—è–∑–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–ø–æ user_id, –∑–∞—Ç–µ–º –ø–æ nickname)."""
    # –ø–æ user_id
    try:
        rows = await (await db.execute(
            "SELECT DISTINCT cohort_id FROM participants WHERE user_id = ?", (user_id,)
        )).fetchall()
        if rows:
            return [r[0] for r in rows]
    except Exception:
        pass
    # –ø–æ nickname
    try:
        rows = await (await db.execute(
            "SELECT DISTINCT cohort_id FROM participants WHERE nickname = ?", (nickname,)
        )).fetchall()
        if rows:
            return [r[0] for r in rows]
    except Exception:
        pass
    return []


async def _next_session_for_cohorts(db, cohort_ids):
    """–ë–ª–∏–∂–∞–π—à–∏–π –¥–µ–Ω—å –∑–∞–Ω—è—Ç–∏—è —Å—Ä–µ–¥–∏ –ø–æ—Ç–æ–∫–æ–≤ + title/notes –∏–∑ course_sessions."""
    if not cohort_ids:
        return None
    placeholders = ",".join("?" * len(cohort_ids))
    day_row = await (await db.execute(
        f"""
        SELECT session_id, cohort_id, date
        FROM session_days
        WHERE cohort_id IN ({placeholders}) AND date >= DATE('now')
        ORDER BY date
        LIMIT 1
        """,
        cohort_ids
    )).fetchone()
    if not day_row:
        return None
    sess = await (await db.execute(
        "SELECT title, notes FROM course_sessions WHERE id = ?", (day_row["session_id"],)
    )).fetchone()
    return {
        "cohort_id": day_row["cohort_id"],
        "date": day_row["date"],
        "title": (sess["title"] if sess else ""),
        "notes": (sess["notes"] if (sess and sess["notes"]) else ""),
    }


# ------------------ –ö–æ–ª–ª–±—ç–∫–∏/–∫–Ω–æ–ø–∫–∏ —Ä–∞–∑–¥–µ–ª–∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ------------------
@router.callback_query(F.data == "admin_panel")
async def admin_panel_handler(callback: CallbackQuery):
    await callback.message.answer("üîß –ó–¥–µ—Å—å –±—É–¥–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (—É–¥–∞–ª–µ–Ω–∏–µ, –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞, –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–µ–π).")


@router.callback_query(F.data == "info")
async def info_callback_proxy(callback: CallbackQuery, state: FSMContext):
    # –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ ¬´–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è¬ª (reply-–∫–Ω–æ–ø–∫–∞)
    await info_button_handler(callback.message, state)


@router.message(F.text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def info_button_handler(message: Message, state: FSMContext):
    """–ê–¥–º–∏–Ω ‚Äî –æ–±—â–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å. –£—á–∞—Å—Ç–Ω–∏–∫ ‚Äî –±–ª–∏–∂–∞–π—à–µ–µ –∑–∞–Ω—è—Ç–∏–µ (–¥–∞—Ç–∞, —Ç–µ–º–∞, —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ)."""
    data = await state.get_data()
    user_id  = data.get("user_id") or 0
    nickname = data.get("nickname") or ""

    # fallback: –µ—Å–ª–∏ –Ω–∏–∫ –≤ FSM –ø—É—Å—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –∏–∑ username —Ç–µ–ª–µ–≥—Ä–∞–º–∞
    if not nickname and message.from_user and message.from_user.username:
        nickname = message.from_user.username

    async with aiosqlite.connect(DB_PATH) as db:
        db.row_factory = aiosqlite.Row

        if _is_admin(message, data):
            rows = await (await db.execute(
                """
                SELECT cohort_id, title, date
                FROM session_days
                WHERE date >= DATE('now')
                ORDER BY date
                LIMIT 50
                """
            )).fetchall()
            if not rows:
                await message.answer("–ë–ª–∏–∂–∞–π—à–∏—Ö –∑–∞–Ω—è—Ç–∏–π (–ø–æ –≤—Å–µ–º –ø–æ—Ç–æ–∫–∞–º) –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                return
            lines = ["üìÖ <b>–ë–ª–∏–∂–∞–π—à–∏–µ –∑–∞–Ω—è—Ç–∏—è (–≤—Å–µ –ø–æ—Ç–æ–∫–∏)</b>:"]
            for r in rows:
                d = datetime.fromisoformat(r["date"])
                lines.append(f"{d.strftime('%d.%m.%Y')} ({_weekday_ru(d)}) ‚Äî {r['title']}  [{r['cohort_id']}]")
            await message.answer("\n".join(lines), parse_mode="HTML")
            return

        # –£—á–∞—Å—Ç–Ω–∏–∫: –∏—â–µ–º –µ–≥–æ –ø–æ—Ç–æ–∫–∏
        if not user_id and nickname:
            db_user = await get_user_by_nickname(nickname)
            if db_user:
                user_id = db_user.get("id", 0)

        cohorts = await _user_cohorts(db, user_id, nickname)
        if not cohorts:
            await message.answer("–î–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –ø–æ—Ç–æ–∫. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

        nxt = await _next_session_for_cohorts(db, cohorts)
        if not nxt:
            await message.answer("–ë–ª–∏–∂–∞–π—à–∏—Ö –∑–∞–Ω—è—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

    d = datetime.fromisoformat(nxt["date"])
    text = (
        f"–í–∞—à–µ –±–ª–∏–∂–∞–π—à–µ–µ –∑–∞–Ω—è—Ç–∏–µ: <b>{d.strftime('%d.%m.%Y')} ({_weekday_ru(d)})</b>\n"
        f"–¢–µ–º–∞ –∑–∞–Ω—è—Ç–∏—è: <b>{nxt['title'] or '‚Äî'}</b>\n"
        f"–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {nxt['notes'] or '‚Äî'}"
    )
    await message.answer(text, parse_mode="HTML")


@router.message(F.text == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def schedule_dates_only(message: Message, state: FSMContext):
    """–ê–¥–º–∏–Ω ‚Äî –¥–∞—Ç—ã –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤; —É—á–∞—Å—Ç–Ω–∏–∫ ‚Äî —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏. –ù–∞ –∫–∞–∂–¥—É—é –¥–∞—Ç—É —Å—Ç–∞–≤–∏–º inline‚Äë–∫–Ω–æ–ø–∫—É."""
    data = await state.get_data()
    user_id  = data.get("user_id") or 0
    nickname = data.get("nickname") or ""

    if not nickname and message.from_user and message.from_user.username:
        nickname = message.from_user.username

    async with aiosqlite.connect(DB_PATH) as db:
        db.row_factory = aiosqlite.Row

        if _is_admin(message, data):
            rows = await (await db.execute(
                """
                SELECT session_id, cohort_id, date
                FROM session_days
                WHERE date >= DATE('now')
                ORDER BY date
                LIMIT 50
                """
            )).fetchall()
        else:
            cohorts = await _user_cohorts(db, user_id, nickname)
            if not cohorts:
                await message.answer("–ü–æ—Ç–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∑–∞ –≤–∞—à–∏–º –ø—Ä–æ—Ñ–∏–ª–µ–º. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
                return
            placeholders = ",".join("?" * len(cohorts))
            rows = await (await db.execute(
                f"""
                SELECT session_id, cohort_id, date
                FROM session_days
                WHERE cohort_id IN ({placeholders}) AND date >= DATE('now')
                ORDER BY date
                LIMIT 30
                """,
                cohorts
            )).fetchall()

    if not rows:
        await message.answer("–ë–ª–∏–∂–∞–π—à–∏—Ö –¥–∞—Ç –Ω–µ—Ç.")
        return

    lines = ["üìÖ –î–∞—Ç—ã –±–ª–∏–∂–∞–π—à–∏—Ö –∑–∞–Ω—è—Ç–∏–π:" ]
    kb_rows = []
    for r in rows:
        d = datetime.fromisoformat(r["date"])
        label = d.strftime("%d.%m.%Y")
        lines.append(f"{label} [{r['cohort_id']}]")
        kb_rows.append([InlineKeyboardButton(text=label, callback_data=f"sd:{r['session_id']}:{r['date']}")])

    await message.answer("\n".join(lines),
                         reply_markup=InlineKeyboardMarkup(inline_keyboard=kb_rows))


@router.callback_query(F.data.startswith("sd:"))
async def schedule_date_details(cb: CallbackQuery):
    """–ü–æ –∫–ª–∏–∫—É –Ω–∞ –¥–∞—Ç—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–º—É –∏ –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
    _, session_id, date_str = cb.data.split(":", 2)

    async with aiosqlite.connect(DB_PATH) as db:
        db.row_factory = aiosqlite.Row
        sess = await (await db.execute(
            "SELECT title, notes FROM course_sessions WHERE id = ?", (int(session_id),)
        )).fetchone()

    d = datetime.fromisoformat(date_str)
    text = (
        f"–î–∞—Ç–∞: <b>{d.strftime('%d.%m.%Y')} ({_weekday_ru(d)})</b>\n"
        f"–¢–µ–º–∞ –∑–∞–Ω—è—Ç–∏—è: <b>{(sess['title'] if sess else '‚Äî')}</b>\n"
        f"–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {(sess['notes'] if sess and sess['notes'] else '‚Äî')}"
    )
    await cb.message.answer(text, parse_mode="HTML")
    await cb.answer()


def register_admin_info_handlers(dp):
    dp.include_router(router)
