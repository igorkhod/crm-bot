# üìÅ from_chatgpt/crm/services.py
# services.py ‚Äî –º–æ–¥—É–ª—å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö CRM: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Ç–æ–∫–∞—Ö –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö.

from .models import DB_PATH
import aiosqlite
from datetime import datetime


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def add_user(telegram_id: int, full_name: str, nickname: str, role: str = "participant", phone: str = "", email: str = "", password: str = ""):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            """
            INSERT OR IGNORE INTO users (telegram_id, full_name, nickname, role, phone, email, password)
            VALUES (?, ?, ?, ?, ?, ?, ?)
            """,
            (telegram_id, full_name, nickname, role, phone, email, password)
        )
        await db.commit()


# –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
async def get_user_by_telegram(telegram_id: int):
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT * FROM users WHERE telegram_id = ?", (telegram_id,)) as cursor:
            return await cursor.fetchone()


# –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ nickname
async def get_user_by_nickname(nickname: str):
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT * FROM users WHERE nickname = ?", (nickname,)) as cursor:
            return await cursor.fetchone()


# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ nickname
async def update_user_password(nickname: str, new_password: str):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("UPDATE users SET password = ? WHERE nickname = ?", (new_password, nickname))
        await db.commit()


# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
async def update_user_role(user_id: int, new_role: str):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "UPDATE users SET role = ? WHERE telegram_id = ?",
            (new_role, user_id)
        )
        await db.commit()


# –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–æ—Ç–æ–∫–∏
async def get_streams():
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT id, name, start_date, end_date, status FROM streams") as cursor:
            return await cursor.fetchall()


# –ü–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
async def get_participants_by_stream(stream_id: int):
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("""
            SELECT u.full_name, p.status, p.registered_at
            FROM participants p
            JOIN users u ON u.id = p.user_id
            WHERE p.stream_id = ?
        """, (stream_id,)) as cursor:
            return await cursor.fetchall()


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø–æ—Ç–æ–∫
async def register_participant(telegram_id: int, stream_id: int):
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT id FROM users WHERE telegram_id = ?", (telegram_id,)) as cursor:
            row = await cursor.fetchone()
            if not row:
                return False
            user_id = row[0]

        async with db.execute("SELECT id FROM participants WHERE user_id = ? AND stream_id = ?", (user_id, stream_id)) as cursor:
            exists = await cursor.fetchone()
            if exists:
                return False

        await db.execute(
            "INSERT INTO participants (user_id, stream_id, registered_at) VALUES (?, ?, ?)",
            (user_id, stream_id, datetime.now().isoformat())
        )
        await db.commit()
        return True


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
async def seed_demo_data():
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT COUNT(*) FROM streams") as cursor:
            count = (await cursor.fetchone())[0]
            if count > 0:
                print("‚ö†Ô∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º seed.")
                return

        print("üß™ –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–æ—Ç–æ–∫–∏...")
        await db.executemany(
            "INSERT INTO streams (name, start_date, end_date, status) VALUES (?, ?, ?, ?)",
            [
                ("1-–π –ø–æ—Ç–æ–∫ (—Å–µ–Ω—Ç—è–±—Ä—å 2023)", "2023-09-01", "2023-12-01", "finished"),
                ("2-–π –ø–æ—Ç–æ–∫ (–º–∞—Ä—Ç 2025)", "2025-03-01", "2025-06-01", "active"),
                ("–î–æ–Ω–∞–±–æ—Ä (–∞–≤–≥—É—Å—Ç 2025)", "2025-08-23", "2025-08-24", "active"),
                ("–ù–æ–≤—ã–π –ø–æ—Ç–æ–∫ (—è–Ω–≤–∞—Ä—å 2026)", "2026-01-01", "2026-04-01", "planned")
            ]
        )
        await db.commit()


# üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ user_id
async def update_user_password(user_id: int, new_password: str):
    # üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏
    async with aiosqlite.connect(DB_PATH) as db:
        # üõ† –í—ã–ø–æ–ª–Ω—è–µ–º SQL-–∫–æ–º–∞–Ω–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –¥–ª—è –Ω—É–∂–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.execute(
            '''
            UPDATE users
            SET password = ?
            WHERE id = ?
            ''',
            (new_password, user_id)  # üì§ –ü–µ—Ä–µ–¥–∞—ë–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ SQL-–∑–∞–ø—Ä–æ—Å: –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        )
        # üíæ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await db.commit()
