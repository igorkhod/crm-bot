from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import aiosqlite
from datetime import datetime, timedelta

from from_chatgpt.crm.db import DB_PATH


# –†–æ—É—Ç–µ—Ä –∞–¥–º–∏–Ω-—Ä–∞–∑–¥–µ–ª–∞ ¬´–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ¬ª
admin_schedule_router = Router()


# --------------------------
# –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π (FSM)
# --------------------------
class AddSessionFSM(StatesGroup):
    choose_cohort = State()    # –≤—ã–±–æ—Ä —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞
    create_cohort = State()    # –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ cohort_id
    enter_seq = State()        # –Ω–æ–º–µ—Ä —Å–µ—Å—Å–∏–∏
    choose_kind = State()      # –ü–ù/–ü–¢–ì
    enter_date = State()       # –¥–∞—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è dd.mm.yyyy
    enter_title = State()      # –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏


# --------------------------
# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–∏–Ω–∏-–º–µ–Ω—é –∞–¥–º–∏–Ω–∞
# --------------------------
@admin_schedule_router.message(Command("–∞–¥–º–∏–Ω_—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"))
async def admin_menu(message: types.Message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–≤–∞ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é:
    ‚Äì ¬´–í—ã–±—Ä–∞—Ç—å –ø–æ—Ç–æ–∫¬ª
    ‚Äì ¬´–°–æ–∑–¥–∞—Ç—å –ø–æ—Ç–æ–∫¬ª
    """
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [types.KeyboardButton(text="üìö –í—ã–±—Ä–∞—Ç—å –ø–æ—Ç–æ–∫")],
        [types.KeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ—Ç–æ–∫")],
    ])
    await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: –≤—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –ø–æ—Ç–æ–∫.", reply_markup=kb)


# ---------------------------------------
# 1) ¬´–í—ã–±—Ä–∞—Ç—å –ø–æ—Ç–æ–∫¬ª: —Ç–∞–±–ª–∏—Ü–∞ + –∫–Ω–æ–ø–∫–∏
# ---------------------------------------
@admin_schedule_router.message(F.text == "üìö –í—ã–±—Ä–∞—Ç—å –ø–æ—Ç–æ–∫")
async def choose_cohort(message: types.Message, state: FSMContext):
    """
    –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É ¬´‚Ññ | –±–ª–∏–∂–∞–π—à–∞—è –¥–∞—Ç–∞¬ª –ø–æ –≤—Å–µ–º –ø–æ—Ç–æ–∫–∞–º,
    —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –±—É–¥—É—â–∏–µ –∑–∞–Ω—è—Ç–∏—è, –∏ —Å—Ç—Ä–æ–∏–º inline-–∫–Ω–æ–ø–∫–∏ 1..N.
    """
    async with aiosqlite.connect(DB_PATH) as db:
        db.row_factory = aiosqlite.Row
        rows = await (await db.execute(
            """
            SELECT cohort_id, MIN(date) AS next_date
            FROM session_days
            WHERE date >= DATE('now')
            GROUP BY cohort_id
            ORDER BY next_date
            """
        )).fetchall()

    if not rows:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ—Ç–æ–∫–æ–≤ —Å –±—É–¥—É—â–∏–º–∏ –∑–∞–Ω—è—Ç–∏—è–º–∏.")
        return

    # ¬´–¢–∞–±–ª–∏—Ü–∞¬ª –≤ —Ç–µ–∫—Å—Ç–µ
    lines = ["‚Ññ | –±–ª–∏–∂–∞–π—à–∞—è –¥–∞—Ç–∞"]
    buttons = []
    for i, r in enumerate(rows, start=1):
        d = datetime.fromisoformat(r["next_date"]).strftime("%d.%m.%Y")
        lines.append(f"{i} | {d}  [{r['cohort_id']}]")
        buttons.append([InlineKeyboardButton(text=str(i),
                                             callback_data=f"pick_cohort:{r['cohort_id']}")])

    await message.answer(
        "\n".join(lines),
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    # –∂–¥—ë–º ¬´–ª–æ–≥–∏—á–µ—Å–∫–∏–π¬ª –≤—ã–±–æ—Ä –ø–æ—Ç–æ–∫–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –Ω–æ –ø—É—Å—Ç—å –±—É–¥–µ—Ç)
    await state.set_state(AddSessionFSM.choose_cohort)


# ---------------------------------------
# Callback: –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
# ---------------------------------------
@admin_schedule_router.callback_query(F.data.startswith("pick_cohort:"))
async def cb_pick_cohort(cb: types.CallbackQuery, state: FSMContext):
    """
    –ü–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –Ω–æ–º–µ—Ä –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–æ—Ç–æ–∫ –∏
    –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é.
    """
    cohort_id = cb.data.split(":", 1)[1]
    await state.update_data(cohort_id=cohort_id)

    async with aiosqlite.connect(DB_PATH) as db:
        db.row_factory = aiosqlite.Row
        rows = await (await db.execute(
            """
            SELECT seq, course_kind, title, date_start, date_end
            FROM course_sessions
            WHERE cohort_id = ?
            ORDER BY seq, course_kind
            """, (cohort_id,)
        )).fetchall()

    if not rows:
        await cb.message.edit_text(f"–ü–æ—Ç–æ–∫ ‚Äò{cohort_id}‚Äô –≤—ã–±—Ä–∞–Ω. –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∫–∞ –ø—É—Å—Ç–æ.")
        await cb.answer()
        return

    out = [f"üóÇ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ {cohort_id}:"]
    for r in rows:
        d1 = datetime.fromisoformat(r["date_start"]).strftime("%d.%m.%Y")
        d2 = datetime.fromisoformat(r["date_end"]).strftime("%d.%m.%Y")
        out.append(f"{r['seq']} {r['course_kind']} ‚Äî {r['title']} ({d1}‚Äì{d2})")

    await cb.message.edit_text("\n".join(out))
    await cb.answer()


# ---------------------------------------
# 2) ¬´–°–æ–∑–¥–∞—Ç—å –ø–æ—Ç–æ–∫¬ª: –≤–≤–æ–¥ cohort_id
# ---------------------------------------
@admin_schedule_router.message(F.text == "‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ—Ç–æ–∫")
async def create_cohort(message: types.Message, state: FSMContext):
    """–ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ create_cohort."""
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ—Ç–æ–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, recruitmen_2025_03):")
    await state.set_state(AddSessionFSM.create_cohort)


@admin_schedule_router.message(AddSessionFSM.create_cohort, F.text.regexp(r"^[A-Za-z0-9_]{4,}$"))
async def save_new_cohort(message: types.Message, state: FSMContext):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ–º cohort_id –¢–û–õ–¨–ö–û –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ create_cohort, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å
    –Ω–∏–∫–Ω–µ–π–º—ã –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ –∏ –ø—Ä–æ—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    cohort_id = message.text.strip()
    await state.update_data(cohort_id=cohort_id)
    await message.answer(
        f"–ü–æ—Ç–æ–∫ ‚Äò{cohort_id}‚Äô –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é. "
        f"–ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Å–µ—Å—Å–∏–∏ (¬´‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Å—Å–∏—é¬ª) –∏–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑ Excel."
    )


# ---------------------------------------
# 3) –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ (–ø–æ—à–∞–≥–æ–≤–æ)
# ---------------------------------------
@admin_schedule_router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Å—Å–∏—é")
async def add_session_start(message: types.Message, state: FSMContext):
    data = await state.get_data()
    cohort_id = data.get("cohort_id")
    if not cohort_id:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ç–æ–∫ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π.")
        return
    await state.set_state(AddSessionFSM.enter_seq)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–µ—Å—Å–∏–∏ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 10):")


@admin_schedule_router.message(AddSessionFSM.enter_seq, F.text.regexp(r"^\d{1,2}$"))
async def add_session_seq(message: types.Message, state: FSMContext):
    await state.update_data(seq=int(message.text.strip()))
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [types.KeyboardButton(text="–ü–ù"), types.KeyboardButton(text="–ü–¢–ì")]
    ])
    await state.set_state(AddSessionFSM.choose_kind)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–µ—Å—Å–∏–∏: –ü–ù –∏–ª–∏ –ü–¢–ì", reply_markup=kb)


@admin_schedule_router.message(AddSessionFSM.choose_kind, F.text.in_({"–ü–ù", "–ü–¢–ì"}))
async def add_session_kind(message: types.Message, state: FSMContext):
    await state.update_data(kind=message.text.strip())
    await state.set_state(AddSessionFSM.enter_date)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20.09.2025):")


@admin_schedule_router.message(AddSessionFSM.enter_date, F.text.regexp(r"^\d{2}\.\d{2}\.\d{4}$"))
async def add_session_date(message: types.Message, state: FSMContext):
    d1 = datetime.strptime(message.text.strip(), "%d.%m.%Y")
    d2 = d1 + timedelta(days=1)  # –≤—Ç–æ—Ä–æ–π –¥–µ–Ω—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    await state.update_data(date_start=d1.date().isoformat(), date_end=d2.date().isoformat())
    await state.set_state(AddSessionFSM.enter_title)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ (–∏–ª–∏ ¬´-¬ª, —á—Ç–æ–±—ã –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é):")


@admin_schedule_router.message(AddSessionFSM.enter_title)
async def add_session_finish(message: types.Message, state: FSMContext):
    data = await state.get_data()
    title = message.text.strip()
    if title == "-":
        title = ("–ü—Å–∏—Ö–æ–Ω–µ—Ç–∏–∫–∞ " if data["kind"] == "–ü–ù" else "–ü—Å–∏—Ö–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≥–∞—Ä–º–æ–Ω–∏–∏ ") + str(data["seq"])

    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            """
            INSERT OR IGNORE INTO course_sessions
                (cohort_id, seq, course_kind, title, date_start, date_end)
            VALUES (?, ?, ?, ?, ?, ?)
            """,
            (data["cohort_id"], data["seq"], data["kind"], title, data["date_start"], data["date_end"]),
        )
        await db.commit()

    await state.clear()
    await message.answer("‚úÖ –°–µ—Å—Å–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞. –ï—â—ë? –ù–∞–∂–º–∏—Ç–µ ¬´‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Å—Å–∏—é¬ª –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–º–ø–æ—Ä—Ç –∏–∑ Excel.")


# ---------------------------------------
# 4) –ò–º–ø–æ—Ä—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–∑ Excel (–∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω–µ: –¥–∞—Ç–∞1 | –¥–∞—Ç–∞2 | "N –ü–ù/–ü–¢–ì")
# ---------------------------------------
@admin_schedule_router.message(F.text == "üì• –ò–º–ø–æ—Ä—Ç –∏–∑ Excel")
async def import_excel_prompt(message: types.Message):
    await message.answer(
        "–ü—Ä–∏—à–ª–∏—Ç–µ .xlsx. –§–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫: –î–î.–ú–ú.–ì–ì–ì–ì | –î–î.–ú–ú.–ì–ì–ì–ì | 'N –ü–ù/–ü–¢–ì'. "
        "cohort_id –±–µ—Ä—ë–º –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞."
    )


@admin_schedule_router.message(F.document)
async def import_excel_file(message: types.Message, state: FSMContext):
    doc = message.document
    if not doc.file_name.lower().endswith(".xlsx"):
        return  # –º–æ–ª—á–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ —Ñ–∞–π–ª—ã

    data = await state.get_data()
    cohort_id = data.get("cohort_id")
    if not cohort_id:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ç–æ–∫ (¬´üìö –í—ã–±—Ä–∞—Ç—å –ø–æ—Ç–æ–∫¬ª) –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π.")
        return

    file = await message.bot.get_file(doc.file_id)
    tmp_path = f"/tmp/{doc.file_name}"
    await message.bot.download_file(file.file_path, destination=tmp_path)

    try:
        from openpyxl import load_workbook
        wb = load_workbook(tmp_path)
        ws = wb.active
    except Exception as e:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª: {e}")
        return

    inserted = 0
    async with aiosqlite.connect(DB_PATH) as db:
        for i, row in enumerate(ws.iter_rows(values_only=True), start=1):
            # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ –ø–µ—Ä–≤–∞—è —è—á–µ–π–∫–∞ –Ω–µ –¥–∞—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä ¬´–Ω–∞–±–æ—Ä –º–∞—Ä—Ç 2025¬ª)
            c1 = row[0]
            if isinstance(c1, str):
                try:
                    d1 = datetime.strptime(c1.strip(), "%d.%m.%Y")
                except Exception:
                    continue
            else:
                d1 = c1
            c2 = row[1]
            if isinstance(c2, str):
                try:
                    d2 = datetime.strptime(c2.strip(), "%d.%m.%Y")
                except Exception:
                    continue
            else:
                d2 = c2

            label = str(row[2]).strip() if row[2] is not None else ""
            if " " not in label:
                continue
            num_str, kind = label.split(None, 1)
            try:
                seq = int(num_str)
            except Exception:
                continue
            kind = kind.strip().upper()
            if kind not in {"–ü–ù", "–ü–¢–ì"}:
                continue

            title = ("–ü—Å–∏—Ö–æ–Ω–µ—Ç–∏–∫–∞ " if kind == "–ü–ù" else "–ü—Å–∏—Ö–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≥–∞—Ä–º–æ–Ω–∏–∏ ") + str(seq)

            await db.execute(
                """
                INSERT OR IGNORE INTO course_sessions
                    (cohort_id, seq, course_kind, title, date_start, date_end)
                VALUES (?, ?, ?, ?, ?, ?)
                """,
                (cohort_id, seq, kind, title, d1.date().isoformat(), d2.date().isoformat()),
            )
            inserted += 1
        await db.commit()

    await message.answer(f"‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. –î–æ–±–∞–≤–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫: {inserted}.")
