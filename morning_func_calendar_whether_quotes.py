import os
import json
import random
from email import message

import requests
from datetime import datetime
from pathlib import Path
import telebot
from pytils.dt import ru_strftime
from telebot import types
from telegram_bot_calendar import DetailedTelegramCalendar, LSTEP
from dotenv import load_dotenv

from good_morning_2 import KEYBOARD

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv(Path(__file__).parent / 'token.env')
TOKEN = os.getenv("TOKEN")
bot = telebot.TeleBot(TOKEN)
WEATHER_API_KEY = os.getenv("WEATHER_API_KEY")
QUOTES_FILE = Path(__file__).parent / 'quotes.json'

# –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –ø–æ–≥–æ–¥—ã
CITIES = {
    "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫": "Krasnoyarsk",
    "–ò—Ä–∫—É—Ç—Å–∫": "Irkutsk"
}


def load_quotes():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ü–∏—Ç–∞—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        if QUOTES_FILE.exists():
            with open(QUOTES_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        return []
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–∏—Ç–∞—Ç: {e}")
        return []


def create_keyboard():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        types.KeyboardButton("üîÆüïâÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –≥—Ä—É–ø–ø—É –ü—Å–∏—Ö–æ–Ω–µ—Ç–∏–∫–∞ –ò–Ω—å-–Ø–Ω"),
        types.KeyboardButton("üå≤‚öôÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –≥—Ä—É–ø–ø—É –ò—Ä–∫—É—Ç—Å–∫ –ø—Å–∏—Ö–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"),
        types.KeyboardButton("üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å"),
        types.KeyboardButton("üå§ –ü–æ–≥–æ–¥–∞"),
        types.KeyboardButton("üí¨ –°–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞"),
        types.KeyboardButton("‚ùì –ü–æ–º–æ—â—å")
    ]
    markup.add(*buttons)
    return markup


@bot.message_handler(func=lambda m: m.text == "üîÆüïâÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –≥—Ä—É–ø–ø—É –ü—Å–∏—Ö–æ–Ω–µ—Ç–∏–∫–∞ –ò–Ω—å-–Ø–Ω")
def go_to_psychonetics(message):
    group_link = "https://t.me/+EL9esd0xZ-xkMTU6"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    bot.send_message(
        chat_id=message.chat.id,
        text=f"üîÆ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –≥—Ä—É–ø–ø–µ '–ü—Å–∏—Ö–æ–Ω–µ—Ç–∏–∫–∞ –ò–Ω—å-–Ø–Ω':\n{group_link}",
        reply_markup=create_keyboard()
    )


@bot.message_handler(func=lambda m: m.text == "üå≤‚öôÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –≥—Ä—É–ø–ø—É –ò—Ä–∫—É—Ç—Å–∫ –ø—Å–∏—Ö–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏")
def go_to_irkutsk(message):
    group_link = "https://t.me/+7ZBrobhAJoRhM2U6"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    bot.send_message(
        chat_id=message.chat.id,
        text=f"üå≤ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –≥—Ä—É–ø–ø–µ '–ò—Ä–∫—É—Ç—Å–∫ –ø—Å–∏—Ö–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏':\n{group_link}",
        reply_markup=create_keyboard()
    )


def create_city_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        types.KeyboardButton("–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫"),
        types.KeyboardButton("–ò—Ä–∫—É—Ç—Å–∫"),
        types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥")
    ]
    markup.add(*buttons)
    return markup


# -------------------------------------------------

@bot.message_handler(commands=['start'])
def start(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    today = datetime.now()
    date_str = today.strftime("%d.%m.%Y")
    """–Ω–∞—á–∞–ª–æ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    calendar, step = DetailedTelegramCalendar(calendar_id=2, locale='ru').build()
    bot.send_message(message.chat.id,
                     f"–ö–∞–ª–µ–Ω–¥–∞—Ä—å 2: –í—ã–±–æ—Ä–∏—Ç–µ –≥–æ–¥",
                     # f"–ö–∞–ª–µ–Ω–¥–∞—Ä—å 2: –í—ã–±–æ—Ä  {LSTEP[step]}",
                     reply_markup=calendar)

    bot.send_message(
        chat_id=message.chat.id,
        text=f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n–°–µ–≥–æ–¥–Ω—è {date_str}",
        reply_markup=create_keyboard()
    )


# --------–∫–∞–ª–µ–Ω–¥–∞—Ä—å------------------------------------------
@bot.message_handler(func=lambda m: m.text == "üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å")
def calendar_handler(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    calendar, step = DetailedTelegramCalendar().build()
    bot.send_message(message.chat.id,
                     f"–í—ã–±–µ—Ä–∏—Ç–µ {LSTEP[step]}",
                     reply_markup=calendar)

    # @bot.message_handler(func=lambda m: m.text == "üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å")
    # def show_calendar(message):
    #     """–ü–æ–∫–∞–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    #     calendar, step = DetailedTelegramCalendar().build()
    #     bot.send_message(
    #         chat_id=message.chat.id,
    #         text=f"–í—ã–±–µ—Ä–∏—Ç–µ {LSTEP[step]}",
    #         reply_markup=calendar
    #     )

    @bot.callback_query_handler(func=DetailedTelegramCalendar.func())
    def calendar_callback(call):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ"""
        result, key, step = DetailedTelegramCalendar().process(call.data)
        if not result and key:
            bot.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ {LSTEP[step]}",
                                  call.message.chat.id,
                                  call.message.message_id,
                                  reply_markup=key)
        elif result:
            bot.edit_message_text(f"üìÖ –í—ã–±—Ä–∞–Ω–æ: {result.strftime('%d.%m.%Y')}",
                                  call.message.chat.id,
                                  call.message.message_id)
            bot.send_message(call.message.chat.id,
                             "–ß—Ç–æ –¥–∞–ª—å—à–µ?",
                             reply_markup=main_keyboard())

    @bot.callback_query_handler(func=DetailedTelegramCalendar.func(calendar_id=2))
    def cal1(c):
        # calendar_id is used here too, since the new keyboard is made
        result, key, step = DetailedTelegramCalendar(calendar_id=2, locale='ru').process(c.data)
        if not result and key:
            bot.edit_message_text(f"–ö–∞–ª–µ–Ω–¥–∞—Ä—å 2: –í—ã–±–µ—Ä–∏—Ç–µ {LSTEP[step]}",
                                  c.message.chat.id,
                                  c.message.message_id,
                                  reply_markup=key)
        elif result:
            bot.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É {result} –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ ",
                                  c.message.chat.id,
                                  c.message.message_id)

        bot.send_message(
            chat_id=call.message.chat.id,
            text="–ß—Ç–æ –¥–∞–ª—å—à–µ?",
            reply_markup=create_keyboard()
        )


@bot.message_handler(func=lambda m: m.text == "üå§ –ü–æ–≥–æ–¥–∞")
def ask_city_for_weather(message):
    """–ó–∞–ø—Ä–æ—Å –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–≥–æ–¥—ã"""
    bot.send_message(
        chat_id=message.chat.id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:",
        reply_markup=create_city_keyboard()
    )


@bot.message_handler(func=lambda m: m.text in ["–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫", "–ò—Ä–∫—É—Ç—Å–∫"])
def show_weather(message):
    """–ü–æ–∫–∞–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞"""
    city_name = message.text
    city_code = CITIES[city_name]

    try:
        url = f"http://api.openweathermap.org/data/2.5/weather?q={city_code}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
        response = requests.get(url)
        data = response.json()

        temp = data['main']['temp']
        description = data['weather'][0]['description'].capitalize()
        humidity = data['main']['humidity']
        wind = data['wind']['speed']

        weather_text = (
            f"üå§ –ü–æ–≥–æ–¥–∞ –≤ {city_name}:\n"
            f"‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
            f"‚Ä¢ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {description}\n"
            f"‚Ä¢ –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
            f"‚Ä¢ –í–µ—Ç–µ—Ä: {wind} –º/—Å"
        )
        bot.send_message(
            chat_id=message.chat.id,
            text=weather_text,
            reply_markup=create_keyboard()
        )
    except Exception as e:
        bot.send_message(
            chat_id=message.chat.id,
            text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã –¥–ª—è {city_name}",
            reply_markup=create_keyboard()
        )


@bot.message_handler(func=lambda m: m.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥")
def back_to_main(message):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    bot.send_message(
        chat_id=message.chat.id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_keyboard()
    )


@bot.message_handler(func=lambda m: m.text == "üí¨ –°–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞")
def send_random_quote(message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–π —Ü–∏—Ç–∞—Ç—ã"""
    quotes = load_quotes()

    if not quotes:
        bot.send_message(
            chat_id=message.chat.id,
            text="üì≠ –¶–∏—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
            reply_markup=create_keyboard()
        )
        return

    quote = random.choice(quotes)
    if isinstance(quote, dict):
        text = quote.get('text', '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞')
        # author = quote.get('author', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä')
        # response = f"üí¨ –¶–∏—Ç–∞—Ç–∞:\n\n¬´{text}¬ª\n‚Äî {author}"
        response = f"üí¨ –¶–∏—Ç–∞—Ç–∞:\n\n¬´{text}¬ª\n‚Äî"
    else:
        response = f"üí¨ –¶–∏—Ç–∞—Ç–∞:\n\n¬´{quote}¬ª"

    bot.send_message(
        chat_id=message.chat.id,
        text=response,
        reply_markup=create_keyboard()
    )


@bot.message_handler(func=lambda m: m.text == "‚ùì –ü–æ–º–æ—â—å")
def show_help(message):
    """–ü–æ–∫–∞–∑ —Å–ø—Ä–∞–≤–∫–∏"""
    help_text = (
        "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É:\n\n"
        "üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å - –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É\n"
        "üå§ –ü–æ–≥–æ–¥–∞ - —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É\n"
        "üí¨ –°–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞ - –ø–æ–ª—É—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—É\n"
        "‚ùì –ü–æ–º–æ—â—å - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )
    bot.send_message(
        chat_id=message.chat.id,
        text=help_text,
        reply_markup=create_keyboard()
    )


if __name__ == '__main__':
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    bot.polling(none_stop=True)
