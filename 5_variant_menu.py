1. –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –º–µ–Ω—é —Å –∏–∑–º–µ–Ω—è–µ–º—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏


@bot.message_handler(commands=['dynamic'])
def dynamic_menu(message):
    markup = types.InlineKeyboardMarkup()

    # –ö–Ω–æ–ø–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
    for i in range(1, 4):
        markup.add(types.InlineKeyboardButton(
            f"–í–∞—Ä–∏–∞–Ω—Ç {i}",
            callback_data=f"option_{i}"
        ))

    bot.send_message(
        message.chat.id,
        "üîÑ –ú–µ–Ω—é —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏:",
        reply_markup=markup
    )
   -------------------------------------------------
2. –ú–µ–Ω—é —Å —ç–º–æ–¥–∑–∏-–∞–Ω–∏–º–∞—Ü–∏–µ–π


@bot.message_handler(commands=['emoji'])
def emoji_menu(message):
    markup = types.InlineKeyboardMarkup()

    buttons = [
        ("üåÖ –£—Ç—Ä–æ", "morning"),
        ("üåá –í–µ—á–µ—Ä", "evening"),
        ("üåÉ –ù–æ—á—å", "night")
    ]

    for text, data in buttons:
        markup.add(types.InlineKeyboardButton(text, callback_data=data))

    bot.send_message(
        message.chat.id,
        "‚ú® –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫:",
        reply_markup=markup
    )
    ----------------------------------------
    3.–ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–µ –≤–ª–æ–∂–µ–Ω–Ω–æ–µ –º–µ–Ω—é

    @bot.callback_query_handler(func=lambda call: call.data.startswith('menu_'))
    def handle_menu(call):
        if call.data == "menu_main":
            markup = types.InlineKeyboardMarkup()
            markup.row(
                types.InlineKeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="menu_settings"),
                types.InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data="menu_help")
            )
            bot.edit_message_text(
                "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=markup
            )

        elif call.data == "menu_settings":
            markup = types.InlineKeyboardMarkup()
            markup.row(
                types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_main"),
                types.InlineKeyboardButton("–Ø–∑—ã–∫", callback_data="menu_lang")
            )
            bot.edit_message_text(
                "–ù–∞—Å—Ç—Ä–æ–π–∫–∏:",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=markup
            )
            -------------------------------------------------
            4.–ö–Ω–æ–ø–∫–∏ —Å web - –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º


@bot.message_handler(commands=['preview'])
def preview_menu(message):
    markup = types.InlineKeyboardMarkup()

    btn = types.InlineKeyboardButton(
        "–û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç —Å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º",
        url="https://example.com",
        callback_data="dont_click"  # –ü—Ä–æ—Å—Ç–æ –∑–∞–≥–ª—É—à–∫–∞
    )

    markup.add(btn)
    bot.send_message(
        message.chat.id,
        "–°–∞–π—Ç —Å –∫—Ä–∞—Å–∏–≤—ã–º –ø—Ä–µ–≤—å—é:",
        reply_markup=markup
    )
----------------------------------------
5. –ú–∏–Ω–∏-–∏–≥—Ä–∞ –≤ –º–µ–Ω—é


@bot.message_handler(commands=['game'])
def number_game(message):
    markup = types.InlineKeyboardMarkup()

    for i in range(1, 6):
        markup.add(types.InlineKeyboardButton(
            f"–ö–Ω–æ–ø–∫–∞ {i}",
            callback_data=f"guess_{i}"
        ))

    bot.send_message(
        message.chat.id,
        "–£–≥–∞–¥–∞–π —Å—á–∞—Å—Ç–ª–∏–≤—É—é –∫–Ω–æ–ø–∫—É (1-5):",
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith('guess_'))
def check_guess(call):
    chosen = int(call.data.split('_')[1])
    if chosen == 3:  # –°—á–∞—Å—Ç–ª–∏–≤–∞—è –∫–Ω–æ–ø–∫–∞
        bot.answer_callback_query(call.id, "üéâ –í—ã —É–≥–∞–¥–∞–ª–∏!", show_alert=True)
    else:
        bot.answer_callback_query(call.id, "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!")