import os
from datetime import datetime
from pathlib import Path

from fastapi import FastAPI, Request
import uvicorn
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
import requests
import json
import random

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ–∫—Ä–µ—Ç—ã
load_dotenv("/etc/secrets/token.env")

TOKEN = os.getenv("TELEGRAM_TOKEN")
WEATHER_API_KEY = os.getenv("WEATHER_API_KEY")

# Webhook –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = "https://telegram-cloud-bot-kwcs.onrender.com/webhook"

bot = Bot(token=TOKEN)
dp = Dispatcher()
app = FastAPI()

# ===== –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã =====
def main_keyboard():
    kb = [
        [KeyboardButton(text="üå§ –ü–æ–≥–æ–¥–∞"),
         KeyboardButton(text="üíµ –ö—É—Ä—Å –≤–∞–ª—é—Ç")],
        [KeyboardButton(text="üí¨ –¶–∏—Ç–∞—Ç–∞"),
         KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")]
    ]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

CITIES = {
    "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫": "Krasnoyarsk",
    "–ò—Ä–∫—É—Ç—Å–∫": "Irkutsk"
}

QUOTES_FILE = Path(__file__).parent / "data" / "quotes.json"

def load_quotes():
    if QUOTES_FILE.exists():
        try:
            with open(QUOTES_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        except:
            return []
    return []

# ===== –ö–æ–º–∞–Ω–¥—ã =====
@dp.message(Command("start"))
async def cmd_start(message: Message):
    today = datetime.now().strftime("%d.%m.%Y")
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç! –Ø —Ä–∞–±–æ—Ç–∞—é —á–µ—Ä–µ–∑ WEBHOOK ‚òÅÔ∏è\n–°–µ–≥–æ–¥–Ω—è {today}\n–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: RENDER",
        reply_markup=main_keyboard()
    )

@dp.message(lambda m: m.text == "üå§ –ü–æ–≥–æ–¥–∞")
async def ask_city(message: Message):
    kb = [[KeyboardButton(text=city)] for city in CITIES]
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True))

@dp.message(lambda m: m.text in CITIES)
async def weather(message: Message):
    city = message.text
    code = CITIES[city]
    url = f"http://api.openweathermap.org/data/2.5/weather?q={code},RU&appid={WEATHER_API_KEY}&units=metric&lang=ru"
    try:
        r = requests.get(url)
        data = r.json()
        temp = data['main']['temp']
        desc = data['weather'][0]['description'].capitalize()
        await message.answer(f"–ü–æ–≥–æ–¥–∞ –≤ {city}: {temp:.1f}¬∞C, {desc}", reply_markup=main_keyboard())
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø–æ–≥–æ–¥—ã: {e}", reply_markup=main_keyboard())

@dp.message(lambda m: m.text == "üíµ –ö—É—Ä—Å –≤–∞–ª—é—Ç")
async def currency(message: Message):
    data = requests.get("https://www.cbr-xml-daily.ru/daily_json.js").json()
    usd = data['Valute']['USD']['Value']
    eur = data['Valute']['EUR']['Value']
    await message.answer(f"USD: {usd:.2f}‚ÇΩ\nEUR: {eur:.2f}‚ÇΩ", reply_markup=main_keyboard())

@dp.message(lambda m: m.text == "üí¨ –¶–∏—Ç–∞—Ç–∞")
async def quote(message: Message):
    quotes = load_quotes()
    if not quotes:
        await message.answer("–ù–µ—Ç —Ü–∏—Ç–∞—Ç.", reply_markup=main_keyboard())
        return
    q = random.choice(quotes)
    text = q['text'] if isinstance(q, dict) else str(q)
    await message.answer(f"¬´{text}¬ª", reply_markup=main_keyboard())

@dp.message(lambda m: m.text == "‚ùì –ü–æ–º–æ—â—å")
async def help_cmd(message: Message):
    await message.answer("–ü–æ–º–æ—â—å: /start, –ø–æ–≥–æ–¥–∞, –∫—É—Ä—Å –≤–∞–ª—é—Ç, —Ü–∏—Ç–∞—Ç—ã", reply_markup=main_keyboard())

# ===== Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ =====
@app.post(WEBHOOK_PATH)
async def webhook(request: Request):
    data = await request.json()
    await dp.feed_webhook_update(bot, types.Update(**data))
    return {"ok": True}

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
@app.on_event("startup")
async def on_startup():
    await bot.set_webhook(WEBHOOK_URL)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã
@app.get("/")
def root():
    return {"status": "ok", "mode": "webhook"}

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=10000)
