import os
import json
import random
import requests
from io import BytesIO
from pathlib import Path
from PIL import Image
import telebot
from telebot import types
from telegram_bot_calendar import DetailedTelegramCalendar, LSTEP
from dotenv import load_dotenv

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
load_dotenv(Path(__file__).parent / 'token.env')
bot = telebot.TeleBot(os.getenv("TOKEN"))
WEATHER_API_KEY = os.getenv("WEATHER_API_KEY")
QUOTES_FILE = Path(__file__).parent / 'quotes.json'
CBR_API_URL = "https://www.cbr-xml-daily.ru/daily_json.js"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–æ—Ä–æ–¥–æ–≤
CITIES = {
    "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫": {
        "code": "Krasnoyarsk",
        "emoji": "üèôÔ∏è"
    },
    "–ò—Ä–∫—É—Ç—Å–∫": {
        "code": "Irkutsk",
        "emoji": "üèîÔ∏è"
    }
}

# –°—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤
CITY_IMAGES = {
    "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫": {
        "url": "https://avatars.mds.yandex.net/i?id=1ca589f37177ebbb703224197d6f24d4_l-4824599-images-thumbs&n=13",
        "path": "data/krasnoyarsk.jpg"
    },
    "–ò—Ä–∫—É—Ç—Å–∫": {
        "url": "https://rused.ru/irk-mdou96/wp-content/uploads/sites/129/2020/05/1430939158_gerb-8.jpg",
        "path": "data/irkutsk.jpg"
    }
}

# –°—Å—ã–ª–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—ã
GROUP_LINKS = {
    "üß† –ü—Å–∏—Ö–æ–Ω–µ—Ç–∏–∫–∞ –ò–Ω—å-–Ø–Ω": "https://t.me/+EL9esd0xZ-xkMTU6",
    "üîÆ –ò—Ä–∫—É—Ç—Å–∫ –ø—Å–∏—Ö–æ—Ç–µ—Ö": "https://t.me/+7ZBrobhAJoRhM2U6"
}

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
os.makedirs("data", exist_ok=True)


# --- –§—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ---
def download_and_resize_images():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ —É–º–µ–Ω—å—à–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤ (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ)"""
    for city, data in CITY_IMAGES.items():
        if not os.path.exists(data["path"]):
            try:
                print(f"–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è {city}...")
                response = requests.get(data["url"], timeout=10)
                img = Image.open(BytesIO(response.content))

                # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –≤ 2 —Ä–∞–∑–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
                new_size = (img.width // 2, img.height // 2)
                img = img.resize(new_size, Image.LANCZOS)

                img.save(data["path"], "JPEG", quality=85)
                print(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è {city} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è {city}: {e}")


# –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
download_and_resize_images()


# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def main_keyboard():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        types.KeyboardButton("üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å"),
        types.KeyboardButton("üå§ –ü–æ–≥–æ–¥–∞"),
        types.KeyboardButton("üí¨ –¶–∏—Ç–∞—Ç–∞"),
        types.KeyboardButton("üí∞ –í–∞–ª—é—Ç–∞"),
        types.KeyboardButton("‚ùì –ü–æ–º–æ—â—å"),
        *[types.KeyboardButton(name) for name in GROUP_LINKS.keys()]
    ]
    markup.add(*buttons)
    return markup


def cities_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [types.KeyboardButton(f"{city} {data['emoji']}") for city, data in CITIES.items()]
    buttons.append(types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥"))
    markup.add(*buttons)
    return markup


# --- –§—É–Ω–∫—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö ---
def load_quotes():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ü–∏—Ç–∞—Ç –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        if QUOTES_FILE.exists():
            with open(QUOTES_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        return []
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–∏—Ç–∞—Ç: {e}")
        return []


def get_weather(city_name):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ"""
    try:
        city_data = CITIES[city_name]
        url = f"http://api.openweathermap.org/data/2.5/weather?q={city_data['code']}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
        response = requests.get(url, timeout=5)
        data = response.json()

        return {
            "text": (
                f"{city_data['emoji']} –ü–æ–≥–æ–¥–∞ –≤ {city_name}:\n"
                f"‚Ä¢ {data['weather'][0]['description'].capitalize()}\n"
                f"‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {data['main']['temp']}¬∞C\n"
                f"‚Ä¢ –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {data['main']['feels_like']}¬∞C\n"
                f"‚Ä¢ –í–ª–∞–∂–Ω–æ—Å—Ç—å: {data['main']['humidity']}%\n"
                f"‚Ä¢ –í–µ—Ç–µ—Ä: {data['wind']['speed']} –º/—Å"
            ),
            "image_path": CITY_IMAGES[city_name]["path"]
        }
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–≥–æ–¥—ã: {e}")
        return None


def get_currency_rates():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –æ—Ç –¶–ë –†–§"""
    try:
        response = requests.get(CBR_API_URL, timeout=5)
        data = response.json()

        usd = data['Valute']['USD']
        eur = data['Valute']['EUR']

        return (
            "üí± –ö—É—Ä—Å—ã –¶–ë –†–§:\n\n"
            f"üá∫üá∏ USD: {usd['Value']} ‚ÇΩ\n"
            f"üá™üá∫ EUR: {eur['Value']} ‚ÇΩ\n\n"
            f"üìÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {data['Date'][:10]}"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤: {e}")
        return None


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
@bot.message_handler(commands=['start'])
def start(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    bot.send_message(message.chat.id,
                     "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                     reply_markup=main_keyboard())


@bot.message_handler(func=lambda m: m.text == "üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å")
def calendar_handler(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    calendar, step = DetailedTelegramCalendar().build()
    bot.send_message(message.chat.id,
                     f"–í—ã–±–µ—Ä–∏—Ç–µ {LSTEP[step]}",
                     reply_markup=calendar)


@bot.callback_query_handler(func=DetailedTelegramCalendar.func())
def calendar_callback(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ"""
    result, key, step = DetailedTelegramCalendar().process(call.data)
    if not result and key:
        bot.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ {LSTEP[step]}",
                              call.message.chat.id,
                              call.message.message_id,
                              reply_markup=key)
    elif result:
        bot.edit_message_text(f"üìÖ –í—ã–±—Ä–∞–Ω–æ: {result.strftime('%d.%m.%Y')}",
                              call.message.chat.id,
                              call.message.message_id)
        bot.send_message(call.message.chat.id,
                         "–ß—Ç–æ –¥–∞–ª—å—à–µ?",
                         reply_markup=main_keyboard())


@bot.message_handler(func=lambda m: m.text == "üå§ –ü–æ–≥–æ–¥–∞")
def weather_handler(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–≥–æ–¥—ã"""
    bot.send_message(message.chat.id,
                     "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:",
                     reply_markup=cities_keyboard())
#–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞
#-----------------------------------------------------------------

@bot.message_handler(func=lambda m: any(city in m.text for city in CITIES))
def city_handler(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π —Å–ª–µ–≤–∞ –∏ —Ç–µ–∫—Å—Ç–æ–º —Å–ø—Ä–∞–≤–∞"""
    city_name = next((city for city in CITIES if city in message.text), None)

    if not city_name or not (weather_data := get_weather(city_name)):
        return bot.send_message(message.chat.id, "‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã", reply_markup=main_keyboard())

    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —É–º–µ–Ω—å—à–µ–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
        with open(CITY_IMAGES[city_name]["path"], 'rb') as img_file:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º caption —Å–ø—Ä–∞–≤–∞
            bot.send_photo(
                chat_id=message.chat.id,
                photo=img_file,
                caption=weather_data["text"],
                reply_markup=main_keyboard(),
                parse_mode='HTML'
            )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        # –§–æ–ª–±—ç–∫: —Ä–∞–∑–¥–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
        with open(CITY_IMAGES[city_name]["path"], 'rb') as photo:
            bot.send_photo(message.chat.id, photo)
        bot.send_message(message.chat.id, weather_data["text"], reply_markup=main_keyboard())

#–∫–æ–Ω–µ—Ü –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞
#-----------------------------------------------------------------

@bot.message_handler(func=lambda m: m.text == "üí¨ –¶–∏—Ç–∞—Ç–∞")
def quote_handler(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Ü–∏—Ç–∞—Ç—ã"""
    quotes = load_quotes()
    if quotes:
        quote = random.choice(quotes)
        text = f"üí¨ –¶–∏—Ç–∞—Ç–∞ –¥–Ω—è:\n\n¬´{quote['text']}¬ª\n‚Äî {quote.get('author', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä')}"
    else:
        text = "üì≠ –¶–∏—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    bot.send_message(message.chat.id, text, reply_markup=main_keyboard())


@bot.message_handler(func=lambda m: m.text == "üí∞ –í–∞–ª—é—Ç–∞")
def currency_handler(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –≤–∞–ª—é—Ç—ã"""
    if rates := get_currency_rates():
        bot.send_message(message.chat.id, rates, reply_markup=main_keyboard())
    else:
        bot.send_message(message.chat.id,
                         "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã",
                         reply_markup=main_keyboard())


@bot.message_handler(func=lambda m: m.text == "‚ùì –ü–æ–º–æ—â—å")
def help_handler(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏"""
    help_text = (
        "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É:\n\n"
        "üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å - –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É\n"
        "üå§ –ü–æ–≥–æ–¥–∞ - —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É\n"
        "üí¨ –¶–∏—Ç–∞—Ç–∞ - —Å–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞\n"
        "üí∞ –í–∞–ª—é—Ç–∞ - –∫—É—Ä—Å—ã USD/EUR\n"
        "‚ùì –ü–æ–º–æ—â—å - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )
    bot.send_message(message.chat.id, help_text, reply_markup=main_keyboard())


@bot.message_handler(func=lambda m: m.text in GROUP_LINKS.keys())
def group_handler(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥—Ä—É–ø–ø"""
    bot.send_message(message.chat.id,
                     f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å: {GROUP_LINKS[message.text]}",
                     disable_web_page_preview=True)


@bot.message_handler(func=lambda m: m.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥")
def back_handler(message):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    bot.send_message(message.chat.id,
                     "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                     reply_markup=main_keyboard())


# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == '__main__':
    print("üü¢ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
    bot.infinity_polling()