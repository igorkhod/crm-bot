# crm2/services/chatgpt_status.py
# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–ª–∞—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ ChatGPT —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–∞–ª–∞–Ω—Å–∞
# –¢–∏–ø—ã:
# - PaidState - –õ–∏—Ç–µ—Ä–∞–ª —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–æ—Å—Ç—É–ø–∞ (open, closed, unknown)
# –§—É–Ω–∫—Ü–∏–∏:
# - _decide_state_from_error - –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ —Ç–µ–∫—Å—Ç—É –æ—à–∏–±–∫–∏
# - probe_paid_access - –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ ChatGPT —á–µ—Ä–µ–∑ –ø—Ä–æ–±–Ω—ã–π –∑–∞–ø—Ä–æ—Å
# - render_binary_md - –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Ç–∞–µ–º–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ Markdown
import os, time
from typing import Dict, Any, Literal

PaidState = Literal["open", "closed", "unknown"]

def _decide_state_from_error(msg: str) -> PaidState:
    m = msg.lower()
    # –∫–ª—é—á–µ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ "–¥–µ–Ω–µ–≥ –Ω–µ—Ç / –∫–≤–æ—Ç–∞ –∏—Å—á–µ—Ä–ø–∞–Ω–∞"
    if "insufficient_quota" in m or "billing_hard_limit_reached" in m or "account_deactivated" in m:
        return "closed"
    # —Ç–∏–ø–æ–≤—ã–µ –æ—à–∏–±–∫–∏, –ø—Ä–∏ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ–ª—å–∑—è —Å—É–¥–∏—Ç—å –æ –±–∞–ª–∞–Ω—Å–µ
    if any(x in m for x in ["invalid_api_key", "authentication", "api key not found"]):
        return "unknown"
    if any(x in m for x in ["rate_limit", "overloaded", "server error", "timeout", "connection"]):
        # —Å–µ—Ä–≤–∏—Å –∂–∏–≤, –Ω–æ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –æ–ø–ª–∞—á–µ–Ω–Ω–∞—è –∑–æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        return "open"
    return "unknown"
# IGOR_OPENAI_API=
def probe_paid_access() -> Dict[str, Any]:
    """
    –ü—Ä–æ–±—É–µ–º —Å–¥–µ–ª–∞—Ç—å –ú–ò–ù–ò-–∫–æ–º–ø–ª–∏—à–Ω (1‚Äì3 —Ç–æ–∫–µ–Ω–∞) –Ω–∞ –¥–µ—à—ë–≤–æ–π –º–æ–¥–µ–ª–∏.
    –£—Å–ª–æ–≤–∏—è:
      - –µ—Å–ª–∏ —É—Å–ø–µ—Ö ‚Üí 'open'
      - –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ 'insufficient_quota' ‚Üí 'closed'
      - –∏–Ω–æ–µ ‚Üí 'unknown'
    """
    model = os.getenv("OPENAI_MODEL") or "gpt-4o-mini"
    info: Dict[str, Any] = {
        "IGOR_OPENAI_API_present": bool(os.getenv("IGOR_OPENAI_API")),
        "model": model,
        "api_ping_ms": "‚Äî",
        "state": "unknown",
        "last_error": "‚Äî",
        "note": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–ª–∞–µ—Ç –∫—Ä–æ—à–µ—á–Ω—ã–π –ø–ª–∞—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å (–ø–∞—Ä–∞ —Ç–æ–∫–µ–Ω–æ–≤).",
    }

    if not info["IGOR_OPENAI_API_present"]:
        info["last_error"] = "IGOR_OPENAI_API –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return info

    try:
        from openai import OpenAI
        client = OpenAI()
        start = time.monotonic()

        # —É–ª—å—Ç—Ä–∞-–¥–µ—à—ë–≤—ã–π –≤—ã–∑–æ–≤
        _ = client.chat.completions.create(
            model=model,
            messages=[{"role": "user", "content": "ok"}],
            max_tokens=1,
            temperature=0.0,
        )
        info["api_ping_ms"] = int((time.monotonic() - start) * 1000)
        info["state"] = "open"
        return info

    except Exception as e:
        msg = str(e)
        info["last_error"] = msg[:600]
        info["state"] = _decide_state_from_error(msg)
        return info

def render_binary_md(d: Dict[str, Any]) -> str:
    state = d["state"]
    if state == "open":
        head = "üü¢ *–ü–ª–∞—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å: –û–¢–ö–†–´–¢*"
    elif state == "closed":
        # —É—Ç–æ—á–Ω—è–µ–º –ø—Ä–∏—á–∏–Ω—É, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –≥–æ–≤–æ—Ä–∏—Ç –æ –∫–≤–æ—Ç–µ
        note = d.get("last_error", "").lower()
        if "insufficient_quota" in note or "billing_hard_limit_reached" in note:
            head = "üî¥ *–ü–ª–∞—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å: –ó–ê–ö–†–´–¢ (–±–∞–ª–∞–Ω—Å 0)*"
        else:
            head = "üî¥ *–ü–ª–∞—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å: –ó–ê–ö–†–´–¢*"
    else:
        head = "üü° *–ü–ª–∞—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å: –ù–ï –û–ü–†–ï–î–ï–õ–Å–ù*"

    lines = [
        head,
        f"‚Ä¢ –ú–æ–¥–µ–ª—å: `{d.get('model', '‚Äî')}`",
        f"‚Ä¢ –ü–∏–Ω–≥: {d.get('api_ping_ms', '‚Äî')} ms",
    ]
    if d.get("last_error") and d["last_error"] != "‚Äî":
        lines.append(f"‚Ä¢ –¢–µ—Ö–Ω. –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ: `{d['last_error']}`")
    lines.append(f"_{d.get('note','')}_")
    return "\n".join(lines)
