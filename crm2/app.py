# üìÑ crm2/app.py
# app
# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –≥–ª–∞–≤–Ω—ã–π –≤—Ö–æ–¥ –±–æ—Ç–∞ (aiogram v3).
# –ß—Ç–æ –¥–µ–ª–∞–µ—Ç:
# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (BOT_TOKEN, ADMIN_ID);
# –ø–æ–¥–∫–ª—é—á–∞–µ—Ç —Å–µ—Å—Å–∏—é Telegram API;
# —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å—Ç–∞—Ä—Ç–∞/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ (—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É);
# –≤–∫–ª—é—á–∞–µ—Ç –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–æ—É—Ç–µ—Ä—ã: consent, start, registration, auth, info, help, about, profile, attendance;
# –ø–æ–¥–∫–ª—é—á–∞–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å, DB Doctor –∏ ChatGPT-—Ä–æ—É—Ç–µ—Ä;
# –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ü–∏–∫–ª polling.
# –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ:
# crm2/
#  ‚îî‚îÄ‚îÄ app.py
# === –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫: crm2/app.py
# –°–ø–∏—Å–æ–∫ –≤–µ—Ä—Ö–Ω–µ—É—Ä–æ–≤–Ω–µ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ —Ñ–∞–π–ª–∞ (–∫–ª–∞—Å—Å—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏).
# –û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–∞–≤–∞ —Ñ—É–Ω–∫—Ü–∏–π/–∫–ª–∞—Å—Å–æ–≤.
# –ö–ª–∞—Å—Å—ã: ‚Äî
# –§—É–Ω–∫—Ü–∏–∏: try_include, main
# === –ö–æ–Ω–µ—Ü –∞–≤—Ç–æ–∑–∞–≥–æ–ª–æ–≤–∫–∞
# === –§–∞–π–ª: crm2/app.py
# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –±–æ—Ç–∞ (aiogram v3). –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è, –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤, –∑–∞–ø—É—Å–∫.
from __future__ import annotations

import asyncio
import importlib
import logging
import markdown
import os
from pathlib import Path
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.enums import ParseMode
from fastapi import FastAPI
from fastapi.responses import HTMLResponse

# –µ—Å–ª–∏ —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å FastAPI app, –∏—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ!
web_app = FastAPI()

@web_app.get("/info/meanings", response_class=HTMLResponse)
async def get_meanings():
    path = Path(__file__).parent / "content" / "info" / "meanings.md"
    if not path.exists():
        return "<h1>–§–∞–π–ª meanings.md –Ω–µ –Ω–∞–π–¥–µ–Ω</h1>"
    md_text = path.read_text(encoding="utf-8")
    html = markdown.markdown(md_text, extensions=["extra", "nl2br", "sane_lists"])
    return f"""
    <html>
      <head>
        <meta charset="utf-8">
        <title>–°–º—ã—Å–ª—ã –ø—Ä–æ–µ–∫—Ç–∞</title>
      </head>
      <body style="max-width:800px;margin:auto;font-family:sans-serif;line-height:1.6;">
        {html}
      </body>
    </html>
    """


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –õ–û–ì–ò ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
)
logging.getLogger("aiohttp.access").setLevel(logging.WARNING)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ö–û–ù–§–ò–ì ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
BOT_TOKEN = os.getenv("BOT_TOKEN") or os.getenv("TELEGRAM_TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN/TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω(—ã) –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏.")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –†–û–£–¢–ï–†–´ (—Ñ–∏–∫—Å) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –Ø–≤–Ω—ã–µ –º–æ–¥—É–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—á–Ω–æ –µ—Å—Ç—å
from crm2.handlers import consent
from crm2.handlers import start
from crm2.handlers import registration
from crm2.handlers import auth
from crm2.handlers import info
from crm2.handlers import help as help_router
from crm2.handlers import about as about_router
from crm2.handlers import profile as profile_router
from crm2.handlers import attendance as attendance_router
from crm2.handlers.admin import chatgpt as admin_chatgpt

# –ê–¥–º–∏–Ω: –ø–∞–Ω–µ–ª—å –∏ DB Doctor (–ø–æ–¥–∫–ª—é—á–∏–º —Ä–∞–Ω—å—à–µ –ø—Ä–æ—á–∏—Ö –∞–¥–º–∏–Ω-–º–æ–¥—É–ª–µ–π)
from crm2.handlers.admin import panel as admin_panel_router
from crm2.handlers import admin_db_doctor as admin_db_doctor_router

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏
from crm2.db.auto_migrate import ensure_schedule_schema


def try_include(dp: Dispatcher, module_path: str, attr: str = "router") -> None:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç —Ä–æ—É—Ç–µ—Ä –∏–∑ –º–æ–¥—É–ª—è, –µ—Å–ª–∏ –º–æ–¥—É–ª—å/–∞—Ç—Ä–∏–±—É—Ç –µ—Å—Ç—å.
    –ù—É–∂–µ–Ω, —á—Ç–æ–±—ã Pycharm –Ω–µ —Ä—É–≥–∞–ª—Å—è –∏ –∑–∞–ø—É—Å–∫ –Ω–µ –ø–∞–¥–∞–ª –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ñ–∞–π–ª–∞.
    """
    try:
        mod = importlib.import_module(module_path)
    except ModuleNotFoundError:
        logging.info(f"[ROUTER:skip] {module_path} (module not found)")
        return

    router = getattr(mod, attr, None)
    if router is None:
        logging.info(f"[ROUTER:skip] {module_path}.{attr} not found")
        return

    dp.include_router(router)
    logging.info(f"[ROUTER:ok] {module_path}.{attr} included")


async def main() -> None:
    logging.warning("[BUILD] starting application")

    # –ú–∏–≥—Ä–∞—Ü–∏–∏/—Å—Ö–µ–º—ã (—Å–∞–º–æ–ª–µ—á–∞—â–∏–µ—Å—è)
    try:
        ensure_schedule_schema()
        logging.info("[SCHEMA] ensured")
    except Exception as e:
        logging.error(f"[SCHEMA] ensure_schedule_schema failed: {e}")

    # –°–µ—Å—Å–∏—è TG API ‚Äî —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç (–≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ ClientTimeout+int)
    session = AiohttpSession(timeout=70)

    bot = Bot(
        token=BOT_TOKEN,
        session=session,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML),
    )
    dp = Dispatcher()

    # --- üîî —Å—Ç–∞—Ä—Ç/—Å—Ç–æ–ø-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ---
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ADMIN_ID (—Ç–≤–æ–∏ env —É–∂–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –µ–≥–æ).
    # –§–ª–∞–≥–∏ –º–æ–∂–Ω–æ –Ω–µ –∑–∞–¥–∞–≤–∞—Ç—å: –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã.
    ADMIN_ID = int(os.getenv("ADMIN_ID", "0") or 0)
    NOTIFY_STARTUP = os.getenv("NOTIFY_STARTUP", "1") == "1"
    NOTIFY_SHUTDOWN = os.getenv("NOTIFY_SHUTDOWN", "1") == "1"

    async def _on_startup(bot: Bot):
        if NOTIFY_STARTUP and ADMIN_ID:
            try:
                await bot.send_message(ADMIN_ID, "üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
            except Exception as e:
                print(f"[notify] startup failed: {e}")

    async def _on_shutdown(bot: Bot):
        if NOTIFY_SHUTDOWN and ADMIN_ID:
            try:
                await bot.send_message(ADMIN_ID, "‚õî –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            except Exception as e:
                print(f"[notify] shutdown failed: {e}")

    dp.startup.register(_on_startup)
    dp.shutdown.register(_on_shutdown)
    # --- /üîî ---

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –†–û–£–¢–ï–†–û–í ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    # 1) –£–∑–∫–∏–µ/—Å–∏—Å—Ç–µ–º–Ω—ã–µ
    dp.include_router(consent.router)
    dp.include_router(start.router)
    dp.include_router(registration.router)
    dp.include_router(auth.router)

    # 2) –ê–¥–º–∏–Ω: –ø–∞–Ω–µ–ª—å –∏ –°–†–ê–ó–£ DB Doctor (—á—Ç–æ–±—ã –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–ª —Å–≤–æ–∏ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–≤—ã–º)
    dp.include_router(admin_panel_router.router)
    dp.include_router(admin_db_doctor_router.router)

    # 3) –û—Å—Ç–∞–ª—å–Ω—ã–µ –∞–¥–º–∏–Ω-–ø–æ–¥—Å–µ–∫—Ü–∏–∏ (–º–æ–≥—É—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å ‚Äî –ø–æ–¥–∫–ª—é—á–∞–µ–º –º—è–≥–∫–æ)
    try_include(dp, "crm2.handlers.admin_users")  # –µ—Å–ª–∏ –µ—Å—Ç—å crm2/handlers/admin_users.py
    try_include(dp, "crm2.handlers.admin_schedule")  # –µ—Å–ª–∏ –µ—Å—Ç—å crm2/handlers/admin_schedule.py
    try_include(dp, "crm2.handlers.admin_logs")  # –µ—Å–ª–∏ –µ—Å—Ç—å crm2/handlers/admin_logs.py
    try_include(dp, "crm2.handlers.admin_broadcast")  # –µ—Å–ª–∏ –µ—Å—Ç—å crm2/handlers/admin_broadcast.py
    try_include(dp, "crm2.handlers.admin_db")  # –∫–æ–º–∞–Ω–¥—ã /db_* (–µ—Å–ª–∏ –º–æ–¥—É–ª—å –µ—Å—Ç—å)

    # 4) –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ä–∞–∑–¥–µ–ª—ã
    dp.include_router(info.router)
    dp.include_router(help_router.router)
    dp.include_router(about_router.router)
    dp.include_router(profile_router.router)
    dp.include_router(attendance_router.router)
    dp.include_router(admin_chatgpt.router)

    # –ï—Å–ª–∏ –≥–¥–µ-—Ç–æ –µ—Å—Ç—å –æ–±—â–∏–π —Ä–æ—É—Ç–µ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Ç–∏–ø–∞ crm2/handlers_schedule.py —Å router,
    # –º–æ–∂–Ω–æ –º—è–≥–∫–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∏ –µ–≥–æ:
    try_include(dp, "crm2.handlers_schedule")  # –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å attr "router"

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ó–ê–ü–£–°–ö ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    # if ADMIN_ID:
    #     try:
    #         await bot.send_message(int(ADMIN_ID), "üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    #     except Exception as e:
    #         logging.warning(f"ADMIN notify failed: {e}")

    try:
        await dp.start_polling(
            bot,
            polling_timeout=60,
            allowed_updates=None,
            drop_pending_updates=False,
        )
    except KeyboardInterrupt:
        logging.info("KeyboardInterrupt ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º‚Ä¶")
    finally:
        await bot.session.close()
        logging.info("–°–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞.")


if __name__ == "__main__":
    asyncio.run(main())
