from __future__ import annotations

import asyncio
import contextlib
import logging
import os
import pathlib
import sqlite3
from contextlib import suppress

# === –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫: crm2/app.py
# –°–ø–∏—Å–æ–∫ –≤–µ—Ä—Ö–Ω–µ—É—Ä–æ–≤–Ω–µ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ —Ñ–∞–π–ª–∞ (–∫–ª–∞—Å—Å—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏).
# –û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–∞–≤–∞ —Ñ—É–Ω–∫—Ü–∏–π/–∫–ª–∞—Å—Å–æ–≤.
# –ö–ª–∞—Å—Å—ã: ‚Äî
# –§—É–Ω–∫—Ü–∏–∏: _load_env, _try_include, _test_db, _runner, main, health, _on_startup, _on_shutdown
# === –ö–æ–Ω–µ—Ü –∞–≤—Ç–æ–∑–∞–≥–æ–ª–æ–≤–∫–∞
# crm2/app.py
# ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...

from dotenv import load_dotenv
from fastapi import FastAPI

from crm2.middlewares.callback_auth_middleware import CallbackAuthMiddleware


# ----------------- ENV -----------------
def _load_env():
    """
    –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:
    1) –ï—Å–ª–∏ –∑–∞–¥–∞–Ω ENV_FILE –∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –≥—Ä—É–∑–∏–º –µ–≥–æ.
    2) –ò–Ω–∞—á–µ –∏—â–µ–º —Ä—è–¥–æ–º —Å –∫–æ—Ä–Ω–µ–º –ø—Ä–æ–µ–∫—Ç–∞: .env.local -> .env -> .env.prod.
    """
    root = pathlib.Path(__file__).resolve().parent.parent
    env_file = os.getenv("ENV_FILE")
    if env_file and pathlib.Path(env_file).exists():
        load_dotenv(env_file, override=False)
        return
    for cand in (".env.local", ".env", ".env.prod"):
        p = root / cand
        if p.exists():
            load_dotenv(p, override=False)
            return


# –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–æ –∏–º–ø–æ—Ä—Ç–∞ –±–æ—Ç–∞
_load_env()

# –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø–µ—á–∞—Ç–∞–µ–º –ø–µ—Ä–≤—ã–µ —Å–∏–º–≤–æ–ª—ã —Ç–æ–∫–µ–Ω–∞
key = "TELEGRAM_TOKEN"
val = os.getenv(key)
if val:
    print(f"{key} = {val[:5]}*****")
else:
    print(f"{key} = <–Ω–µ –Ω–∞–π–¥–µ–Ω>")

from crm2.bot import bot, dp  # —Ç–µ–ø–µ—Ä—å –æ–∫—Ä—É–∂–µ–Ω–∏–µ —É–∂–µ –ø—Ä–æ–≥—Ä—É–∂–µ–Ω–æ
from crm2.middlewares.auth_middleware import AuthMiddleware

# ----------------- FASTAPI -----------------
app = FastAPI(title="crm2")


@app.get("/health")
async def health():
    return {"ok": True}


# ...–ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞ bot, dp –∏ –∑–∞–≥—Ä—É–∑–∫–∏ .env:
ADMIN_ID = os.getenv("ADMIN_ID")
try:
    ADMIN_ID = int(ADMIN_ID) if ADMIN_ID else None
except ValueError:
    ADMIN_ID = None
    logging.warning("ADMIN_ID –≤ .env –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π (–Ω–µ —á–∏—Å–ª–æ) ‚Äî –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –≤ Telegram –æ—Ç–∫–ª—é—á–µ–Ω–æ.")


# ----------------- ROUTERS -----------------
def _try_include(module_path: str, attr: str = "router"):
    """–ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Ä–æ—É—Ç–µ—Ä –º–æ–¥—É–ª—è, –ø–∏—à–µ–º –≤ –ª–æ–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    try:
        mod = __import__(module_path, fromlist=[attr])
        r = getattr(mod, attr)
        dp.include_router(r)
        logging.getLogger().info("[ROUTER:ok] %s.%s included", module_path, attr)
    except ModuleNotFoundError:
        logging.getLogger().info("[ROUTER:skip] %s (module not found)", module_path)
    except Exception as e:
        logging.getLogger().exception("[ROUTER:fail] %s: %s", module_path, e)


# –¥–æ–±–∞–≤—å –Ω–∏–∂–µ —Ñ—É–Ω–∫—Ü–∏–∏ _try_include(...) –≤–æ—Ç —ç—Ç–∏ –¥–≤–∞ –∫–æ–ª–ª–±–µ–∫–∞
async def _on_startup():
    if ADMIN_ID:
        with contextlib.suppress(Exception):
            await bot.send_message(ADMIN_ID, "üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")


async def _on_shutdown():
    if ADMIN_ID:
        with contextlib.suppress(Exception):
            await bot.send_message(ADMIN_ID, "‚õîÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


# ----------------- DB TEST -----------------
def _test_db():
    """–ü—Ä–æ–±—É–µ–º –æ—Ç–∫—Ä—ã—Ç—å crm.db –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å SELECT 1."""
    db_path = pathlib.Path(__file__).resolve().parent / "data" / "crm.db"
    if not db_path.exists():
        logging.warning(f"[DB] –§–∞–π–ª –±–∞–∑—ã {db_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    try:
        con = sqlite3.connect(db_path)
        cur = con.cursor()
        cur.execute("SELECT 1")
        res = cur.fetchone()
        logging.info(f"[DB] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, SELECT 1 -> {res}")
        con.close()
    except Exception as e:
        logging.exception(f"[DB] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏: {e}")


# ----------------- RUNNER -----------------
async def _runner():
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º
    _test_db()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware
    dp.message.middleware(AuthMiddleware())
    dp.callback_query.middleware(CallbackAuthMiddleware())

    # ---- –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã ----
    _try_include("crm2.handlers.start")
    _try_include("crm2.handlers.welcome")
    _try_include("crm2.handlers.auth")
    _try_include("crm2.handlers.registration")
    _try_include("crm2.handlers.consent")
    _try_include("crm2.handlers.main_menu")
    _try_include("crm2.handlers.guest_menu")
    _try_include("crm2.handlers.profile")
    _try_include("crm2.handlers.stream_selfset")

    # ---- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã ----
    _try_include("crm2.handlers.about")
    _try_include("crm2.handlers.help")
    _try_include("crm2.handlers.info")  # –≤–∫–ª—é—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ

    # ---- –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã ----
    _try_include("crm2.handlers.admin.panel")
    _try_include("crm2.handlers.admin.attendance")
    _try_include("crm2.handlers.admin.admin_homework")  # –ø–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è
    _try_include("crm2.handlers.admin.users")
    _try_include("crm2.handlers.admin.schedule")
    _try_include("crm2.handlers.admin.broadcast")
    _try_include("crm2.handlers.admin.chatgpt")
    _try_include("crm2.handlers.admin.logs")
    _try_include("crm2.handlers.admin.db")

    # ---- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ –º–æ–¥—É–ª–∏ ----
    _try_include("crm2.handlers.admin_db")
    _try_include("crm2.handlers.admin_db_doctor")
    _try_include("crm2.handlers.admin_users")

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º startup/shutdown
    dp.startup.register(_on_startup)
    dp.shutdown.register(_on_shutdown)

    logging.warning("[BUILD] starting application")

    try:
        logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        await dp.start_polling(bot)
    except Exception as e:
        logging.exception("‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: %s", e)
    finally:
        await bot.session.close()
        logging.info("‚õîÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


# ----------------- MAIN -----------------
def main():
    logging.basicConfig(level=os.getenv("LOG_LEVEL", "INFO"))
    with suppress(KeyboardInterrupt):
        asyncio.run(_runner())


if __name__ == "__main__":
    main()