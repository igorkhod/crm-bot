# === –§–∞–π–ª: crm2/app.py
# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –±–æ—Ç–∞ (aiogram v3). –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î, –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤, –∑–∞–ø—É—Å–∫ polling.

from __future__ import annotations

import hashlib
import inspect
import logging
import os
import sqlite3

from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message
from dotenv import load_dotenv

from crm2.db.auto_migrate import ensure_schedule_schema  # —Ç–æ–ª—å–∫–æ —Å—Ö–µ–º—ã, –±–µ–∑ –∏–º–ø–æ—Ä—Ç–∞
from crm2.db.migrate_admin import ensure_admin_schema
from crm2.db.sqlite import DB_PATH, ensure_schema
from crm2.handlers import about as about_router
from crm2.handlers import help as help_router
# –†–æ—É—Ç–µ—Ä—ã (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ)
from crm2.handlers import start, consent, registration, auth, info
from crm2.handlers import welcome as welcome_router
from crm2.handlers.admin.broadcast import router as admin_broadcast_router
from crm2.handlers.admin.logs import router as admin_logs_router
# –ê–¥–º–∏–Ω-–ø–æ–¥—Å–µ–∫—Ü–∏–∏
from crm2.handlers.admin.panel import router as admin_panel_router
from crm2.handlers.admin.schedule import router as admin_schedule_router
from crm2.handlers.admin.users import router as admin_users_router
# –û–±—â–∏–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±–ª–∏–∂–∞–π—à–∏—Ö –∑–∞–Ω—è—Ç–∏–π)
from crm2.handlers_schedule import router as schedule_router, send_schedule_keyboard, show_info_menu


# === –£—Ç–∏–ª–∏—Ç—ã ===============================================================

def _get_role_from_db(tg_id: int) -> str:
    """–ß–∏—Ç–∞–µ–º —Ä–æ–ª—å –∏–∑ –ë–î –∫–∞–∫ –µ—Å—Ç—å (–±–µ–∑ –∞–≤—Ç–æ–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏)."""
    with sqlite3.connect(DB_PATH) as conn:
        conn.row_factory = sqlite3.Row
        cur = conn.cursor()
        cur.execute("SELECT role FROM users WHERE telegram_id = ?", (tg_id,))
        row = cur.fetchone()
        return (row["role"] if row and row["role"] else "curious")


def _is_schedule_text(txt: str) -> bool:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º ¬´üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ¬ª, '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', 'schedule'."""
    if not txt:
        return False
    t = txt.replace("üìÖ", "").replace("üóì", "").strip().lower()
    return t in {"—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "schedule"}


# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è =================================

load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")

if not TELEGRAM_TOKEN:
    raise RuntimeError("TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ (.env)")

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
)
# –ø—Ä–∏–≥–ª—É—à–∞–µ–º ¬´–æ–±—ã—á–Ω—ã–π —Å–µ—Ç–µ–≤–æ–π —à—É–º¬ª
logging.getLogger("aiogram.client.session.aiohttp").setLevel(logging.WARNING)
logging.getLogger("aiohttp.client").setLevel(logging.WARNING)
logging.getLogger("aiohttp.helpers").setLevel(logging.WARNING)

# === –ë–æ—Ç/–¥–∏—Å–ø–µ—Ç—á–µ—Ä ==========================================================

# Dispatcher –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–∞ —É—Ä–æ–≤–Ω–µ –º–æ–¥—É–ª—è
dp = Dispatcher()

# === –†–æ—É—Ç–µ—Ä—ã ================================================================
dp.include_router(consent.router)
dp.include_router(welcome_router.router)  # –∞–≤—Ç–æ-–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã—Ö /start
dp.include_router(start.router)
dp.include_router(registration.router)
dp.include_router(auth.router)
dp.include_router(info.router)

# –æ–±—â–∏–π —Ä–æ—É—Ç–µ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–∫–æ–ª–ª–±—ç–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ –∏ —Ç.–ø.)
dp.include_router(schedule_router)

# –∞–¥–º–∏–Ω-–ø–æ–¥—Å–µ–∫—Ü–∏–∏
dp.include_router(admin_panel_router)
dp.include_router(admin_users_router)
dp.include_router(admin_schedule_router)
dp.include_router(admin_logs_router)
dp.include_router(admin_broadcast_router)
dp.include_router(help_router.router)
dp.include_router(about_router.router)


# === –•—ç–Ω–¥–ª–µ—Ä—ã –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è (–∫–Ω–æ–ø–∫–∏/–∫–æ–º–∞–Ω–¥—ã) =============================

# –ö–Ω–æ–ø–∫–∞ ¬´üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ¬ª / —Ç–µ–∫—Å—Ç ¬´–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ¬ª
@dp.message(F.text.func(_is_schedule_text))
async def open_schedule_by_text(message: Message):
    await show_info_menu(message)


# –ö–æ–º–∞–Ω–¥–∞ /schedule
@dp.message(Command("schedule"))
async def open_schedule_by_cmd(message: Message):
    await show_info_menu(message)


# –ö–∞–±–∏–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è + –ø–æ–∫–∞–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
@dp.message(F.text.in_({"/home", "–ú–æ–π –∫–∞–±–∏–Ω–µ—Ç"}))
async def cmd_home(message: Message):
    role = _get_role_from_db(message.from_user.id)
    if role in (None, "", "curious"):
        from crm2.keyboards import guest_start_kb
        await message.answer(
            "–í—ã –µ—â—ë –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –í–æ–π–¥–∏—Ç–µ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å:",
            reply_markup=guest_start_kb(),
        )
    else:
        from crm2.keyboards import role_kb
        await message.answer(f"–í–∞—à –∫–∞–±–∏–Ω–µ—Ç. –†–æ–ª—å: {role}", reply_markup=role_kb(role))

    await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–∞—Ç—ã –∑–∞–Ω—è—Ç–∏—è, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Ç–µ–º—É –∑–∞–Ω—è—Ç–∏—è –∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.")
    await send_schedule_keyboard(message, limit=5, tg_id=message.from_user.id)


# === –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ===========================================================

async def main() -> None:
    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–±–æ—Ä–∫–∏
    try:
        import crm2.handlers_schedule as hs
        hs_path = inspect.getfile(hs)
        with open(hs_path, "rb") as f:
            hs_sha = hashlib.sha1(f.read()).hexdigest()[:10]
    except Exception:
        hs_path = "<unknown>"
        hs_sha = "<na>"

    logging.warning("[BUILD] COMMIT=%s  BRANCH=%s",
                    os.getenv("RENDER_GIT_COMMIT", "<local>"),
                    os.getenv("RENDER_GIT_BRANCH", "<local>"))
    logging.warning("[DIAG] handlers_schedule=%s sha=%s", hs_path, hs_sha)

    # –°—Ö–µ–º—ã –ë–î (users/admin/schedule)
    ensure_schema()
    ensure_admin_schema()
    ensure_schedule_schema()

    # –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é)
    if os.getenv("CRM_SYNC_SCHEDULE_ON_START") == "1":
        from crm2.db.schedule_loader import sync_schedule_from_files
        files = ["schedule_2025_1_cohort.xlsx", "schedule_2025_2_cohort.xlsx"]
        try:
            affected = sync_schedule_from_files(files)
            logging.info("[SCHEDULE IMPORT] on start: affected rows=%s", affected)
        except Exception as e:
            logging.exception("Schedule import on start failed: %s", e)

    # --- —Å–æ–∑–¥–∞—ë–º HTTP-—Å–µ—Å—Å–∏—é –∏ –±–æ—Ç–∞ –ü–û–î –∂–∏–≤—ã–º event-loop‚Äô–æ–º ---
    # –í–ê–ñ–ù–û: –¥–ª—è aiogram v3 timeout –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º (—Å–µ–∫—É–Ω–¥—ã), –Ω–µ ClientTimeout
    session = AiohttpSession(timeout=70)  # —á–∏—Ç–∞–µ–º —á—É—Ç—å –¥–æ–ª—å—à–µ, —á–µ–º polling_timeout

    bot = Bot(
        TELEGRAM_TOKEN,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML),
        session=session,
    )

    # –°—Ç–∞—Ä—Ç –±–æ—Ç–∞
    if ADMIN_ID:
        try:
            await bot.send_message(int(ADMIN_ID), "üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ: {e}")

    try:
        await dp.start_polling(
            bot,
            polling_timeout=60,  # —Å–∏–Ω—Ö—Ä–æ–Ω —Å session.timeout (70)
            allowed_updates=None,
            drop_pending_updates=False,
        )
    except KeyboardInterrupt:
        logging.info("KeyboardInterrupt ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º...")
    finally:
        if ADMIN_ID:
            try:
                await bot.send_message(int(ADMIN_ID), "‚õî –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")
        await bot.session.close()
        logging.info("–°–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞.")
