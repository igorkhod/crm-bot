#
# === –§–∞–π–ª: crm2/app.py
# –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è: –º–æ–¥—É–ª—å CRM, Telegram-–±–æ—Ç –Ω–∞ aiogram 3.x, –¥–æ—Å—Ç—É–ø –∫ SQLite/ORM, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ .env. –í–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏: _get_role_from_db, cmd_start, cmd_home, main.
# –î–æ–±–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ 2025-08-21 05:43:17

from __future__ import annotations  # ‚Üê –î–û–õ–ñ–ù–û –±—ã—Ç—å –ø–µ—Ä–≤—ã–º (–ø–æ—Å–ª–µ –¥–æ–∫—Å—Ç—Ä–∏–Ω–≥–∞/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤)

import logging
import os
import sqlite3  # ‚Üê –¥–æ–±–∞–≤–∏–ª–∏

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from dotenv import load_dotenv

from crm2.db.sqlite import DB_PATH  # ‚Üê –¥–æ–±–∞–≤–∏–ª–∏
from crm2.db.sqlite import ensure_schema
from crm2.handlers import auth  # <‚Äî –Ω–æ–≤–æ–µ
from crm2.handlers import registration
from crm2.keyboards import guest_start_kb, role_kb
from crm2.routers import start
from crm2.handlers import info  # ‚Üê –∏–º–ø–æ—Ä—Ç
from crm2.handlers_schedule import router as schedule_router, send_schedule_keyboard
# from crm2.config import TELEGRAM_TOKEN
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from crm2.handlers import start, consent
from aiogram.fsm.context import FSMContext



def _get_role_from_db(tg_id: int) -> str:
    """–ë–µ–∑ –∞–≤—Ç–æ–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: —á–∏—Ç–∞–µ–º —Ä–æ–ª—å –∏–∑ –ë–î –∫–∞–∫ –µ—Å—Ç—å."""
    with sqlite3.connect(DB_PATH) as conn:
        conn.row_factory = sqlite3.Row
        cur = conn.cursor()
        cur.execute("SELECT role FROM users WHERE telegram_id = ?", (tg_id,))
        row = cur.fetchone()
        return (row["role"] if row and row["role"] else "curious")


def _has_consent(tg_id: int) -> bool:
    with sqlite3.connect(DB_PATH) as conn:
        row = conn.execute(
            "SELECT given FROM consents WHERE telegram_id=?", (tg_id,)
        ).fetchone()
        return bool(row and row[0])

def _set_consent(tg_id: int, given: bool = True) -> None:
    with sqlite3.connect(DB_PATH) as conn:
        conn.execute(
            """
            INSERT INTO consents (telegram_id, given)
            VALUES (?, ?)
            ON CONFLICT(telegram_id) DO UPDATE SET given=excluded.given, ts=CURRENT_TIMESTAMP
            """,
            (tg_id, 1 if given else 0),
        )
        conn.commit()

def _consent_text() -> str:
    return (
        "–ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ email –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã –¥–∞—ë—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ "
        "–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö https://krasnpsytech.ru/ZQFHN32\n"
        "–ù–∞–∂–∏–º–∞—è –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–°–æ–≥–ª–∞—à–∞—é—Å—å¬ª, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ "
        "—Å–æ–æ–±—â–µ–Ω–∏—è. –û—Ç–∫–∞–∑–∞—Ç—å—Å—è –º–æ–∂–Ω–æ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç üëå"
    )

def _consent_kb():
    from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–°–æ–≥–ª–∞—à–∞—é—Å—å")],
            [KeyboardButton(text="üìñ –û –ø—Ä–æ–µ–∫—Ç–µ")],
        ],
        resize_keyboard=True,
    )


load_dotenv()

ensure_schema()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s"
)

bot = Bot(
    TELEGRAM_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML),
)

dp = Dispatcher()

dp.include_router(consent.router)
dp.include_router(start.router)
dp.include_router(registration.router)
dp.include_router(auth.router)  # <‚Äî –Ω–æ–≤–æ–µ
dp.include_router(info.router)  # ‚Üê –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
dp.include_router(schedule_router)


@dp.message(F.text == "/start")
async def cmd_start(message: Message, state: FSMContext):
    # –û–±–Ω—É–ª—è–µ–º –≤—Å–µ ¬´—Å–ª–µ–¥—ã¬ª –ø—Ä–æ—à–ª—ã—Ö —Å–µ—Å—Å–∏–π
    await state.clear()

    # –ù–∏–∫–æ–≥–æ –Ω–µ ¬´—É–∑–Ω–∞—ë–º¬ª: –¥–æ –≤—Ö–æ–¥–∞ –≤—Å–µ ‚Äî –≥–æ—Å—Ç–∏
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CRM2!\n–í—ã –≥–æ—Å—Ç—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=guest_start_kb(),  # –∏–∑ —Ç–≤–æ–µ–≥–æ keyboards.py (3 –∫–Ω–æ–ø–∫–∏)
    )


# –±—ã–ª–æ: –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ ¬´–°–ø–∞—Å–∏–±–æ!‚Ä¶¬ª
# @dp.message(F.text == "–°–æ–≥–ª–∞—à–∞—é—Å—å")
# async def agree(message: Message, state: FSMContext):
#     _set_consent(message.from_user.id, True)
#     # –∏–∑–±–µ–≥–∞–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞: –±–µ—Ä—ë–º –∫–ª–∞—Å—Å FSM –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏
#     from crm2.handlers.registration import RegistrationFSM
#     from aiogram.types import ReplyKeyboardRemove
#
#     # —Å—Ä–∞–∑—É –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
#     await state.set_state(RegistrationFSM.full_name)
#     await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:", reply_markup=ReplyKeyboardRemove())


# @dp.message(F.text == "–°–æ–≥–ª–∞—à–∞—é—Å—å")
# async def agree(message: Message):
#     _set_consent(message.from_user.id, True)
#     await message.answer("app.py –°–ø–∞—Å–∏–±–æ! –î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç. –ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")


@dp.message(F.text.in_({"/home", "–ú–æ–π –∫–∞–±–∏–Ω–µ—Ç"}))
async def cmd_home(message: Message):
    role = _get_role_from_db(message.from_user.id)  # —Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ
    if role in (None, "", "curious"):
        await message.answer(
            "–í—ã –µ—â—ë –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –í–æ–π–¥–∏—Ç–µ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å:",
            reply_markup=guest_start_kb(),
        )
    else:
        await message.answer(
            f"–í–∞—à –∫–∞–±–∏–Ω–µ—Ç. –†–æ–ª—å: {role}",
            reply_markup=role_kb(role),
        )
    # –¥–æ–±–∞–≤–∏—Ç—å –Ω–∏–∂–µ:
    from crm2.handlers_schedule import send_schedule_keyboard
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–∞—Ç—ã –∑–∞–Ω—è—Ç–∏—è, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Ç–µ–º—É –∑–∞–Ω—è—Ç–∏—è –∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.")
    await send_schedule_keyboard(message, limit=5, tg_id=message.from_user.id)


async def main() -> None:
    # –º—è–≥–∫–∏–π –∑–∞–ø—É—Å–∫: —Å–æ–æ–±—â–∞–µ–º –∞–¥–º–∏–Ω—É (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
    #  —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –ª–æ–≥–≥–∏–Ω–≥
    import os, logging, hashlib, inspect

    try:
        import crm2.handlers_schedule as hs
        hs_path = inspect.getfile(hs)
        with open(hs_path, "rb") as f:
            hs_sha = hashlib.sha1(f.read()).hexdigest()[:10]
    except Exception:
        hs_path = "<unknown>"
        hs_sha = "<na>"

    logging.warning("[BUILD] COMMIT=%s  BRANCH=%s",
                    os.getenv("RENDER_GIT_COMMIT", "<local>"),
                    os.getenv("RENDER_GIT_BRANCH", "<local>"))
    logging.warning("[DIAG] handlers_schedule=%s sha=%s", hs_path, hs_sha)

    # === –∫–æ–Ω–µ—Ü —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –ª–æ–≥–≥–∏–Ω–≥–∞

    if ADMIN_ID:
        try:
            await bot.send_message(int(ADMIN_ID), "üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –≤ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ: {e}")

    try:
        # –ø—Ä–æ—Å—Ç–æ —Å—Ç–∞—Ä—Ç—É–µ–º –ø–æ–ª–ª–∏–Ω–≥; –Ω–∞ Windows –±–µ–∑ —Å–∏–≥–Ω–∞–ª–æ–≤
        from crm2.db.auto_migrate import ensure_schedule_schema
        ensure_schedule_schema()  # —Å–æ–∑–¥–∞—Å—Ç —Ç–∞–±–ª–∏—Ü—ã –∏ –ø–æ—Å–µ–µ—Ç, –µ—Å–ª–∏ –ø—É—Å—Ç–æ
        from crm2.db.auto_migrate import ensure_schedule_schema, apply_topic_overrides

        ensure_schedule_schema()

        apply_topic_overrides({
            "–ü–¢–ì-2": {
                "title": "–ü–¢–ì –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç–æ–¥–∞ —Ä–∞–±–æ—Ç—ã —Å 4—Ö-–º–µ—Ä–Ω—ã–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ–º",
                "annotation": "–ò–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω—ã–µ –º–∞—Ç—Ä–∏—Ü—ã –¥–ª—è –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π –∂–∏–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —á–µ–ª–æ–≤–µ–∫ –∑–∞ –≤—Å–µ –≤–æ–ø–ª–æ—â–µ–Ω–∏—è; –†–∞–±–æ—Ç–∞ —Å –†–æ–¥–æ–º; –¶–µ–Ω—Ç—Ä—ã —Å–æ–∑–Ω–∞–Ω–∏—è; –≠–Ω–¥–æ–∫—Ä–∏–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–≤–∞–Ω—Ç–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è; –£—Ä–æ–≤–Ω–∏ –∏—Å–∫–∞–∂–µ–Ω–∏—è —Å—Ö–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏—è; –ú–∞—Ç—Ä–∏—Ü—ã –î–ï–õ–ê; –≥–∞—Ä–º–æ–Ω–∑–∞—Ü–∏—è –¥—É—à–∏; –≥–∞—Ä–º–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ–∑–Ω–∞–Ω–∏—è; –≥–∞—Ä–º–æ–Ω–∏–∑–∞—Ü–∏—è –¥—É—Ö–∞; –ê—Å–ø–µ–∫—Ç —Ç—Ä–æ–∏—á–Ω–æ—Å—Ç–∏; –ö—É–Ω–¥–∞–ª–∏–Ω–∏; –í—Ä–µ–º—è; –ú–æ–∑–≥;"
            }
        })

        from crm2.db.auto_migrate import ensure_schedule_schema
        from crm2.db.schedule_loader import sync_schedule_from_files

        ensure_schedule_schema()
        sync_schedule_from_files([
            "schedule_2025_1_cohort.xlsx",
            "schedule_2025_2_cohort.xlsx",
        ])


        await dp.start_polling(bot)
    except KeyboardInterrupt:
        logging.info("–ü–æ–ª—É—á–µ–Ω KeyboardInterrupt ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º...")
    finally:
        # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –ª—é–±–æ–º –∏—Å—Ö–æ–¥–µ
        if ADMIN_ID:
            try:
                await bot.send_message(int(ADMIN_ID), "‚õî –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")
        await bot.session.close()
        logging.info("–°–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞.")