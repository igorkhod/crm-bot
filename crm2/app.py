from __future__ import annotations  # ‚Üê –î–û–õ–ñ–ù–û –±—ã—Ç—å –ø–µ—Ä–≤—ã–º (–ø–æ—Å–ª–µ –¥–æ–∫—Å—Ç—Ä–∏–Ω–≥–∞/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤)

import logging
import os
import sqlite3  # ‚Üê –¥–æ–±–∞–≤–∏–ª–∏

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from dotenv import load_dotenv

from crm2.db.sqlite import DB_PATH  # ‚Üê –¥–æ–±–∞–≤–∏–ª–∏
from crm2.db.sqlite import ensure_schema
from crm2.handlers import auth  # <‚Äî –Ω–æ–≤–æ–µ
from crm2.handlers import registration
from crm2.keyboards import guest_start_kb, role_kb
from crm2.routers import start
from crm2.handlers import info  # ‚Üê –∏–º–ø–æ—Ä—Ç


def _get_role_from_db(tg_id: int) -> str:
    """–ë–µ–∑ –∞–≤—Ç–æ–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: —á–∏—Ç–∞–µ–º —Ä–æ–ª—å –∏–∑ –ë–î –∫–∞–∫ –µ—Å—Ç—å."""
    with sqlite3.connect(DB_PATH) as conn:
        conn.row_factory = sqlite3.Row
        cur = conn.cursor()
        cur.execute("SELECT role FROM users WHERE telegram_id = ?", (tg_id,))
        row = cur.fetchone()
        return (row["role"] if row and row["role"] else "curious")


load_dotenv()

ensure_schema()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s"
)

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

dp.include_router(start.router)
dp.include_router(registration.router)
dp.include_router(auth.router)  # <‚Äî –Ω–æ–≤–æ–µ
dp.include_router(info.router)  # ‚Üê –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ


@dp.message(F.text == "/start")
async def cmd_start(message: Message):
    # –ù–ò–ß–ï–ì–û –ù–ï –ß–ò–¢–ê–ï–ú –ò –ù–ï –ü–ò–®–ï–ú –í –ë–î!
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CRM2!\n–í—ã –≥–æ—Å—Ç—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=guest_start_kb(),
    )


@dp.message(F.text.in_({"/home", "–ú–æ–π –∫–∞–±–∏–Ω–µ—Ç"}))
async def cmd_home(message: Message):
    role = _get_role_from_db(message.from_user.id)  # —Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ
    if role in (None, "", "curious"):
        await message.answer(
            "–í—ã –µ—â—ë –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –í–æ–π–¥–∏—Ç–µ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å:",
            reply_markup=guest_start_kb(),
        )
    else:
        await message.answer(
            f"–í–∞—à –∫–∞–±–∏–Ω–µ—Ç. –†–æ–ª—å: {role}",
            reply_markup=role_kb(role),
        )



async def main() -> None:
    # –º—è–≥–∫–∏–π –∑–∞–ø—É—Å–∫: —Å–æ–æ–±—â–∞–µ–º –∞–¥–º–∏–Ω—É (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
    if ADMIN_ID:
        try:
            await bot.send_message(int(ADMIN_ID), "üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ: {e}")

    try:
        # –ø—Ä–æ—Å—Ç–æ —Å—Ç–∞—Ä—Ç—É–µ–º –ø–æ–ª–ª–∏–Ω–≥; –Ω–∞ Windows –±–µ–∑ —Å–∏–≥–Ω–∞–ª–æ–≤
        await dp.start_polling(bot)
    except KeyboardInterrupt:
        logging.info("–ü–æ–ª—É—á–µ–Ω KeyboardInterrupt ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º...")
    finally:
        # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –ª—é–±–æ–º –∏—Å—Ö–æ–¥–µ
        if ADMIN_ID:
            try:
                await bot.send_message(int(ADMIN_ID), "‚õî –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")
        await bot.session.close()
        logging.info("–°–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞.")
