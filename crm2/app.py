# === –§–∞–π–ª: crm2/app.py
# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –±–æ—Ç–∞ (aiogram v3). –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î, –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤, –∑–∞–ø—É—Å–∫ polling.

from __future__ import annotations

import logging
import os
import sqlite3

from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from dotenv import load_dotenv

from crm2.db.sqlite import DB_PATH, ensure_schema
from crm2.db.migrate_admin import ensure_admin_schema
from crm2.db.auto_migrate import ensure_schedule_schema
from crm2.db.schedule_loader import sync_schedule_from_files

# –†–æ—É—Ç–µ—Ä—ã (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ)
from crm2.handlers import start, consent, registration, auth, info

# –û–±—â–∏–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±–ª–∏–∂–∞–π—à–∏—Ö –∑–∞–Ω—è—Ç–∏–π)
from crm2.handlers_schedule import router as schedule_router, send_schedule_keyboard

# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
from crm2.handlers.admin.panel import router as admin_panel_router
from crm2.handlers.admin.users import router as admin_users_router
from crm2.handlers.admin.schedule import router as admin_schedule_router
from crm2.handlers.admin.logs import router as admin_logs_router
from crm2.handlers.admin.broadcast import router as admin_broadcast_router


# === –£—Ç–∏–ª–∏—Ç—ã ===============================================================

def _get_role_from_db(tg_id: int) -> str:
    """–ß–∏—Ç–∞–µ–º —Ä–æ–ª—å –∏–∑ –ë–î –∫–∞–∫ –µ—Å—Ç—å (–±–µ–∑ –∞–≤—Ç–æ–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏)."""
    with sqlite3.connect(DB_PATH) as conn:
        conn.row_factory = sqlite3.Row
        cur = conn.cursor()
        cur.execute("SELECT role FROM users WHERE telegram_id = ?", (tg_id,))
        row = cur.fetchone()
        return (row["role"] if row and row["role"] else "curious")


def _is_schedule_text(txt: str) -> bool:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º ¬´üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ¬ª, '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', 'schedule'."""
    if not txt:
        return False
    t = txt.replace("üìÖ", "").replace("üóì", "").strip().lower()
    return t in {"—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "schedule"}


# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è =================================

load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")

if not TELEGRAM_TOKEN:
    raise RuntimeError("TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ (.env)")

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
)

# === –ë–æ—Ç/–¥–∏—Å–ø–µ—Ç—á–µ—Ä ==========================================================

bot = Bot(TELEGRAM_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# === –†–æ—É—Ç–µ—Ä—ã ================================================================

dp.include_router(consent.router)
dp.include_router(start.router)
dp.include_router(registration.router)
dp.include_router(auth.router)
dp.include_router(info.router)

# –æ–±—â–∏–π —Ä–æ—É—Ç–µ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–∫–æ–ª–ª–±—ç–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ –∏ —Ç.–ø.)
dp.include_router(schedule_router)

# –∞–¥–º–∏–Ω-–ø–æ–¥—Å–µ–∫—Ü–∏–∏
dp.include_router(admin_panel_router)
dp.include_router(admin_users_router)
dp.include_router(admin_schedule_router)
dp.include_router(admin_logs_router)
dp.include_router(admin_broadcast_router)


# === –•—ç–Ω–¥–ª–µ—Ä—ã –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è (–∫–Ω–æ–ø–∫–∏/–∫–æ–º–∞–Ω–¥—ã) =============================

# –ö–Ω–æ–ø–∫–∞ ¬´üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ¬ª / —Ç–µ–∫—Å—Ç ¬´–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ¬ª
@dp.message(F.text.func(_is_schedule_text))
async def open_schedule_by_text(message: Message):
    await send_schedule_keyboard(message, limit=5, tg_id=message.from_user.id)

# –ö–æ–º–∞–Ω–¥–∞ /schedule –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
@dp.message(Command("schedule"))
async def open_schedule_by_cmd(message: Message):
    await send_schedule_keyboard(message, limit=5, tg_id=message.from_user.id)

# –ö–∞–±–∏–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è + –ø–æ–∫–∞–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
@dp.message(F.text.in_({"/home", "–ú–æ–π –∫–∞–±–∏–Ω–µ—Ç"}))
async def cmd_home(message: Message):
    role = _get_role_from_db(message.from_user.id)
    if role in (None, "", "curious"):
        from crm2.keyboards import guest_start_kb
        await message.answer(
            "–í—ã –µ—â—ë –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –í–æ–π–¥–∏—Ç–µ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å:",
            reply_markup=guest_start_kb(),
        )
    else:
        from crm2.keyboards import role_kb
        await message.answer(f"–í–∞—à –∫–∞–±–∏–Ω–µ—Ç. –†–æ–ª—å: {role}", reply_markup=role_kb(role))

    await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–∞—Ç—ã –∑–∞–Ω—è—Ç–∏—è, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Ç–µ–º—É –∑–∞–Ω—è—Ç–∏—è –∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.")
    await send_schedule_keyboard(message, limit=5, tg_id=message.from_user.id)


# === –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ===========================================================

async def main() -> None:
    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–±–æ—Ä–∫–∏
    import hashlib, inspect
    try:
        import crm2.handlers_schedule as hs
        hs_path = inspect.getfile(hs)
        with open(hs_path, "rb") as f:
            hs_sha = hashlib.sha1(f.read()).hexdigest()[:10]
    except Exception:
        hs_path = "<unknown>"
        hs_sha = "<na>"

    logging.warning("[BUILD] COMMIT=%s  BRANCH=%s",
                    os.getenv("RENDER_GIT_COMMIT", "<local>"),
                    os.getenv("RENDER_GIT_BRANCH", "<local>"))
    logging.warning("[DIAG] handlers_schedule=%s sha=%s", hs_path, hs_sha)

    # –°—Ö–µ–º—ã –ë–î
    ensure_schema()           # users/consents
    ensure_admin_schema()     # admin-—Ç–∞–±–ª–∏—Ü—ã
    ensure_schedule_schema()  # topics/session_days/events/healings

    # –ò–º–ø–æ—Ä—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–∑ XLSX (–ª–µ–∂–∞—Ç –≤ –∫–æ—Ä–Ω–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –Ω–∞ Render)
    sync_schedule_from_files([
        "schedule_2025_1_cohort.xlsx",
        "schedule_2025_2_cohort.xlsx",
    ])

    # –°—Ç–∞—Ä—Ç –±–æ—Ç–∞
    if ADMIN_ID:
        try:
            await bot.send_message(int(ADMIN_ID), "üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ: {e}")

    try:
        await dp.start_polling(bot)
    except KeyboardInterrupt:
        logging.info("KeyboardInterrupt ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º...")
    finally:
        if ADMIN_ID:
            try:
                await bot.send_message(int(ADMIN_ID), "‚õî –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")
        await bot.session.close()
        logging.info("–°–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞.")
