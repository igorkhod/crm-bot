# crm2/handlers/admin_attendance.py
from __future__ import annotations

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from crm2.bot import bot     # ‚úÖ –±–µ—Ä—ë–º –±–æ—Ç–∞ –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –º–æ–¥—É–ª—è
from crm2.db import db
from crm2.services import attendance

router = Router()

# ---------------- –ú–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞: –ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å ----------------

async def show_attendance_menu(message: Message):
    rows = await db.fetch_all(
        "SELECT id, date, topic_code, stream_id FROM session_days ORDER BY date DESC LIMIT 20"
    )
    if not rows:
        await message.answer("–ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π –≤ –±–∞–∑–µ.")
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=f"{r[1]} ‚Ä¢ {r[2] or '-'} ‚Ä¢ Stream:{r[3]}",
            callback_data=f"att_sess:{r[0]}")]
        for r in rows
    ])
    await message.answer("üìã –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–Ω—è—Ç–∏–µ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏:", reply_markup=kb)


@router.callback_query(F.data.startswith("att_sess:"))
async def open_attendance_for_session(cb: CallbackQuery):
    session_id = int(cb.data.split(":")[1])

    users = await db.fetch_all("""
        SELECT u.id, COALESCE(u.full_name, u.nickname, u.username, u.phone, CAST(u.id AS TEXT)) AS label
        FROM users u
        WHERE u.role='user'
        ORDER BY label
    """)

    if not users:
        await cb.message.edit_text("–ö—É—Ä—Å–∞–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        await cb.answer()
        return

    kb_rows = []
    for uid, label in users:
        kb_rows.append([
            InlineKeyboardButton(text=f"‚úÖ {label}", callback_data=f"att:{uid}:{session_id}:present"),
            InlineKeyboardButton(text="‚ùå", callback_data=f"att:{uid}:{session_id}:absent"),
        ])

    await cb.message.edit_text(
        f"–ó–∞–Ω—è—Ç–∏–µ SID={session_id} ‚Äî –æ—Ç–º–µ—Ç—å—Ç–µ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=kb_rows),
    )
    await cb.answer()


@router.callback_query(F.data.startswith("att:"))
async def mark_attendance_action(cb: CallbackQuery):
    _, uid, session_id, status = cb.data.split(":")
    await attendance.mark_attendance(int(uid), int(session_id), status, cb.from_user.id)
    await cb.answer(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {status}")

# ---------------- –ú–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞: –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è ----------------

async def show_homework_menu(message: Message):
    rows = await db.fetch_all(
        "SELECT id, date, topic_code, stream_id FROM session_days ORDER BY date DESC LIMIT 20"
    )
    if not rows:
        await message.answer("–ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π –≤ –±–∞–∑–µ.")
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=f"{r[1]} ‚Ä¢ {r[2] or '-'} ‚Ä¢ Stream:{r[3]}",
            callback_data=f"hw_sess:{r[0]}")]
        for r in rows
    ])
    await message.answer("üìö –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–Ω—è—Ç–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –î–ó:", reply_markup=kb)


@router.callback_query(F.data.startswith("hw_sess:"))
async def request_homework_link(cb: CallbackQuery):
    session_id = int(cb.data.split(":")[1])
    await cb.message.edit_text(
        f"–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –î–ó –¥–ª—è –∑–∞–Ω—è—Ç–∏—è SID={session_id}:\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        f"/homework_send {session_id} <—Å—Å—ã–ª–∫–∞_–Ω–∞_–Ø–Ω–¥–µ–∫—Å–î–∏—Å–∫>"
    )
    await cb.answer()


@router.message(F.text.startswith("/homework_send"))
async def send_homework(message: Message):
    parts = message.text.split(maxsplit=2)
    if len(parts) < 3:
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /homework_send <session_id> <—Å—Å—ã–ª–∫–∞>")
        return

    session_id = int(parts[1])
    link = parts[2]

    await attendance.ensure_homework_delivery_table()

    # —Ç–æ–ª—å–∫–æ —Ç–µ–º, –∫—Ç–æ –±—ã–ª present –∏ –µ—â—ë –Ω–µ –ø–æ–ª—É—á–∞–ª –º–∞—Ç–µ—Ä–∏–∞–ª—ã
    user_ids = await attendance.get_not_yet_delivered(session_id)
    if not user_ids:
        await message.answer("üëå –í—Å–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–≤—à–∏–µ —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã.")
        return

    ok = fail = 0
    for uid in user_ids:
        try:
            # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏ message.bot, –Ω–æ –∑–¥–µ—Å—å —É –Ω–∞—Å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≥–ª–æ–±–∞–ª—å–Ω—ã–π bot.
            await bot.send_message(uid, f"üìö –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ –∑–∞–Ω—è—Ç–∏—é {session_id}:\n{link}")
            await attendance.mark_homework_delivered(session_id, uid, link)
            ok += 1
        except Exception as e:
            fail += 1
            await message.answer(f"‚ö†Ô∏è {uid}: {e}")

    await message.answer(f"üì§ –î–ó –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {ok}; –æ—à–∏–±–æ–∫: {fail}")
