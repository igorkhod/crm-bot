#
# === –§–∞–π–ª: crm2/handlers/info.py
# –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è: –º–æ–¥—É–ª—å CRM, —Ö–µ–Ω–¥–ª–µ—Ä—ã –∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π Telegram, Telegram-–±–æ—Ç –Ω–∞ aiogram 3.x. –í–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏: _get, _code, _fmt_date, _build_details_kb, show_schedule....
# –î–æ–±–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ 2025-08-21 05:43:17

# crm2/handlers/info.py
from __future__ import annotations

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from crm2.keyboards import role_kb
from crm2.services.schedule import upcoming  # —ç–ª–µ–º–µ–Ω—Ç—ã –∏–º–µ—é—Ç –ø–æ–ª—è start/end –∏, –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏, topic_code/title/annotation

router = Router(name="info")


def _get(obj, key):
    """–î–æ—Å—Ç–∞—ë—Ç –ø–æ–ª–µ –∏ —É –æ–±—ä–µ–∫—Ç–∞, –∏ —É dict."""
    try:
        return getattr(obj, key)
    except AttributeError:
        pass
    if isinstance(obj, dict):
        return obj.get(key)
    return None


def _code(it) -> str:
    """–ë–µ—Ä—ë–º –∏–Ω–¥–µ–∫—Å –∑–∞–Ω—è—Ç–∏—è –ø–æ –ª—é–±–æ–º—É –∏–∑ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∏–º—ë–Ω –ø–æ–ª—è."""
    for k in ("topic_code", "code", "topic", "index"):
        v = _get(it, k)
        if v:
            return str(v)
    return ""


def _fmt_date(d) -> str:
    return d.strftime("%d.%m.%Y")


def _build_details_kb(items) -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∏-—Å—Ç—Ä–æ–∫–∏: –î–ê–¢–´ + –∏–Ω–¥–µ–∫—Å –∫—É—Ä—Å–∞."""
    rows = []
    for it in items:
        start = _get(it, "start")
        end = _get(it, "end") or start
        if not start:
            continue
        code = _code(it)
        text = f"{_fmt_date(start)} ‚Äî {_fmt_date(end)}" + (f" ‚Ä¢ {code}" if code else "")
        cb = f"sess:{start.strftime('%Y%m%d')}"
        rows.append([InlineKeyboardButton(text=text, callback_data=cb)])
    return InlineKeyboardMarkup(inline_keyboard=rows)


@router.message(F.text == "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def show_schedule(message: Message):
    """–°–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç–∏–π: –¥–∞—Ç—ã + –∏–Ω–¥–µ–∫—Å –≤ —Å–∫–æ–±–∫–∞—Ö; –∫–Ω–æ–ø–∫–∏ ‚Äî –¥–∞—Ç—ã + –∏–Ω–¥–µ–∫—Å."""
    items = upcoming(message.from_user.id, limit=100)
    if not items:
        await message.answer("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π:\n‚Ä¢ –±–ª–∏–∂–∞–π—à–∏—Ö –∑–∞–Ω—è—Ç–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.", reply_markup=role_kb("user"))
        return

    lines = ["–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π:"]
    for it in items:
        start = _get(it, "start")
        end = _get(it, "end") or start
        code = _code(it)
        code_txt = f" ({code})" if code else ""
        lines.append(f"‚Ä¢ {_fmt_date(start)} ‚Äî {_fmt_date(end)}{code_txt}")

    await message.answer("\n".join(lines), reply_markup=_build_details_kb(items))


@router.callback_query(F.data.startswith("sess:"))
async def session_details(cb: CallbackQuery):
    """–ö–∞—Ä—Ç–æ—á–∫–∞ –∑–∞–Ω—è—Ç–∏—è: –¥–∞—Ç—ã, –∫–æ–¥, —Ç–µ–º–∞ –∏ –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è."""
    start_key = cb.data.split(":", 1)[1]  # YYYYMMDD
    items = upcoming(cb.from_user.id, limit=200)

    target = None
    for it in items:
        s = _get(it, "start")
        if s and s.strftime("%Y%m%d") == start_key:
            target = it
            break

    if not target:
        await cb.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–ø–∏—Å—å :(", show_alert=True)
        return

    start = _get(target, "start")
    end = _get(target, "end") or start
    code = _code(target)
    title = _get(target, "title")
    ann = _get(target, "annotation")

    text = f"üóì {_fmt_date(start)} ‚Äî {_fmt_date(end)}"
    if code:
        text += f"\n–ö–æ–¥: {code}"
    if title:
        text += f"\n–¢–µ–º–∞: {title}"
    if ann:
        ann = ann if len(ann) <= 3600 else ann[:3600] + "‚Ä¶"
        text += "\n–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è:\n" + ann

    await cb.message.answer(text, reply_markup=role_kb("user"))
    await cb.answer()

# ** *a / crm2 / handlers / info.py
# --- –ò–ò-–∞–≥–µ–Ω—Ç—ã ---
from crm2.keyboards.agents import agents_menu_kb

@ router.message(F.text == "ü§ñ –ò–ò-–∞–≥–µ–Ω—Ç—ã —Ç—Ä–µ–±—É–µ—Ç—Å—è VPN")
async def show_agents(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ò–ò-–∞–≥–µ–Ω—Ç–∞:", reply_markup=agents_menu_kb())


@ router.message(F.text == "üßò –í–æ–ª–µ–≤–∞—è –º–µ–¥–∏—Ç–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è VPN")
async def open_meditation(message: Message):
    await message.answer(
        "–û—Ç–∫—Ä—ã—Ç—å: [–í–æ–ª–µ–≤–∞—è –º–µ–¥–∏—Ç–∞—Ü–∏—è](https://chatgpt.com/g/g-6871e6ae78c481918109e8813e51bc84-volevaia-meditatsiia)",
        disable_web_page_preview = True,
    )


@ router.message(F.text == "‚öñÔ∏è –ü—Å–∏—Ö–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≥–∞—Ä–º–æ–Ω–∏–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è VPN")
async def open_harmony(message: Message):
    await message.answer(
        "–û—Ç–∫—Ä—ã—Ç—å: [–ü—Å–∏—Ö–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≥–∞—Ä–º–æ–Ω–∏–∏](https://chatgpt.com/g/g-687493b5969c8191975066fd9970bd24-psikhotekhnologii-garmonii)",
        disable_web_page_preview = True,
    )


@router.message(F.text == "‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main(message: Message):
    from crm2.keyboards import role_kb, guest_start_kb
    from crm2.db.sqlite import DB_PATH
    import sqlite3

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –∏–∑ –±–∞–∑—ã
    with sqlite3.connect(DB_PATH) as con:
        con.row_factory = sqlite3.Row
        cur = con.execute("SELECT role FROM users WHERE telegram_id=?", (message.from_user.id,))
        row = cur.fetchone()
        role = row["role"] if row else "curious"

    if role in (None, "", "curious"):
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=guest_start_kb())
    else:
        await message.answer(f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–≤–∞—à–∞ —Ä–æ–ª—å: {role})", reply_markup=role_kb(role))
