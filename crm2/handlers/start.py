# crm2/handlers/start.py
from __future__ import annotations

import logging
from aiogram import Router, F
from aiogram.types import Message
from aiogram.utils.keyboard import InlineKeyboardBuilder

from crm2.services.users import get_user_by_telegram
from crm2.keyboards import guest_start_kb, role_kb

logger = logging.getLogger(__name__)
router = Router()


def _profile_complete(u: dict | None) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not u:
        return False
    nick = (u.get("nickname") or "").strip()
    pwd = (u.get("password") or "").strip()
    return bool(nick and pwd)


@router.message(F.text == "/start")
async def cmd_start(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - –í–°–ï–ì–î–ê –Ω–∞—á–∏–Ω–∞–µ–º —Å –≥–æ—Å—Ç–µ–≤–æ–≥–æ –º–µ–Ω—é"""
    try:
        # –í–°–ï–ì–î–ê –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–æ—Å—Ç–µ–≤–æ–µ –º–µ–Ω—é –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start
        # –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.answer(
            "üß† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Psytech CRM!\n\n"
            "–ó–¥–µ—Å—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤–∞—à –ø—É—Ç—å –∏–∑ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –≤ —Å–≤–æ–±–æ–¥—É. "
            "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª–Ω–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.",
            reply_markup=guest_start_kb()
        )

    except Exception as e:
        logger.error(f"Error in cmd_start: {e}")
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=guest_start_kb()
        )


    except Exception as e:
        logger.error(f"Error in cmd_start: {e}")
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=guest_start_kb()
        )