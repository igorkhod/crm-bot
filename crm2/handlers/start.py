# crm2/handlers/start.py

from aiogram import Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton

from crm2.handlers.consent import has_consent, consent_kb, CONSENT_TEXT

import sqlite3
from crm2.db.sqlite import DB_PATH
from crm2.keyboards import guest_start_kb, role_kb
from crm2.handlers_schedule import show_info_menu
from crm2.keyboards import guest_start_kb


router = Router(name="start")

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()

    # --- –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –∏ –µ–≥–æ —Ä–æ–ª—å ---
    with sqlite3.connect(DB_PATH) as con:
        con.row_factory = sqlite3.Row
        row = con.execute(
            "SELECT role FROM users WHERE telegram_id = ? LIMIT 1",
            (message.from_user.id,),
        ).fetchone()

    is_new = row is None
    role = (row["role"] if row and row["role"] else "curious")

    # --- –Ω–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: –ø–æ—ç—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ + —è–≤–Ω–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ ---
    if is_new:
        text = (
            "üåå *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Psytech!*\n\n"
            "–ó–¥–µ—Å—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—É—Ç—å ‚Äî –æ—Ç —Ä–∞—Å—Å–µ—è–Ω–Ω–æ—Å—Ç–∏ –∫ —è—Å–Ω–æ—Å—Ç–∏, "
            "–æ—Ç —Å—É–µ—Ç—ã –∫ —Å–æ–±—Ä–∞–Ω–Ω–æ—Å—Ç–∏, –æ—Ç –ø—Ä–∏–≤—ã—á–Ω–æ–≥–æ –∫ —Å–≤–æ–±–æ–¥–µ.\n\n"
            "–ú—ã –±–µ—Ä–µ–∂–Ω–æ —Å–æ–µ–¥–∏–Ω—è–µ–º –ø—Ä–∞–∫—Ç–∏–∫–∏ –≤–Ω–∏–º–∞–Ω–∏—è –∏ –≤–æ–ª–∏, —á—Ç–æ–±—ã —Ç—ã —Å–º–æ–≥ "
            "—Ä–∞—Å–∫—Ä—ã—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–∏–ª—ã –∏ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏.\n\n"
            "–ù–∞–∂–º–∏—Ç–µ *¬´–í–æ–π—Ç–∏¬ª* –∏–ª–∏ *¬´–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è¬ª*, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å."
        )
        await message.answer(text, parse_mode="Markdown", reply_markup=guest_start_kb())
        return

    # --- –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≥–ª–∞—Å–∏—è (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è) ---
    if not has_consent(message.from_user.id):
        await message.answer(CONSENT_TEXT, reply_markup=consent_kb())
        return

    # --- –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∏–¥–∞–µ–º —Å—Ä–∞–∑—É –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–º–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ---
    await message.answer(f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–≤–∞—à–∞ —Ä–æ–ª—å: {role})", reply_markup=role_kb(role))
    # —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥–º–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, —á—Ç–æ–±—ã –±—ã–ª–æ ¬´—Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º¬ª
    await show_info_menu(message)
