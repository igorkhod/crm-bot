# === –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫: crm2/handlers/start.py
# –°–ø–∏—Å–æ–∫ –≤–µ—Ä—Ö–Ω–µ—É—Ä–æ–≤–Ω–µ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ —Ñ–∞–π–ª–∞ (–∫–ª–∞—Å—Å—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏).
# –û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–∞–≤–∞ —Ñ—É–Ω–∫—Ü–∏–π/–∫–ª–∞—Å—Å–æ–≤.
# –ö–ª–∞—Å—Å—ã: ‚Äî
# –§—É–Ω–∫—Ü–∏–∏: guest_menu_kb, cmd_start
# === –ö–æ–Ω–µ—Ü –∞–≤—Ç–æ–∑–∞–≥–æ–ª–æ–≤–∫–∞
# crm2/handlers/start.py
from __future__ import annotations

from aiogram import Router, F
from aiogram.types import Message
from crm2.db.users import get_user_by_tg
from crm2.keyboards.main_menu import main_menu_kb
from crm2.keyboards import guest_start_kb

router = Router()


# –ü—Ä–æ—Ñ–∏–ª—å —Å—á–∏—Ç–∞–µ–º –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–º, –µ—Å–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã nickname –∏ password.
def _profile_complete(u: dict | None) -> bool:
    if not u:
        return False
    nick = (u.get("nickname") or "").strip()
    pwd  = (u.get("password") or "").strip()
    return bool(nick and pwd)


@router.message(F.text == "/start")
async def cmd_start(message: Message) -> None:
    tg_id = message.from_user.id
    user = get_user_by_tg(tg_id)
  # –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—É—Å–∫–∞–µ–º –¢–û–õ–¨–ö–û –ø—Ä–∏ –ø–æ–ª–Ω–æ–º –ø—Ä–æ—Ñ–∏–ª–µ
    if _profile_complete(user):
        await message.answer(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–≤–∞—à–∞ —Ä–æ–ª—å: {role})".format(role=user.get("role", "user")),
            reply_markup = main_menu_kb(),
        )

        return

    text = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Psytech! üß≠ –ó–¥–µ—Å—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—É—Ç—å –∏–∑ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –≤ —Å–≤–æ–±–æ–¥—É.\n"
        "–ù–∏–∂–µ ‚Äî –≤–∞–∂–Ω—ã–µ —à–∞–≥–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞.\n\n"
        "–£ –≤–∞—Å –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–ª–∏ –≤—ã –Ω–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É.\n"
        "–í—ã –≥–æ—Å—Ç—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    )
    await message.answer(text, reply_markup=guest_start_kb())