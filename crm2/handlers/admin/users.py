# === –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫: crm2/handlers/admin/users.py
# –°–ø–∏—Å–æ–∫ –≤–µ—Ä—Ö–Ω–µ—É—Ä–æ–≤–Ω–µ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ —Ñ–∞–π–ª–∞ (–∫–ª–∞—Å—Å—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏).
# –û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–∞–≤–∞ —Ñ—É–Ω–∫—Ü–∏–π/–∫–ª–∞—Å—Å–æ–≤.
# –ö–ª–∞—Å—Å—ã: ‚Äî
# –§—É–Ω–∫—Ü–∏–∏: admin_users_entry, admin_users_groups, _group_human, _user_line, _show_group_page, admin_users_pick_group, admin_users_page, admin_back
# === –ö–æ–Ω–µ—Ü –∞–≤—Ç–æ–∑–∞–≥–æ–ª–æ–≤–∫–∞
# crm2/handlers/admin/users.py
# –ö—Ä–∞—Ç–∫–∞—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è: –ø–æ–¥–º–µ–Ω—é "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏" ‚Äî –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã –∏ —Å–ø–∏—Å–∫–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import StateFilter

from crm2.keyboards.admin_users import users_groups_kb, users_pager_kb
from crm2.db.users_repo import count_users, list_users
from aiogram.exceptions import TelegramBadRequest

router = Router(name="admin_users")

PAGE_SIZE = 10


# –í—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ (–∫–Ω–æ–ø–∫–∞ "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
@router.message(StateFilter(None), F.text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
async def admin_users_entry(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –≥—Ä—É–ø–ø—É:", reply_markup=users_groups_kb())


# –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –º–µ–Ω—é –≥—Ä—É–ø–ø (–∫–Ω–æ–ø–∫–∞ "üîÑ –í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É")
@router.callback_query(F.data == "users:groups")
async def admin_users_groups(cb: CallbackQuery):
    await cb.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –≥—Ä—É–ø–ø—É:", reply_markup=users_groups_kb())
    await cb.answer()


def _group_human(group_key: str) -> str:
    return {
        "cohort_1": "1 –ø–æ—Ç–æ–∫",
        "cohort_2": "2 –ø–æ—Ç–æ–∫",
        "new_intake": "–ù–æ–≤—ã–π –Ω–∞–±–æ—Ä",
        "alumni": "–û–∫–æ–Ω—á–∏–≤—à–∏–µ",
        "admins": "–ê–¥–º–∏–Ω—ã",
    }.get(group_key, group_key)


def _user_line(u: dict) -> str:
    name = (u.get("full_name") or u.get("nickname") or "‚Äî").strip()
    nick = u.get("nickname") or ""
    role = u.get("role") or "user"
    cohort = u.get("cohort_id") or u.get("cohort_id")
    nick_txt = f" (@{nick})" if nick else ""
    cohort_txt = f" ‚Ä¢ –ø–æ—Ç–æ–∫: {cohort}" if cohort is not None else ""
    return f"‚Ä¢ {name}{nick_txt} ‚Äî {role}{cohort_txt}"


async def _show_group_page(cb_or_msg, group_key: str, page: int):
    total = count_users(group_key)
    pages = max(1, (total + PAGE_SIZE - 1) // PAGE_SIZE)
    page = max(1, min(page, pages))
    offset = (page - 1) * PAGE_SIZE
    users = list_users(group_key, offset=offset, limit=PAGE_SIZE)

    lines = [f"<b>{_group_human(group_key)}</b> ‚Äî –Ω–∞–π–¥–µ–Ω–æ: {total}", ""]
    lines += [_user_line(u) for u in users]
    text = "\n".join(lines) if users or total == 0 else "–ü–æ–∫–∞ –ø—É—Å—Ç–æ‚Ä¶"

    kb = users_pager_kb(group_key, page, pages)
    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ callback.message, –∏ –æ–±—ã—á–Ω–æ–≥–æ message
    msg = getattr(cb_or_msg, "message", None) or cb_or_msg
    try:
       await msg.edit_text(text, reply_markup=kb)
    except TelegramBadRequest as e:
        # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∂–º—ë–º ‚óÄÔ∏è/‚ñ∂Ô∏è –ø—Ä–∏ 1/1),
        # –ø—Ä–æ—Å—Ç–æ —Ç–∏—Ö–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥–∞—Ö.
        if "message is not modified" in str(e).lower():
            # –µ—Å–ª–∏ —ç—Ç–æ callback ‚Äî –æ—Ç–≤–µ—Ç–∏–º, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å ¬´—á–∞—Å–∏–∫–∏¬ª
            if hasattr(cb_or_msg, "answer"):
                try:
                    await cb_or_msg.answer("–£–∂–µ –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
                except Exception:
                    pass
            return
        raise


# –í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã ‚Üí —Å—Ç—Ä–∞–Ω–∏—Ü–∞ 1
@router.callback_query(F.data.startswith("users:group:"))
async def admin_users_pick_group(cb: CallbackQuery):
    # –±—ã–ª–æ: cb.data.split(":", 2)[-1] ‚Üí –¥–∞–≤–∞–ª–æ "group"
    group_key = cb.data.split(":")[-1]  # —Ç–µ–ø–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: cohort_1 / cohort_2 / new_intake / alumni / admins
    await _show_group_page(cb, group_key=group_key, page=1)
    await cb.answer()


# –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
@router.callback_query(F.data.startswith("users:page:"))
async def admin_users_page(cb: CallbackQuery):
    # —Ñ–æ—Ä–º–∞—Ç: users:page:<group_key>:<page>
    parts = cb.data.split(":")
    group_key = parts[2] if len(parts) >= 4 else "cohort_1"
    try:
        page = int(parts[3])
    except Exception:
        page = 1
    await _show_group_page(cb, group_key=group_key, page=page)
    await cb.answer()


# —Ö–µ–Ω–¥–ª–µ—Ä ¬´–Ω–∞–∑–∞–¥¬ª:

@router.callback_query(F.data == "admin:back")
async def admin_back(cb: CallbackQuery):
    """
    –í–æ–∑–≤—Ä–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.
    –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å, –∏–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º —Ç–µ–∫—Å—Ç–æ–º.
    """
    try:
        # –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –≥–æ—Ç–æ–≤—ã–π —Ä–µ–Ω–¥–µ—Ä–µ—Ä –ø–∞–Ω–µ–ª–∏ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ.
        from crm2.handlers.admin.panel import render_admin_panel  # —Å–º. —à–∞–≥ 2
        await render_admin_panel(cb.message)
    except Exception:
        # –§–æ–ª–±—ç–∫: —É–±–∏—Ä–∞–µ–º –∏–Ω–ª–∞–π–Ω –∏ –ø–∏—à–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É.
        try:
            await cb.message.edit_text("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:")
        except TelegramBadRequest:
            await cb.message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:")
    finally:
        await cb.answer()

#         –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞  crm2/handlers/admin/users.py
