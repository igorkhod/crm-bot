# crm2/handlers/admin/schedule.py
# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ (—Ç—Ä–µ–Ω–∏–Ω–≥–∏, –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, —Ü–µ–ª–∏—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–∏–µ–º—ã)
# –§—É–Ω–∫—Ü–∏–∏:
# - schedule_menu - –í—Ö–æ–¥–Ω–æ–µ –º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
# - _render_menu - –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
# - trainings_entry - –í—Ö–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª —Ç—Ä–µ–Ω–∏–Ω–≥–æ–≤
# - trainings_cohort - –í—ã–±–æ—Ä –∫–æ–≥–æ—Ä—Ç—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—Ä–µ–Ω–∏–Ω–≥–æ–≤
# - trainings_page - –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ —Ç—Ä–µ–Ω–∏–Ω–≥–æ–≤
# - _render_trainings - –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç—Ä–µ–Ω–∏–Ω–≥–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
# - events_entry - –í—Ö–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
# - events_page - –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
# - _render_events - –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
# - healings_entry - –í—Ö–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª —Ü–µ–ª–∏—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–∏–µ–º–æ–≤
# - healings_page - –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ —Ü–µ–ª–∏—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–∏–µ–º–æ–≤
# - _render_healings - –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ü–µ–ª–∏—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–∏–µ–º–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
# - all_entry - –í—Ö–æ–¥ –≤ –æ–±—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
# - all_page - –ü–∞–≥–∏–Ω–∞—Ü–∏—è –æ–±—â–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
# - _render_all - –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.exceptions import TelegramBadRequest

from crm2.keyboards.admin_schedule import schedule_menu_kb, schedule_cohorts_kb, pager_kb
from crm2.db import schedule_repo as repo

router = Router(name="admin_schedule")

PAGE = 10

# --- –≤—Ö–æ–¥–Ω–æ–µ –º–µ–Ω—é ---
@router.callback_query(F.data == "admin:schedule")
async def schedule_menu(cb: CallbackQuery):
    await _render_menu(cb)
    await cb.answer()


async def _render_menu(cb: CallbackQuery):  # –ü—Ä–∏–Ω–∏–º–∞–µ–º CallbackQuery
    await cb.message.edit_text(
        "üóì <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ</b>\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=schedule_menu_kb(),
        parse_mode="HTML"
    )

# --- 1) –¢—Ä–µ–Ω–∏–Ω–≥–∏ –ø–æ –ø–æ—Ç–æ–∫–∞–º ---
@router.callback_query(F.data == "sch:trainings")
async def trainings_entry(cb: CallbackQuery):
    try:
        await cb.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ç–æ–∫:", reply_markup=schedule_cohorts_kb())
    except TelegramBadRequest:
        await cb.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ç–æ–∫:", reply_markup=schedule_cohorts_kb())
    await cb.answer()

@router.callback_query(F.data.startswith("sch:tr:cohort:"))
async def trainings_cohort(cb: CallbackQuery):
    cohort_id = int(cb.data.split(":")[-1])
    await _render_trainings(cb.message, cohort_id, page=1)
    await cb.answer()

@router.callback_query(F.data.startswith("sch:tr:page:"))
async def trainings_page(cb: CallbackQuery):
    # —Ñ–æ—Ä–º–∞—Ç: sch:tr:page:<page>:<cohort_id>
    parts = cb.data.split(":")
    page = int(parts[3])
    cohort_id = int(parts[4])
    await _render_trainings(cb.message, cohort_id, page)
    await cb.answer()

async def _render_trainings(msg: Message, cohort_id: int, page: int):
    total = repo.count_trainings(cohort_id)
    pages = max(1, (total + PAGE - 1) // PAGE)
    page = max(1, min(page, pages))
    offset = (page - 1) * PAGE
    items = repo.list_trainings(cohort_id, offset, PAGE)

    lines = [f"üéì –¢—Ä–µ–Ω–∏–Ω–≥–∏ ‚Äî –ø–æ—Ç–æ–∫ {cohort_id} ¬∑ –Ω–∞–π–¥–µ–Ω–æ: {total}", ""]
    for it in items:
        date = it["date"]
        code = it.get("topic_code") or ""
        title = it.get("topic_title") or ""
        sep = " ‚Äî " if code and title else ""
        lines.append(f"‚Ä¢ {date} ¬∑ {code}{sep}{title}")
    text = "\n".join(lines) if items or total == 0 else "–ü–æ–∫–∞ –ø—É—Å—Ç–æ‚Ä¶"

    kb = pager_kb(prefix="sch:tr:page", page=page, pages=pages, suffix=str(cohort_id))
    try:
        await msg.edit_text(text, reply_markup=kb)
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e).lower():
            raise

# --- 2) –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è ---
@router.callback_query(F.data == "sch:events")
async def events_entry(cb: CallbackQuery):
    await _render_events(cb.message, page=1)
    await cb.answer()

@router.callback_query(F.data.startswith("sch:ev:page:"))
async def events_page(cb: CallbackQuery):
    page = int(cb.data.split(":")[-1])
    await _render_events(cb.message, page)
    await cb.answer()

async def _render_events(msg: Message, page: int):
    total = repo.count_events()
    pages = max(1, (total + PAGE - 1) // PAGE)
    page = max(1, min(page, pages))
    items = repo.list_events(offset=(page - 1) * PAGE, limit=PAGE)

    lines = [f"üé™ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è ¬∑ –Ω–∞–π–¥–µ–Ω–æ: {total}", ""]
    for it in items:
        lines.append(f"‚Ä¢ {it['date']} ¬∑ {it['title']}")
        if it.get("description"):
            lines.append(f"  {it['description']}")
    text = "\n".join(lines) if items or total == 0 else "–ü–æ–∫–∞ –ø—É—Å—Ç–æ‚Ä¶"

    kb = pager_kb(prefix="sch:ev:page", page=page, pages=pages)
    try:
        await msg.edit_text(text, reply_markup=kb)
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e).lower():
            raise

# --- 3) –¶–µ–ª–∏—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–∏—ë–º—ã ---
@router.callback_query(F.data == "sch:healings")
async def healings_entry(cb: CallbackQuery):
    await _render_healings(cb.message, page=1)
    await cb.answer()

@router.callback_query(F.data.startswith("sch:hl:page:"))
async def healings_page(cb: CallbackQuery):
    page = int(cb.data.split(":")[-1])
    await _render_healings(cb.message, page)
    await cb.answer()

async def _render_healings(msg: Message, page: int):
    total = repo.count_healings()
    pages = max(1, (total + PAGE - 1) // PAGE)
    page = max(1, min(page, pages))
    items = repo.list_healings(offset=(page - 1) * PAGE, limit=PAGE)

    lines = [f"‚ú® –¶–µ–ª–∏—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–∏—ë–º—ã ¬∑ –Ω–∞–π–¥–µ–Ω–æ: {total}", ""]
    for it in items:
        lines.append(f"‚Ä¢ {it['date']} {it['time_start']} ¬∑ {it.get('note','')}".rstrip())
    text = "\n".join(lines) if items or total == 0 else "–ü–æ–∫–∞ –ø—É—Å—Ç–æ‚Ä¶"

    kb = pager_kb(prefix="sch:hl:page", page=page, pages=pages)
    try:
        await msg.edit_text(text, reply_markup=kb)
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e).lower():
            raise

# --- 4) –û–±—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ ---
@router.callback_query(F.data == "sch:all")
async def all_entry(cb: CallbackQuery):
    await _render_all(cb.message, page=1)
    await cb.answer()

@router.callback_query(F.data.startswith("sch:all:page:"))
async def all_page(cb: CallbackQuery):
    page = int(cb.data.split(":")[-1])
    await _render_all(cb.message, page)
    await cb.answer()

async def _render_all(msg: Message, page: int):
    total = repo.count_all()
    pages = max(1, (total + PAGE - 1) // PAGE)
    page = max(1, min(page, pages))
    items = repo.list_all(offset=(page - 1) * PAGE, limit=PAGE)

    icon = {"training": "üéì", "event": "üé™", "healing": "‚ú®"}
    lines = [f"üìã –û–±—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ ¬∑ –Ω–∞–π–¥–µ–Ω–æ: {total}", ""]
    for it in items:
        k = it["kind"]
        lines.append(f"‚Ä¢ {it['start_at']} ¬∑ {icon.get(k, '‚Ä¢')} {it['title']}")
        if it.get("details"):
            lines.append(f"  {it['details']}")
    text = "\n".join(lines) if items or total == 0 else "–ü–æ–∫–∞ –ø—É—Å—Ç–æ‚Ä¶"

    kb = pager_kb(prefix="sch:all:page", page=page, pages=pages)
    try:
        await msg.edit_text(text, reply_markup=kb)
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e).lower():
            raise
