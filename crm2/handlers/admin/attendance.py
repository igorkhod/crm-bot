# crm2/handlers/admin/attendance.py
from __future__ import annotations

import logging
from datetime import date, datetime
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder

from crm2.services.database import db
from crm2.services.users import get_user_by_telegram

logger = logging.getLogger(__name__)
router = Router()

ATTENDANCE_STATUSES = {
    'not_set': '‚ö™ –ù–µ –æ—Ç–º–µ—á–µ–Ω',
    'present': '‚úÖ –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª',
    'absent': '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª',
    'stopped': '‚è∏ –ü—Ä–µ–∫—Ä–∞—Ç–∏–ª –∑–∞–Ω—è—Ç–∏—è',
    'expelled': 'üö´ –û—Ç—á–∏—Å–ª–µ–Ω'
}


async def admin_attendance_entry(cq: CallbackQuery):
    """–í—Ö–æ–¥–Ω–∞—è —Ç–æ—á–∫–∞ —Ä–∞–∑–¥–µ–ª–∞ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    await cq.answer()
    await show_attendance_main(cq.message)


async def show_attendance_main(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã"""
    today = date.today().isoformat()

    today_cohorts = await db.fetch_all("""
                                       SELECT DISTINCT c.id, c.name
                                       FROM session_days sd
                                                JOIN cohorts c ON sd.cohort_id = c.id
                                       WHERE sd.date = ?
                                       """, (today,))

    kb = InlineKeyboardBuilder()

    if today_cohorts:
        text = f"üìÖ –°–µ–≥–æ–¥–Ω—è {date.today().strftime('%d.%m.%Y')} –µ—Å—Ç—å –∑–∞–Ω—è—Ç–∏—è:\n"
        for cohort in today_cohorts:
            text += f"‚Ä¢ {cohort['name']}\n"
            kb.button(text=f"üìù {cohort['name']}", callback_data=f"attendance:cohort:{cohort['id']}:{today}")

        text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –∏–ª–∏ –¥—Ä—É–≥—É—é –≥—Ä—É–ø–ø—É:"
        kb.button(text="üîç –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –≥—Ä—É–ø–ø—É", callback_data="attendance:choose_cohort")
    else:
        text = f"üìÖ –°–µ–≥–æ–¥–Ω—è {date.today().strftime('%d.%m.%Y')} –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç!\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –≥—Ä—É–ø–ø—É:"
        kb.button(text="üîç –í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É", callback_data="attendance:choose_cohort")

    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:back")
    kb.adjust(1)

    await message.answer(text, reply_markup=kb.as_markup())


# –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ù–ê –£–†–û–í–ù–ï –ú–û–î–£–õ–Ø, –∞ –Ω–µ –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏
@router.callback_query(F.data == "attendance:back_main")
async def back_to_attendance_main(cq: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏"""
    print("‚¨ÖÔ∏è –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏...")
    await cq.answer()
    await show_attendance_main(cq.message)


async def show_date_selection(message: Message, cohort_id: str, cohort_name: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–∞—Ç—ã –¥–ª—è –∫–æ–≥–æ—Ä—Ç—ã"""
    print(f"üìÖ show_date_selection: cohort_id={cohort_id}, cohort_name={cohort_name}")
    today = date.today().isoformat()

    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—à–µ–¥—à–∏–µ –¥–∞—Ç—ã –∑–∞–Ω—è—Ç–∏–π (–≤–∫–ª—é—á–∞—è —Å–µ–≥–æ–¥–Ω—è)
        print(f"üìÖ –ò—â–µ–º –¥–∞—Ç—ã –∑–∞–Ω—è—Ç–∏–π –¥–ª—è –∫–æ–≥–æ—Ä—Ç—ã {cohort_id}...")
        dates = await db.fetch_all("""
                                   SELECT DISTINCT date
                                   FROM session_days
                                   WHERE cohort_id = ? AND date <= ?
                                   ORDER BY date DESC
                                       LIMIT 10
                                   """, (cohort_id, today))

        print(f"üìÖ –ù–∞–π–¥–µ–Ω–æ –¥–∞—Ç: {len(dates)}")

        kb = InlineKeyboardBuilder()

        for date_record in dates:
            date_str = date_record['date']
            display_date = datetime.strptime(date_str, '%Y-%m-%d').strftime('%d.%m.%Y')
            print(f"‚ûï –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–∞—Ç—ã: {display_date} ({date_str})")
            kb.button(text=display_date, callback_data=f"attendance:cohort:{cohort_id}:{date_str}")

        kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≥—Ä—É–ø–ø–∞–º", callback_data="attendance:choose_cohort")
        kb.adjust(2)

        print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã...")
        await message.edit_text(
            f"üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–Ω—è—Ç–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã {cohort_name}:",
            reply_markup=kb.as_markup()
        )
        print("‚úÖ –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")

    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –≤ show_date_selection: {e}")
        import traceback
        traceback.print_exc()
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞—Ç –∑–∞–Ω—è—Ç–∏–π")


async def show_attendance_marking(message: Message, cohort_id: str, cohort_name: str, session_date: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –ø–æ—Å–µ—â–µ–Ω–∏—è"""
    print(f"üìù show_attendance_marking: cohort_id={cohort_id}, cohort_name={cohort_name}, session_date={session_date}")

    try:
        # –ü–æ–ª—É—á–∞–µ–º session_id
        session = await db.fetch_one(
            "SELECT id FROM session_days WHERE cohort_id = ? AND date = ?",
            (cohort_id, session_date)
        )

        if not session:
            print("‚ùå –ó–∞–Ω—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ session_days")
            await message.answer("‚ùå –ó–∞–Ω—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        session_id = session['id']
        print(f"üìù –ù–∞–π–¥–µ–Ω–æ –∑–∞–Ω—è—Ç–∏–µ —Å id={session_id}")

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∫–æ–≥–æ—Ä—Ç—ã
        students = await db.fetch_all("""
                                      SELECT u.id, u.full_name, u.username, u.telegram_id
                                      FROM users u
                                               JOIN participants p ON u.id = p.user_id
                                      WHERE p.cohort_id = ?
                                      ORDER BY u.full_name
                                      """, (cohort_id,))

        if not students:
            print("‚ùå –í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –Ω–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
            await message.answer("‚ùå –í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –Ω–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
            return

        print(f"üë• –ù–∞–π–¥–µ–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {len(students)}")

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã –ø–æ—Å–µ—â–µ–Ω–∏—è
        attendance_data = await db.fetch_all("""
                                             SELECT user_id, status
                                             FROM attendance
                                             WHERE session_id = ?
                                             """, (session_id,))

        attendance_dict = {str(item['user_id']): item['status'] for item in attendance_data}
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏: {len(attendance_data)}")

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –ø–æ—Å–µ—â–µ–Ω–∏—è
        kb = InlineKeyboardBuilder()

        for student in students:
            student_id = str(student['id'])
            current_status = attendance_dict.get(student_id, 'not_set')
            status_text = ATTENDANCE_STATUSES.get(current_status, '‚ö™ –ù–µ –æ—Ç–º–µ—á–µ–Ω')

            # –ö–Ω–æ–ø–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞ —Å —Ç–µ–∫—É—â–∏–º —Å—Ç–∞—Ç—É—Å–æ–º
            kb.button(
                text=f"{student['full_name']} - {status_text}",
                callback_data=f"attendance:student:{cohort_id}:{session_date}:{student_id}"
            )

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        kb.button(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –≤—ã–π—Ç–∏", callback_data="attendance:save_exit")
        kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –¥–∞—Ç–∞–º", callback_data=f"attendance:cohort:{cohort_id}")
        kb.adjust(1)

        display_date = datetime.strptime(session_date, '%Y-%m-%d').strftime('%d.%m.%Y')
        await message.edit_text(
            f"üìù –û—Ç–º–µ—Ç–∫–∞ –ø–æ—Å–µ—â–µ–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã {cohort_name}\n"
            f"üìÖ –î–∞—Ç–∞: {display_date}\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:",
            reply_markup=kb.as_markup()
        )
        print("‚úÖ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—Ç–º–µ—Ç–∫–∏ –ø–æ—Å–µ—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –≤ show_attendance_marking: {e}")
        import traceback
        traceback.print_exc()
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –æ—Ç–º–µ—Ç–∫–∏ –ø–æ—Å–µ—â–µ–Ω–∏—è")


# –î–û–ë–ê–í–¨–¢–ï –≠–¢–û–¢ –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ö–ù–û–ü–ö–ò –ò–ó –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–ò
@router.callback_query(F.data == "admin:attendance")
async def admin_attendance_handler(cq: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å' –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    await admin_attendance_entry(cq)


@router.callback_query(F.data == "attendance:choose_cohort")
async def choose_cohort(cq: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–≥–æ—Ä—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞"""
    print(f"üéØ –û–ë–†–ê–ë–û–¢–ß–ò–ö choose_cohort –í–´–ó–í–ê–ù –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {cq.from_user.id}")
    await cq.answer()

    try:
        print("üìã –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ...")
        cohorts = await db.fetch_all("SELECT id, name FROM cohorts ORDER BY name")
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∫–æ–≥–æ—Ä—Ç: {len(cohorts)}")

        if not cohorts:
            print("‚ùå –ö–æ–≥–æ—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            await cq.message.edit_text("‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≥—Ä—É–ø–ø.")
            return

        print("üî® –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É...")
        kb = InlineKeyboardBuilder()
        for cohort in cohorts:
            print(f"‚ûï –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É: {cohort['name']} (id: {cohort['id']})")
            kb.button(text=cohort['name'], callback_data=f"attendance:cohort:{cohort['id']}")

        kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="attendance:back_main")
        kb.adjust(1)

        print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        await cq.message.edit_text("üë• –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:", reply_markup=kb.as_markup())
        print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")

    except Exception as e:
        print(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        await cq.message.answer("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø")


@router.callback_query(F.data.startswith("attendance:cohort:"))
async def process_cohort_selection(cq: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ–≥–æ—Ä—Ç—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∞—Ç—ã –∑–∞–Ω—è—Ç–∏–π"""
    print(f"üéØ –û–ë–†–ê–ë–û–¢–ß–ò–ö process_cohort_selection –í–´–ó–í–ê–ù —Å data: {cq.data}")
    await cq.answer()

    try:
        parts = cq.data.split(":")
        cohort_id = parts[2]
        selected_date = parts[3] if len(parts) > 3 else None
        print(f"üìå –†–∞–∑–æ–±—Ä–∞–Ω—ã —á–∞—Å—Ç–∏: cohort_id={cohort_id}, selected_date={selected_date}")

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–≥–æ—Ä—Ç–µ
        print(f"üìã –ò—â–µ–º –∫–æ–≥–æ—Ä—Ç—É —Å id={cohort_id} –≤ –±–∞–∑–µ...")
        cohort = await db.fetch_one("SELECT name FROM cohorts WHERE id = ?", (cohort_id,))
        if not cohort:
            print("‚ùå –ö–æ–≥–æ—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ")
            await cq.message.answer("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        print(f"üìã –ù–∞–π–¥–µ–Ω–∞ –∫–æ–≥–æ—Ä—Ç–∞: {cohort['name']}")

        # –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –¥–∞—Ç—ã
        if not selected_date:
            print("üìÖ –î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –≤—ã–∑—ã–≤–∞–µ–º show_date_selection")
            await show_date_selection(cq.message, cohort_id, cohort['name'])
            return

        # –ï—Å–ª–∏ –¥–∞—Ç–∞ —É–∫–∞–∑–∞–Ω–∞, —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ç–º–µ—Ç–∫–µ –ø–æ—Å–µ—â–µ–Ω–∏—è
        print(f"üìÖ –î–∞—Ç–∞ —É–∫–∞–∑–∞–Ω–∞: {selected_date}, –≤—ã–∑—ã–≤–∞–µ–º show_attendance_marking")
        await show_attendance_marking(cq.message, cohort_id, cohort['name'], selected_date)

    except Exception as e:
        print(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ process_cohort_selection: {e}")
        import traceback
        traceback.print_exc()
        await cq.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã")


@router.callback_query(F.data.startswith("attendance:student:"))
async def process_student_attendance(cq: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å–µ—â–µ–Ω–∏—è"""
    print(f"üéØ –û–ë–†–ê–ë–û–¢–ß–ò–ö process_student_attendance –í–´–ó–í–ê–ù —Å data: {cq.data}")
    await cq.answer()

    try:
        parts = cq.data.split(":")
        cohort_id = parts[2]
        session_date = parts[3]
        student_id = parts[4]

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—É–¥–µ–Ω—Ç–µ
        student = await db.fetch_one(
            "SELECT full_name FROM users WHERE id = ?",
            (student_id,)
        )

        if not student:
            print("‚ùå –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await cq.message.answer("‚ùå –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞
        kb = InlineKeyboardBuilder()

        for status_key, status_text in ATTENDANCE_STATUSES.items():
            kb.button(
                text=status_text,
                callback_data=f"attendance:set_status:{cohort_id}:{session_date}:{student_id}:{status_key}"
            )

        kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"attendance:cohort:{cohort_id}:{session_date}")
        kb.adjust(1)

        await cq.message.edit_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞:\n{student['full_name']}",
            reply_markup=kb.as_markup()
        )

    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –≤ process_student_attendance: {e}")
        import traceback
        traceback.print_exc()


@router.callback_query(F.data.startswith("attendance:set_status:"))
async def set_attendance_status(cq: CallbackQuery):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ—Å–µ—â–µ–Ω–∏—è –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    print(f"üéØ –û–ë–†–ê–ë–û–¢–ß–ò–ö set_attendance_status –í–´–ó–í–ê–ù —Å data: {cq.data}")
    await cq.answer()

    try:
        parts = cq.data.split(":")
        cohort_id = parts[2]
        session_date = parts[3]
        student_id = parts[4]
        status = parts[5]
        print(f"üìå –†–∞–∑–æ–±—Ä–∞–Ω—ã —á–∞—Å—Ç–∏: cohort_id={cohort_id}, session_date={session_date}, student_id={student_id}, status={status}")

        # –ü–æ–ª—É—á–∞–µ–º session_id
        session = await db.fetch_one(
            "SELECT id FROM session_days WHERE cohort_id = ? AND date = ?",
            (cohort_id, session_date)
        )

        if not session:
            print("‚ùå –ó–∞–Ω—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            await cq.message.answer("‚ùå –ó–∞–Ω—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        session_id = session['id']
        print(f"üìù Session ID: {session_id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
        existing = await db.fetch_one(
            "SELECT id FROM attendance WHERE user_id = ? AND session_id = ?",
            (student_id, session_id)
        )

        print(f"üìä –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∑–∞–ø–∏—Å—å: {existing}")

        try:
            if status == 'not_set':
                # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Å—Ç–∞—Ç—É—Å "–ù–µ –æ—Ç–º–µ—á–µ–Ω", —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
                if existing:
                    print("üóëÔ∏è –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å (—Å—Ç–∞—Ç—É—Å '–ù–µ –æ—Ç–º–µ—á–µ–Ω')...")
                    await db.execute(
                        "DELETE FROM attendance WHERE user_id = ? AND session_id = ?",
                        (student_id, session_id)
                    )
            else:
                if existing:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                    print("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å...")
                    await db.execute(
                        "UPDATE attendance SET status = ? WHERE user_id = ? AND session_id = ?",
                        (status, student_id, session_id)
                    )
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                    print("‚ûï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å...")
                    await db.execute(
                        "INSERT INTO attendance (user_id, session_id, status) VALUES (?, ?, ?)",
                        (student_id, session_id, status)
                    )

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            status_text = ATTENDANCE_STATUSES.get(status, status)
            student = await db.fetch_one("SELECT full_name FROM users WHERE id = ?", (student_id,))
            if student:
                await cq.answer(f"‚úÖ {student['full_name']} - {status_text}")

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
            print("üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Å—Ç—É–¥–µ–Ω—Ç–æ–≤...")
            await show_attendance_marking(cq.message, cohort_id, "", session_date)

        except Exception as db_error:
            print(f"üí• –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {db_error}")
            await cq.answer("‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")

    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –≤ set_attendance_status: {e}")
        import traceback
        traceback.print_exc()
        await cq.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")


@router.callback_query(F.data == "attendance:test_simple")
async def test_simple(cq: CallbackQuery):
    """–ü—Ä–æ—Å—Ç–µ–π—à–∏–π —Ç–µ—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫"""
    print("üéØ –¢–ï–°–¢–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–´–ó–í–ê–ù!")
    await cq.answer("–¢–µ—Å—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    await cq.message.edit_text("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç!")

# –î–æ–±–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑ –≤–∞—à–µ–≥–æ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∑–¥–µ—Å—å...