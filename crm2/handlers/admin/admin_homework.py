from __future__ import annotations

import asyncio
import logging
from typing import Iterable

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from crm2.services.attendance import (
    get_sessions_near,
    get_not_yet_delivered,
    mark_homework_delivered,
)

router = Router()

# --------- FSM ---------

class HW(StatesGroup):
    awaiting_link = State()
    chosen_session = State()

# --------- helpers ---------

def _kb(rows: list[list[InlineKeyboardButton]]) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=rows)

def homework_menu_markup() -> InlineKeyboardMarkup:
    rows = [
        [InlineKeyboardButton(text="üìÖ –í—ã–±—Ä–∞—Ç—å –∑–∞–Ω—è—Ç–∏–µ", callback_data="hw:list")],
        [InlineKeyboardButton(text="üßæ –°—Ç–∞—Ç—É—Å –ø–æ –∑–∞–Ω—è—Ç–∏—é", callback_data="hw:status")],
        [InlineKeyboardButton(text="‚ôªÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –æ—Ç–º–µ—Ç–∫–∏ (–æ–ø–∞—Å–Ω–æ)", callback_data="hw:reset")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin:back")],
    ]
    return _kb(rows)

def _sessions_list_kb(sessions: Iterable[tuple[int, str, int | None, str | None]]) -> InlineKeyboardMarkup:
    rows: list[list[InlineKeyboardButton]] = []
    for sid, sdate, stream_id, topic_code in sessions:
        title = f"{sdate} ¬∑ –ø–æ—Ç–æ–∫ {stream_id or '‚Äî'} ¬∑ {topic_code or '‚Ä¶'}"
        rows.append([InlineKeyboardButton(text=title, callback_data=f"hw:session:{sid}")])
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="hw:menu")])
    return _kb(rows)

def _session_actions_kb(session_id: int) -> InlineKeyboardMarkup:
    return _kb([
        [InlineKeyboardButton(text="üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –î–ó (–≤–≤–µ—Å—Ç–∏ —Å—Å—ã–ª–∫—É)", callback_data=f"hw:send:{session_id}")],
        [InlineKeyboardButton(text="üßæ –°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–æ–∫", callback_data=f"hw:status:{session_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É –∑–∞–Ω—è—Ç–∏–π", callback_data="hw:list")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin:back")],
    ])

# --------- message handlers ---------

@router.message(F.text == "üìö –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è")
async def admin_homework_entry(message: Message):
    await message.answer("–†–∞–∑–¥–µ–ª ¬´–î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è¬ª.", reply_markup=homework_menu_markup())

# --------- callbacks ---------

@router.callback_query(F.data == "hw:menu")
async def cb_hw_menu(cb: CallbackQuery):
    await cb.message.edit_text("–†–∞–∑–¥–µ–ª ¬´–î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è¬ª.", reply_markup=homework_menu_markup())
    await cb.answer()

@router.callback_query(F.data == "hw:list")
async def cb_hw_list(cb: CallbackQuery):
    rows = await get_sessions_near(days=14)
    if not rows:
        await cb.message.edit_text("–ë–ª–∏–∂–∞–π—à–∏—Ö –∑–∞–Ω—è—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=homework_menu_markup())
        return await cb.answer()
    await cb.message.edit_text("–í—ã–±–µ—Ä–∏ –∑–∞–Ω—è—Ç–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –î–ó:", reply_markup=_sessions_list_kb(rows))
    await cb.answer()

@router.callback_query(F.data.startswith("hw:session:"))
async def cb_hw_session(cb: CallbackQuery):
    session_id = int(cb.data.split(":")[2])
    await cb.message.edit_text(f"–ó–∞–Ω—è—Ç–∏–µ #{session_id}.", reply_markup=_session_actions_kb(session_id))
    await cb.answer()

# --- –æ—Ç–ø—Ä–∞–≤–∫–∞ –î–ó ---

@router.callback_query(F.data.startswith("hw:send:"))
async def cb_hw_send_ask_link(cb: CallbackQuery, state: FSMContext):
    session_id = int(cb.data.split(":")[2])
    await state.set_state(HW.awaiting_link)
    await state.update_data(session_id=session_id)
    await cb.message.edit_text(
        f"–ó–∞–Ω—è—Ç–∏–µ #{session_id}.\n"
        "–í—Å—Ç–∞–≤—å —Å—Å—ã–ª–∫—É(–∏) –Ω–∞ –Ø.–î–∏—Å–∫ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª / –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫).",
        reply_markup=_kb([[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"hw:session:{session_id}")]])
    )
    await cb.answer()

@router.message(HW.awaiting_link)
async def hw_got_links(message: Message, state: FSMContext):
    data = await state.get_data()
    session_id: int = data["session_id"]

    # —Ä–∞—Å–ø–∞—Ä—Å–∏–º –≤—Å–µ URL –∏–∑ —Ç–µ–∫—Å—Ç–∞
    links = [x.strip() for x in message.text.replace("\n", " ").split() if x.strip()]
    if not links:
        await message.answer("–ù–µ –Ω–∞—à—ë–ª —Å—Å—ã–ª–æ–∫. –ü—Ä–∏—à–ª–∏ —Å—Ç—Ä–æ–∫—É(–∏) —Å URL.")
        return

    # –ö–æ–º—É —Å–ª–∞—Ç—å: –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–≤—à–∏–µ –∏ –µ—â—ë –Ω–µ –ø–æ–ª—É—á–∞–≤—à–∏–µ
    user_ids = await get_not_yet_delivered(session_id)
    if not user_ids:
        await message.answer("–ù–∏–∫—Ç–æ –Ω–µ –æ—Ç–º–µ—á–µ–Ω ¬´–ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª¬ª, –ª–∏–±–æ –≤—Å–µ–º —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏.")
        await state.clear()
        return

    sent = 0
    for uid in user_ids:
        text = "üìö –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ:\n" + "\n".join(links)
        try:
            await message.bot.send_message(uid, text)
            # –æ—Ç–º–µ—Ç–∏–º –¥–æ—Å—Ç–∞–≤–∫—É (–±–µ—Ä—ë–º –ø–µ—Ä–≤—É—é —Å—Å—ã–ª–∫—É –∫–∞–∫ ¬´–æ—Å–Ω–æ–≤–Ω—É—é¬ª)
            await mark_homework_delivered(session_id, uid, link=links[0])
            sent += 1
            await asyncio.sleep(0.05)  # –Ω–µ –¥—É—à–∏–º API
        except Exception as e:
            logging.warning("HW delivery failed: user=%s err=%r", uid, e)

    await message.answer(f"–ì–æ—Ç–æ–≤–æ: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent} –∏–∑ {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    await state.clear()
    # –Ω–∞–∑–∞–¥ –∫ –∫–∞—Ä—Ç–æ—á–∫–µ –∑–∞–Ω—è—Ç–∏—è
    await message.answer(f"–ó–∞–Ω—è—Ç–∏–µ #{session_id}.", reply_markup=_session_actions_kb(session_id))

# --- —Å—Ç–∞—Ç—É—Å/—Å–±—Ä–æ—Å (–∑–∞–≥–ª—É—à–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ) ---

@router.callback_query(F.data == "hw:status")
async def cb_hw_status_ask(cb: CallbackQuery):
    await cb.message.edit_text("–í—ã–±–µ—Ä–∏ –∑–∞–Ω—è—Ç–∏–µ –≤ ¬´üìÖ –í—ã–±—Ä–∞—Ç—å –∑–∞–Ω—è—Ç–∏–µ¬ª, –∞ –ø–æ—Ç–æ–º –Ω–∞–∂–º–∏ ¬´üßæ –°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–æ–∫¬ª.",
                               reply_markup=homework_menu_markup())
    await cb.answer()

@router.callback_query(F.data.startswith("hw:status:"))
async def cb_hw_status(cb: CallbackQuery):
    session_id = int(cb.data.split(":")[2])
    # –ú–∏–Ω–∏-–æ—Ç—á—ë—Ç: —Å–∫–æ–ª—å–∫–æ –µ—â—ë –Ω–µ –ø–æ–ª—É—á–∏–ª–∏
    pending = await get_not_yet_delivered(session_id)
    got = "‚Äî" if pending is None else f"–ï—â—ë –Ω–µ –ø–æ–ª—É—á–∏–ª–∏: {len(pending)}"
    await cb.message.edit_text(f"–°—Ç–∞—Ç—É—Å –ø–æ –∑–∞–Ω—è—Ç–∏—é #{session_id}.\n{got}",
                               reply_markup=_session_actions_kb(session_id))
    await cb.answer()

@router.callback_query(F.data == "hw:reset")
async def cb_hw_reset_info(cb: CallbackQuery):
    await cb.message.edit_text("–°–±—Ä–æ—Å –æ—Ç–º–µ—Ç–æ–∫ ‚Äî —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∑–∞–≥–ª—É—à–∫–∞. –†–µ–∞–ª–∏–∑—É–µ–º –ø–æ—Å–ª–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è.",
                               reply_markup=homework_menu_markup())
    await cb.answer()
