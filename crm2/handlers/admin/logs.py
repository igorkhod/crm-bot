# crm2/handlers/admin/logs.py
"""
–ú–æ–¥—É–ª—å logs.py - –ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ —Ä–∞—Å—Å—ã–ª–æ–∫ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏

–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞—Å—Å—ã–ª–æ–∫
–§—É–Ω–∫—Ü–∏–∏:
- logs_menu_kb - —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –º–µ–Ω—é –ª–æ–≥–æ–≤
- logs_overview - –ø–æ–∫–∞–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ —Å –∏—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π (–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ/–≤—Å–µ–≥–æ/–æ—à–∏–±–∫–∏)
- back_to_admin_panel - –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
"""

from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramBadRequest
import json

from crm2.utils.guards import AdminOnly
from crm2.db.core import get_db_connection

router = Router()
router.message.filter(AdminOnly())
router.callback_query.filter(AdminOnly())


def logs_menu_kb():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –º–µ–Ω—é –ª–æ–≥–æ–≤"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="adm:logs")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="adm:logs_back")],
    ])


def safe_json_parse(json_str: str) -> dict:
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ JSON —Å—Ç—Ä–æ–∫–∏"""
    try:
        return json.loads(json_str) if json_str else {}
    except (json.JSONDecodeError, TypeError):
        return {}


@router.callback_query(F.data == "adm:logs")
async def logs_overview(cb: CallbackQuery):
    """–ü–æ–∫–∞–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ —Å –∏—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
    try:
        with get_db_connection() as con:
            last_bc = con.execute("""
                                  SELECT id,
                                         title,
                                         datetime(COALESCE(sent_at, created_at)) as sent_time,
                                         COALESCE(stats_json, '{}')              as stats
                                  FROM broadcasts
                                  ORDER BY COALESCE(sent_at, created_at) DESC LIMIT 5
                                  """).fetchall()

        if not last_bc:
            await cb.message.answer("üìä –ü–æ–∫–∞ –Ω–µ—Ç –ª–æ–≥–æ–≤ —Ä–∞—Å—Å—ã–ª–æ–∫.", reply_markup=logs_menu_kb())
            await cb.answer()
            return

        lines = ["üìä **–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏:**\n"]
        for bid, title, sent_time, stats_json in last_bc:
            stats = safe_json_parse(stats_json)
            sent_count = stats.get('sent', 0)
            total_count = stats.get('total', 0)
            failed_count = stats.get('failed', 0)

            status_emoji = "‚úÖ" if sent_count == total_count and total_count > 0 else "üîÑ"
            lines.append(
                f"{status_emoji} **#{bid}** ‚Ä¢ {title or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}\n"
                f"‚è∞ {sent_time} ‚Ä¢ üì® {sent_count}/{total_count} ‚Ä¢ ‚ùå {failed_count}\n"
            )

        text = "\n".join(lines)

        try:
            await cb.message.edit_text(text, reply_markup=logs_menu_kb())
        except TelegramBadRequest:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await cb.message.answer(text, reply_markup=logs_menu_kb())

        await cb.answer()

    except Exception as e:
        error_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {str(e)}"
        await cb.message.answer(error_text, reply_markup=logs_menu_kb())
        await cb.answer()


@router.callback_query(F.data == "adm:logs_back")
async def back_to_admin_panel(cb: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    try:
        from crm2.handlers.admin.panel import open_admin_menu
        await open_admin_menu(cb.message)
        await cb.answer()
    except Exception as e:
        await cb.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: {str(e)}")
        await cb.answer()