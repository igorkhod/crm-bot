# crm2/handlers/registration.py
from __future__ import annotations

import sqlite3

from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import (
    Message,
    CallbackQuery,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
)
from passlib.hash import bcrypt

from crm2.db.core import get_db_connection
from crm2.db.sqlite import DB_PATH  # noqa: F401  # –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏/—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
from crm2.handlers.consent import has_consent, set_consent, consent_kb, CONSENT_TEXT


router = Router()
DEBUG_MODE = False  # –≤ –ø—Ä–æ–¥–µ –¥–µ—Ä–∂–∞—Ç—å False

NO_COHORT = "–ë–µ–∑ –ø–æ—Ç–æ–∫–∞"


# ===================== FSM =====================
class RegistrationFSM(StatesGroup):
    consent = State()           # –∂–¥—ë–º —Å–æ–≥–ª–∞—Å–∏—è
    full_name = State()
    nickname = State()
    password = State()
    password_confirm = State()
    cohort = State()
    debug_tg_id = State()       # –∫–∞–∫ –±—ã–ª–æ


# ================== helpers ====================
def _ensure_min_schema() -> None:
    """
    –°–æ–∑–¥–∞—ë—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã (users, cohorts, participants), –µ—Å–ª–∏ –∏—Ö –µ—â—ë –Ω–µ—Ç.
    –≠—Ç–æ –∑–∞—â–∏—â–∞–µ—Ç –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –Ω–∞ Render –æ—Ç –æ—à–∏–±–æ–∫ 'no such table: ...'.
    """
    with get_db_connection() as conn:
        cur = conn.cursor()
        # users
        cur.execute(
            """
            CREATE TABLE IF NOT EXISTS users (
                id           INTEGER PRIMARY KEY AUTOINCREMENT,
                telegram_id  INTEGER UNIQUE,
                username     TEXT,
                nickname     TEXT UNIQUE,
                password     TEXT,
                full_name    TEXT,
                role         TEXT DEFAULT 'user',
                phone        TEXT,
                email        TEXT,
                events       TEXT,
                participants TEXT,
                cohort_id    INTEGER
            )
            """
        )
        # participants (–ø—Ä–∏–≤—è–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –ø–æ—Ç–æ–∫—É)
        cur.execute(
            """
            CREATE TABLE IF NOT EXISTS participants (
                id         INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id    INTEGER UNIQUE,
                cohort_id  INTEGER,
                stream_id  INTEGER,
                created_at TEXT DEFAULT CURRENT_TIMESTAMP
            )
            """
        )
        # cohorts
        cur.execute(
            """
            CREATE TABLE IF NOT EXISTS cohorts (
                id   INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT UNIQUE NOT NULL
            )
            """
        )
        conn.commit()


def get_user_by_tg_id(tg_id: int) -> dict | None:
    with get_db_connection() as conn:
        conn.row_factory = sqlite3.Row
        cur = conn.cursor()
        cur.execute("SELECT * FROM users WHERE telegram_id = ?", (tg_id,))
        row = cur.fetchone()
    return dict(row) if row else None


def get_cohorts() -> list[tuple[int, str]]:
    with get_db_connection() as conn:
        cur = conn.cursor()
        cur.execute("SELECT id, name FROM cohorts ORDER BY id")
        rows = cur.fetchall()
    return rows  # [(id, name), ...]


def nickname_exists(nickname: str) -> bool:
    with get_db_connection() as conn:
        cur = conn.cursor()
        cur.execute("SELECT 1 FROM users WHERE nickname = ?", (nickname,))
        return cur.fetchone() is not None


def resolve_telegram_id(message: Message, data: dict) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç telegram_id –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ë–î."""
    if DEBUG_MODE and data.get("fake_telegram_id"):
        return int(data["fake_telegram_id"])
    return message.from_user.id


def _is_reg(text: str | None) -> bool:
    """–ú—è–≥–∫–∏–π —Ñ–∏–ª—å—Ç—Ä: –ª–æ–≤–∏—Ç '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', '‚úèÔ∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', '–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è' –∏ —Ç.–ø."""
    if not text:
        return False
    t = ''.join(ch for ch in text.casefold() if ch.isalnum() or ch.isspace()).strip()
    return t.startswith("—Ä–µ–≥–∏—Å—Ç") or t.startswith("–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä") or "register" in t


# ================ handlers =====================
# –°—Ç–∞—Ä—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ‚Äî –ª–æ–≤–∏–º –∫–Ω–æ–ø–∫—É/—Ç–µ–∫—Å—Ç/–∫–æ–º–∞–Ω–¥—É
@router.message(StateFilter(None), Command("register"))
@router.message(StateFilter(None), F.text.func(_is_reg))
@router.message(StateFilter(None), F.text.in_({"üÜï –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"}))
@router.message(StateFilter(None), F.text.func(lambda t: isinstance(t, str) and any(s in t.lower() for s in ("—Ä–µ–≥–∏—Å—Ç", "–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä"))))
@router.message(StateFilter(None), Command("register"))
async def start_registration(message: Message, state: FSMContext):
    _ensure_min_schema()

    # –¢—Ä–µ–±—É–µ–º —Å–æ–≥–ª–∞—Å–∏–µ: –±–µ–∑ –Ω–µ–≥–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –∂–¥—ë–º ¬´–°–æ–≥–ª–∞—à–∞—é—Å—å¬ª
    if not has_consent(message.from_user.id):
        await state.set_state(RegistrationFSM.consent)
        await message.answer(CONSENT_TEXT, reply_markup=consent_kb())
        return

    # –°–æ–≥–ª–∞—Å–∏–µ —É–∂–µ –µ—Å—Ç—å ‚Üí –æ–±—ã—á–Ω—ã–π —Å—Ç–∞—Ä—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    await state.clear()

    already = get_user_by_tg_id(message.from_user.id)
    if already and not DEBUG_MODE:
        kb = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üîê –í–æ–π—Ç–∏")]],
            resize_keyboard=True,
        )
        await message.answer(
            "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–∂–º–∏—Ç–µ ¬´üîê –í–æ–π—Ç–∏¬ª –∏ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å.",
            reply_markup=kb,
        )
        return

    await state.set_state(RegistrationFSM.full_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:", reply_markup=ReplyKeyboardRemove())

    # –°–æ–≥–ª–∞—Å–∏–µ —É–∂–µ –µ—Å—Ç—å ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    await state.clear()
    await state.set_state(RegistrationFSM.full_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:", reply_markup=ReplyKeyboardRemove())


@router.message(RegistrationFSM.consent, F.text == "–°–æ–≥–ª–∞—à–∞—é—Å—å")
async def reg_consent_agree(message: Message, state: FSMContext):
    set_consent(message.from_user.id, True)
    await state.set_state(RegistrationFSM.full_name)
    await message.answer("–°–ø–∞—Å–∏–±–æ! –ü—Ä–æ–¥–æ–ª–∂–∏–º.\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:", reply_markup=ReplyKeyboardRemove())


# –ù–∞ –±—É–¥—É—â–µ–µ: –µ—Å–ª–∏ —Å–¥–µ–ª–∞–µ—à—å inline-–∫–Ω–æ–ø–∫—É —Å callback_data="registration:start"
@router.callback_query(StateFilter(None), F.data.startswith("registration:"))
@router.callback_query(StateFilter(None), F.data.startswith("registration:"))
async def registration_start_cb(cb: CallbackQuery, state: FSMContext):
    _ensure_min_schema()

    # –ß–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫—É —Ç–æ–∂–µ —Ç—Ä–µ–±—É–µ–º —Å–æ–≥–ª–∞—Å–∏–µ
    if not has_consent(cb.from_user.id):
        await state.set_state(RegistrationFSM.consent)
        await cb.answer()  # –∑–∞–∫—Ä—ã—Ç—å ¬´—á–∞—Å–∏–∫–∏¬ª
        await cb.message.answer(CONSENT_TEXT, reply_markup=consent_kb())
        return

    await cb.answer()
    await state.clear()
    await state.set_state(RegistrationFSM.full_name)
    await cb.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:", reply_markup=ReplyKeyboardRemove())


@router.message(RegistrationFSM.full_name)
async def reg_full_name(message: Message, state: FSMContext):
    full_name = (message.text or "").strip()
    if len(full_name) < 3:
        await message.answer("–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ. –í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é:")
        return
    await state.update_data(full_name=full_name)
    await state.set_state(RegistrationFSM.nickname)
    await message.answer("–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –Ω–∏–∫–Ω–µ–π–º –¥–ª—è –≤—Ö–æ–¥–∞:")


@router.message(RegistrationFSM.nickname)
async def reg_nickname(message: Message, state: FSMContext):
    nickname = (message.text or "").strip()
    if len(nickname) < 3:
        await message.answer("–ù–∏–∫ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π:")
        return

    if nickname_exists(nickname):
        await state.clear()
        await message.answer(
            "‚ùå –¢–∞–∫–æ–π –Ω–∏–∫ —É–∂–µ –∑–∞–Ω—è—Ç.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ: /start ‚Üí ¬´–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è¬ª.",
            reply_markup=ReplyKeyboardRemove(),
        )
        return

    await state.update_data(nickname=nickname)
    await state.set_state(RegistrationFSM.password)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")


@router.message(RegistrationFSM.password)
async def reg_password(message: Message, state: FSMContext):
    pwd = (message.text or "").strip()
    if len(pwd) < 6:
        await message.answer("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 6 —Å–∏–º–≤–æ–ª–æ–≤. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    await state.update_data(password=pwd)
    await state.set_state(RegistrationFSM.password_confirm)
    await message.answer("–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")


@router.message(RegistrationFSM.password_confirm)
async def reg_password_confirm(message: Message, state: FSMContext):
    confirm = (message.text or "").strip()
    data = await state.get_data()
    if confirm != data.get("password", ""):
        await message.answer("‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –µ—â—ë —Ä–∞–∑:")
        await state.set_state(RegistrationFSM.password)
        return

    await state.set_state(RegistrationFSM.cohort)

    cohorts = get_cohorts()
    rows: list[list[KeyboardButton]] = [[KeyboardButton(text=name)] for _, name in cohorts]
    rows.append([KeyboardButton(text=NO_COHORT)])

    kb = ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ç–æ–∫:", reply_markup=kb)


@router.message(RegistrationFSM.cohort)
async def reg_cohort(message: Message, state: FSMContext):
    choice = (message.text or "").strip()

    cohorts = get_cohorts()
    name_to_id = {name: cid for cid, name in cohorts}

    if choice.lower() == NO_COHORT.lower():
        cohort_id = None
        cohort_name = NO_COHORT
    elif choice in name_to_id:
        cohort_id = name_to_id[choice]
        cohort_name = choice
    else:
        await message.answer("‚ùå –¢–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    data = await state.get_data()
    tg_id = resolve_telegram_id(message, data)
    password_hash = bcrypt.hash(data["password"])

    with get_db_connection() as conn:
        cur = conn.cursor()

        # —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –ø–æ telegram_id
        cur.execute(
            """
            UPDATE users
            SET full_name = ?,
                nickname  = ?,
                password  = ?,
                cohort_id = ?,
                role      = COALESCE(role, 'user')
            WHERE telegram_id = ?
            """,
            (data["full_name"], data["nickname"], password_hash, cohort_id, tg_id),
        )

        # –µ—Å–ª–∏ –Ω–µ –∑–∞—Ü–µ–ø–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ ‚Äî —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é
        if cur.rowcount == 0:
            cur.execute(
                """
                INSERT INTO users (telegram_id, username, nickname, password, full_name, role, cohort_id)
                VALUES (?, ?, ?, ?, ?, 'user', ?)
                """,
                (tg_id, data["nickname"], data["nickname"], password_hash, data["full_name"], cohort_id),
            )

        # —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–æ—Ç–æ–∫–æ–º
        cur.execute(
            """
            INSERT INTO participants (user_id, cohort_id)
            SELECT id, ?
            FROM users
            WHERE telegram_id = ?
            ON CONFLICT(user_id) DO UPDATE SET cohort_id = excluded.cohort_id
            """,
            (cohort_id, tg_id),
        )

        conn.commit()

    await state.clear()
    text = (
        f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {data['full_name']}.\n"
        f"–ü–æ—Ç–æ–∫: {cohort_name}\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É:"
    )
    kb_login = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üîê –í–æ–π—Ç–∏")]],
        resize_keyboard=True,
    )
    await message.answer(text, reply_markup=kb_login)


@router.message(Command("cancel"))
async def cancel(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
        reply_markup=ReplyKeyboardRemove(),
    )
