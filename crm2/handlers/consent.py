# crm2/handlers/consent.py
from __future__ import annotations

import sqlite3
from pathlib import Path
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command

router = Router(name="consent")


def get_db_connection():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î"""
    db_path = Path(__file__).resolve().parent.parent / "data" / "crm.db"
    return sqlite3.connect(db_path)


@router.message(F.text.func(lambda t: t and t.lower() in {"—Å–æ–≥–ª–∞—Å–∏–µ", "–¥–∞—é —Å–æ–≥–ª–∞—Å–∏–µ", "consent"}))
@router.callback_query(F.data == "accept_consent")
async def accept_consent(update: Message | CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–≥–ª–∞—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∑–∞–ø–∏—Å—å—é –≤ –ë–î"""
    user_id = update.from_user.id

    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ —Å–æ–≥–ª–∞—Å–∏—è –≤ –±–∞–∑–µ
        cursor.execute(
            "UPDATE users SET consent_given = 1, consent_date = CURRENT_TIMESTAMP WHERE telegram_id = ?",
            (user_id,)
        )

        if cursor.rowcount > 0:
            conn.commit()
            success_text = "‚úÖ –í–∞—à–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ."
        else:
            success_text = "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."

        conn.close()

    except Exception as e:
        success_text = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–≥–ª–∞—Å–∏—è."
        print(f"Database error: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    if isinstance(update, CallbackQuery):
        await update.message.answer(success_text)
        await update.answer()
    else:
        await update.answer(success_text)


@router.message(Command("consent"))
async def consent_info(message: Message):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–≥–ª–∞—Å–∏–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ /consent"""
    await message.answer(
        "üìã **–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö**\n\n"
        "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π Psytech CRM –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–∞—à–µ —Å–æ–≥–ª–∞—Å–∏–µ "
        "–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–°–æ–≥–ª–∞—Å–∏–µ' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
        reply_markup=create_consent_keyboard()
    )


def create_consent_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–≥–ª–∞—Å–∏—è"""
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

    return InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(text="‚úÖ –î–∞—é —Å–æ–≥–ª–∞—Å–∏–µ", callback_data="accept_consent")
        ]]
    )
