# crm2/handlers/admin_db_doctor.py
from __future__ import annotations

import sqlite3
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton

from crm2.db.sqlite import DB_PATH

router = Router(name="admin_db_doctor")


# --- –ü—É–±–ª–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä—É—é –≤—ã–∑—ã–≤–∞–µ—Ç admin/panel.py -----------------------
async def show_menu(message: Message) -> None:
    """
    –†–∏—Å—É–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é DB Doctor (–∫–Ω–æ–ø–æ—á–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞).
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ admin/panel.py -> admin_dbdoctor_entry(...)
    """
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ë–î"), KeyboardButton(text="üõ† –ò—Å–ø—Ä–∞–≤–∏—Ç—å sessions")],
            [KeyboardButton(text="üìÇ –ò–Ω–¥–µ–∫—Å—ã"), KeyboardButton(text="‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")],
        ],
        resize_keyboard=True,
    )
    await message.answer("ü©∫ DB Doctor ‚Äî –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è:", reply_markup=kb)


# --- –î—É–±–ª–∏—Ä—É–µ–º –≤—Ö–æ–¥ –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–Ω–æ–ø–∫–µ, –µ—Å–ª–∏ –∑–∞–π–¥—É—Ç –Ω–∞–ø—Ä—è–º—É—é -----------------
@router.message(F.text == "ü©∫ DB Doctor")
async def db_doctor_menu(message: Message):
    await show_menu(message)


# --- –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π ---------------------------------------
@router.message(Command("db_sessions_info"))
async def db_sessions_info_cmd(message: Message):
    await db_sessions_info(message)

@router.message(Command("db_fix_cohort"))
async def db_fix_cohort_cmd(message: Message):
    await db_fix_cohort(message)


# --- –î–µ–π—Å—Ç–≤–∏—è –º–µ–Ω—é -------------------------------------------------------------
@router.message(F.text == "üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ë–î")
async def db_sessions_info(message: Message):
    with sqlite3.connect(DB_PATH) as con:
        con.row_factory = sqlite3.Row
        cols = con.execute("PRAGMA table_info(sessions);").fetchall()
        cnt = con.execute("SELECT COUNT(*) AS c FROM sessions;").fetchone()["c"]

        def safe_count_distinct(col: str):
            try:
                row = con.execute(f"SELECT COUNT(DISTINCT {col}) AS n FROM sessions;").fetchone()
                return row["n"]
            except Exception:
                return "‚Äî"

        has_stream = any(c["name"] == "stream_id" for c in cols)
        has_cohort = any(c["name"] == "cohort_id" for c in cols)
        ds = safe_count_distinct("stream_id")
        dc = safe_count_distinct("cohort_id")

    lines = [
        "üìä *sessions* ‚Äî —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:",
        *(f"‚Ä¢ {c['cid']}: {c['name']}  {c['type']}" for c in cols),
        "",
        f"–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: *{cnt}*",
        f"–ï—Å—Ç—å stream_id: *{has_stream}*  |  –ï—Å—Ç—å cohort_id: *{has_cohort}*",
        f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö stream_id: *{ds}*  |  –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö cohort_id: *{dc}*",
        "",
        "–ü–æ–¥—Å–∫–∞–∑–∫–∞: –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´üõ† –ò—Å–ø—Ä–∞–≤–∏—Ç—å sessions¬ª",
    ]
    await message.answer("\n".join(lines), parse_mode="Markdown")


@router.message(F.text == "üõ† –ò—Å–ø—Ä–∞–≤–∏—Ç—å sessions")
async def db_fix_cohort(message: Message):
    with sqlite3.connect(DB_PATH) as con:
        cur = con.cursor()
        cols = cur.execute("PRAGMA table_info(sessions);").fetchall()
        names = {c[1] for c in cols}  # c[1] = name

        # 1) –¥–æ–±–∞–≤–∏—Ç—å cohort_id, –µ—Å–ª–∏ –Ω–µ—Ç
        if "cohort_id" not in names:
            cur.execute("ALTER TABLE sessions ADD COLUMN cohort_id INTEGER;")

        # 2) –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ stream_id (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if "stream_id" in names:
            cur.execute("""
                UPDATE sessions
                SET cohort_id = stream_id
                WHERE cohort_id IS NULL AND stream_id IS NOT NULL;
            """)

        # 3) –∏–Ω–¥–µ–∫—Å –ø–æ –Ω–æ–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ
        cur.execute("""
            CREATE INDEX IF NOT EXISTS idx_sessions_cohort_start
            ON sessions(cohort_id, start_date);
        """)

        # 4) —É–±—Ä–∞—Ç—å —Å—Ç–∞—Ä—ã–π –∏–Ω–¥–µ–∫—Å (–µ—Å–ª–∏ –±—ã–ª)
        cur.execute("DROP INDEX IF EXISTS idx_sessions_stream_start;")

        con.commit()

    await message.answer("‚úÖ –ì–æ—Ç–æ–≤–æ: cohort_id –¥–æ–±–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª—ë–Ω, –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã, –∏–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω.")


@router.message(F.text == "üìÇ –ò–Ω–¥–µ–∫—Å—ã")
async def db_show_indexes(message: Message):
    with sqlite3.connect(DB_PATH) as con:
        rows = con.execute("PRAGMA index_list(sessions);").fetchall()
    if not rows:
        await message.answer("–ù–µ—Ç –∏–Ω–¥–µ–∫—Å–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ sessions.")
    else:
        text = "üìÇ *–ò–Ω–¥–µ–∫—Å—ã sessions*:\n" + "\n".join(str(r) for r in rows)
        await message.answer(text, parse_mode="Markdown")
