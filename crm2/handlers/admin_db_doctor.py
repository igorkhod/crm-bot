# crm2/handlers/admin_db_doctor.py
"""
–•–µ–Ω–¥–ª–µ—Ä—ã —Ä–∞–∑–¥–µ–ª–∞ ü©∫ DB Doctor.
–°–º–æ—Ç—Ä–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î –∏ —á–∏–Ω–∏–º —Ç–∏–ø–æ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã.
"""

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message
import sqlite3
from pathlib import Path
from crm2.db import auto_migrate

router = Router(name="admin_db_doctor")

# –¢–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫
BTN_STRUCT = "üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ë–î"
BTN_FIX = "üõ† –ò—Å–ø—Ä–∞–≤–∏—Ç—å sessions"
BTN_INDEXES = "üìÇ –ò–Ω–¥–µ–∫—Å—ã"
BTN_BACK = "‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"

DB_PATH = Path("crm.db")   # –ø–æ–ø—Ä–∞–≤—å –ø—É—Ç—å, –µ—Å–ª–∏ —É —Ç–µ–±—è –¥—Ä—É–≥–æ–π


# ---------- –ú–µ–Ω—é DB Doctor ----------
async def show_menu(message: Message):
    from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=BTN_STRUCT)],
            [KeyboardButton(text=BTN_FIX)],
            [KeyboardButton(text=BTN_INDEXES)],
            [KeyboardButton(text=BTN_BACK)],
        ],
        resize_keyboard=True
    )
    await message.answer("ü©∫ DB Doctor ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)


# ---------- üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ë–î ----------
# –¢—Ä–∏ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ –æ–¥–Ω—É —Ñ—É–Ω–∫—Ü–∏—é: 2 –ø–æ —Ç–µ–∫—Å—Ç—É, 1 –ø–æ –∫–æ–º–∞–Ω–¥–µ
@router.message(F.text.startswith("üìä"))
@router.message(F.text.contains("—Ç—Ä—É–∫—Ç—É—Ä"))
@router.message(Command("db_sessions_info"))
async def action_sessions_info(message: Message):
    try:
        con = sqlite3.connect(DB_PATH)
        cur = con.cursor()
        cur.execute("PRAGMA table_info(sessions);")
        cols = cur.fetchall()
        cur.execute("SELECT COUNT(*) FROM sessions;")
        count = cur.fetchone()[0]
        con.close()

        lines = [ "üìä –¢–∞–±–ª–∏—Ü–∞ sessions:" ]
        for col in cols:
            lines.append(f"- {col[1]} ({col[2]})")
        lines.append(f"\n–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {count}")
        await message.answer("\n".join(lines))
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")


# ---------- üõ† –ò—Å–ø—Ä–∞–≤–∏—Ç—å sessions ----------
@router.message(F.text.startswith("üõ†"))
@router.message(F.text.contains("–ø—Ä–∞–≤–∏—Ç—å"))
@router.message(F.text.contains("sessions"))
@router.message(Command("db_fix_cohort"))
async def action_fix_sessions(message: Message):
    try:
        con = sqlite3.connect(DB_PATH)
        auto_migrate.ensure_topics_and_session_days(con)
        con.close()
        await message.answer("‚úÖ –ì–æ—Ç–æ–≤–æ: cohort_id –¥–æ–±–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª—ë–Ω, –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã, –∏–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")


# ---------- üìÇ –ò–Ω–¥–µ–∫—Å—ã ----------
@router.message(F.text.startswith("üìÇ"))
@router.message(F.text.contains("–Ω–¥–µ–∫—Å"))
@router.message(Command("db_indexes"))
async def action_indexes(message: Message):
    try:
        con = sqlite3.connect(DB_PATH)
        cur = con.cursor()
        cur.execute("PRAGMA index_list(sessions);")
        idx = cur.fetchall()
        con.close()

        if not idx:
            await message.answer("‚ùå –ò–Ω–¥–µ–∫—Å—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
            return

        lines = ["üìÇ –ò–Ω–¥–µ–∫—Å—ã —Ç–∞–±–ª–∏—Ü—ã sessions:"]
        for row in idx:
            # row: (seq, name, unique, origin, partial)
            lines.append(f"- {row[1]} (unique={row[2]})")
        await message.answer("\n".join(lines))
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")


# ---------- ‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ----------
@router.message(F.text == BTN_BACK)
async def back_to_main(message: Message):
    from crm2.keyboards import role_kb
    from crm2.db.users import get_user_by_tg

    user = await get_user_by_tg(message.from_user.id)
    role = (user or {}).get("role", "user")
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=role_kb(role))
