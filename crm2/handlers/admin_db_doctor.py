# crm2/handlers/admin_db_doctor.py
# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –ú–∏–Ω–∏-–ø–∞–Ω–µ–ª—å –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ —Ä–µ–º–æ–Ω—Ç–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
# –§—É–Ω–∫—Ü–∏–∏:
# - show_menu - –ü–æ–∫–∞–∑ –º–µ–Ω—é DB Doctor —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
# - action_sessions_info - –ü–æ–∫–∞–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã sessions
# - action_fix_sessions - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã sessions (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ cohort_id)
# - action_indexes - –ü–æ–∫–∞–∑ –∏–Ω–¥–µ–∫—Å–æ–≤ —Ç–∞–±–ª–∏—Ü—ã sessions
# - action_become_guest - –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã (—Å—Ç–∞—Ç—å –≥–æ—Å—Ç–µ–º)
# - action_become_user2 - –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ user —Å –∫–æ–≥–æ—Ä—Ç–æ–π 2
# - back_to_main - –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
"""
ü©∫ DB Doctor ‚Äî –º–∏–Ω–∏-–ø–∞–Ω–µ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏/—Ä–µ–º–æ–Ω—Ç–∞ –ë–î.
–ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä –ë–î, —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞—Ç—å —Ä–æ–≤–Ω–æ —Å —Ç–æ–π –∂–µ –±–∞–∑–æ–π, —á—Ç–æ –∏ –≤–µ—Å—å –±–æ—Ç.
"""

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from crm2.db.users import get_db_connection   # –í–ê–ñ–ù–û: –µ–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
from crm2.db import auto_migrate
import sqlite3

router = Router(name="admin_db_doctor")

# –¢–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫
BTN_STRUCT = "üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ë–î"
BTN_FIX = "üõ† –ò—Å–ø—Ä–∞–≤–∏—Ç—å sessions"
BTN_INDEXES = "üìÇ –ò–Ω–¥–µ–∫—Å—ã"
BTN_BACK = "‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
BTN_BECOME_GUEST = "üôà –°—Ç–∞—Ç—å –≥–æ—Å—Ç–µ–º"
BTN_BECOME_USER2 = "üë§ –°—Ç–∞—Ç—å user –ø–æ—Ç–æ–∫ 2"


async def show_menu(message: Message):
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=BTN_STRUCT), KeyboardButton(text=BTN_FIX)],
            [KeyboardButton(text=BTN_INDEXES), KeyboardButton(text=BTN_BACK)],
            [KeyboardButton(text=BTN_BECOME_GUEST), KeyboardButton(text=BTN_BECOME_USER2)],
        ],
        resize_keyboard=True,
    )
    await message.answer("ü©∫ DB Doctor ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)


# ---------- üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ë–î ----------
@router.message(F.text.startswith("üìä"))
@router.message(F.text.contains("—Ç—Ä—É–∫—Ç—É—Ä"))
@router.message(Command("db_sessions_info"))
async def action_sessions_info(message: Message):
    try:
        with get_db_connection() as con:
            con.row_factory = sqlite3.Row
            cur = con.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='sessions';")
            t = cur.fetchone()
            if not t:
                await message.answer("‚ùå –¢–∞–±–ª–∏—Ü–∞ <b>sessions</b> –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
                return

            cur = con.execute("PRAGMA table_info(sessions);")
            cols = cur.fetchall()
            cur = con.execute("SELECT COUNT(*) AS c FROM sessions;")
            count = cur.fetchone()["c"]

        lines = ["üìä –¢–∞–±–ª–∏—Ü–∞ <b>sessions</b>:"]
        for col in cols:
            # PRAGMA table_info: (cid, name, type, notnull, dflt_value, pk)
            lines.append(f"- {col['name']} ({col['type']})")
        lines.append(f"\n–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: <b>{count}</b>")
        await message.answer("\n".join(lines))
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")


# ---------- üõ† –ò—Å–ø—Ä–∞–≤–∏—Ç—å sessions ----------
@router.message(F.text.startswith("üõ†"))
@router.message(F.text.contains("–ø—Ä–∞–≤–∏—Ç—å"))
@router.message(F.text.contains("sessions"))
@router.message(Command("db_fix_cohort"))
async def action_fix_sessions(message: Message):
    try:
        with get_db_connection() as con:
            auto_migrate.ensure_topics_and_session_days(con)
            con.commit()
        await message.answer("‚úÖ –ì–æ—Ç–æ–≤–æ: <b>cohort_id</b> –¥–æ–±–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª—ë–Ω, –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã, –∏–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")


# ---------- üìÇ –ò–Ω–¥–µ–∫—Å—ã ----------
@router.message(F.text.startswith("üìÇ"))
@router.message(F.text.contains("–Ω–¥–µ–∫—Å"))
@router.message(Command("db_indexes"))
async def action_indexes(message: Message):
    try:
        with get_db_connection() as con:
            con.row_factory = sqlite3.Row
            cur = con.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='sessions';")
            t = cur.fetchone()
            if not t:
                await message.answer("‚ùå –¢–∞–±–ª–∏—Ü–∞ <b>sessions</b> –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
                return

            cur = con.execute("PRAGMA index_list('sessions');")
            idx = cur.fetchall()

        if not idx:
            await message.answer("‚ùå –ò–Ω–¥–µ–∫—Å—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
            return

        lines = ["üìÇ –ò–Ω–¥–µ–∫—Å—ã —Ç–∞–±–ª–∏—Ü—ã <b>sessions</b>:"]
        for row in idx:
            # (seq, name, unique, origin, partial) ‚Äî –æ–±—Ä–∞—â–∞–µ–º—Å—è –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º
            lines.append(f"- {row[1]} (unique={row[2]})")
        await message.answer("\n".join(lines))
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")

# ---------- üôà –°—Ç–∞—Ç—å –≥–æ—Å—Ç–µ–º ----------
@router.message(F.text == BTN_BECOME_GUEST)
async def action_become_guest(message: Message):
    try:
        with get_db_connection() as con:
            con.execute("DELETE FROM users WHERE telegram_id=?;", (message.from_user.id,))
            con.commit()
        await message.answer("‚úÖ –í—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã (–≥–æ—Å—Ç—å).")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")


# ---------- üë§ –°—Ç–∞—Ç—å user –ø–æ—Ç–æ–∫ 2 ----------
@router.message(F.text == BTN_BECOME_USER2)
async def action_become_user2(message: Message):
    try:
        tg_id = message.from_user.id
        with get_db_connection() as con:
            # –°–æ–∑–¥–∞—ë–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ (–ø–æ—Å–ª–µ ¬´–°—Ç–∞—Ç—å –≥–æ—Å—Ç–µ–º¬ª)
            con.execute(
                "INSERT OR IGNORE INTO users (telegram_id, role, full_name) VALUES (?, 'user', '');",
                (tg_id,),
            )
            con.execute(
                "UPDATE users SET role='user', cohort_id=2 WHERE telegram_id=?;",
                (tg_id,),
            )
            con.commit()
        await message.answer("‚úÖ –í–∞—à–∞ —Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞: user, –ø–æ—Ç–æ–∫ = 2.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")

# ---------- ‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ----------
@router.message(F.text == BTN_BACK)
async def back_to_main(message: Message):
    from crm2.keyboards import role_kb
    from crm2.db.users import get_user_by_tg

    user = get_user_by_tg(message.from_user.id)
    role = (user or {}).get("role", "user")
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=role_kb(role))
