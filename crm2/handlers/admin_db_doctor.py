# crm2/handlers/admin_db_doctor.py
from __future__ import annotations

import sqlite3
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton

from crm2.db.sqlite import DB_PATH

router = Router(name="admin_db_doctor")


# ---------- —É—Ç–∏–ª–∏—Ç—ã ------------------------------------------------------------
def _txt(s: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏/—Å–æ–æ–±—â–µ–Ω–∏—è (—É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã, –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É)."""
    return " ".join((s or "").strip().split()).lower()

BTN_MENU     = "ü©∫ db doctor"
BTN_STRUCT   = "üìä —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–¥"
BTN_FIX      = "üõ† –∏—Å–ø—Ä–∞–≤–∏—Ç—å sessions"
BTN_INDEXES  = "üìÇ –∏–Ω–¥–µ–∫—Å—ã"
BTN_BACK     = "‚Ü©Ô∏è –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"


# ---------- –º–µ–Ω—é ---------------------------------------------------------------
async def show_menu(message: Message) -> None:
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ë–î"), KeyboardButton(text="üõ† –ò—Å–ø—Ä–∞–≤–∏—Ç—å sessions")],
            [KeyboardButton(text="üìÇ –ò–Ω–¥–µ–∫—Å—ã"),      KeyboardButton(text="‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")],
        ],
        resize_keyboard=True,
    )
    await message.answer("ü©∫ DB Doctor ‚Äî –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è:", reply_markup=kb)


@router.message(F.text.func(lambda t: _txt(t) == BTN_MENU))
async def db_doctor_menu(message: Message):
    await show_menu(message)


# ---------- –∫–æ–º–∞–Ω–¥—ã-–¥—É–±–ª—ë—Ä—ã ---------------------------------------------------
@router.message(Command("db_sessions_info"))
async def cmd_sessions_info(message: Message):
    await action_sessions_info(message)

@router.message(Command("db_fix_cohort"))
async def cmd_fix_cohort(message: Message):
    await action_fix_sessions(message)

@router.message(Command("db_indexes"))
async def cmd_indexes(message: Message):
    await action_indexes(message)


# ---------- –¥–µ–π—Å—Ç–≤–∏—è (–ø–æ –∫–Ω–æ–ø–∫–∞–º/—Ç–µ–∫—Å—Ç—É) --------------------------------------
@router.message(F.text.func(lambda t: _txt(t) == BTN_STRUCT) | F.text.func(lambda t: _txt(t) == "—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–¥"))
async def action_sessions_info(message: Message):
    with sqlite3.connect(DB_PATH) as con:
        con.row_factory = sqlite3.Row
        cols = con.execute("PRAGMA table_info(sessions);").fetchall()
        cnt  = con.execute("SELECT COUNT(*) AS c FROM sessions;").fetchone()["c"]

        def safe_count(col: str):
            try:
                return con.execute(f"SELECT COUNT(DISTINCT {col}) AS n FROM sessions;").fetchone()["n"]
            except Exception:
                return "‚Äî"

        has_stream = any(c["name"] == "stream_id" for c in cols)
        has_cohort = any(c["name"] == "cohort_id" for c in cols)

    lines = [
        "üìä *sessions* ‚Äî —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:",
        *(f"‚Ä¢ {c['cid']}: {c['name']}  {c['type']}" for c in cols),
        "",
        f"–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: *{cnt}*",
        f"–ï—Å—Ç—å stream_id: *{has_stream}*  |  –ï—Å—Ç—å cohort_id: *{has_cohort}*",
        f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö stream_id: *{safe_count('stream_id')}*  |  –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö cohort_id: *{safe_count('cohort_id')}*",
        "",
        "–ü–æ–¥—Å–∫–∞–∑–∫–∞: –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´üõ† –ò—Å–ø—Ä–∞–≤–∏—Ç—å sessions¬ª.",
    ]
    await message.answer("\n".join(lines), parse_mode="Markdown")


@router.message(F.text.func(lambda t: _txt(t) == BTN_FIX) | F.text.func(lambda t: _txt(t) == "–∏—Å–ø—Ä–∞–≤–∏—Ç—å sessions"))
async def action_fix_sessions(message: Message):
    with sqlite3.connect(DB_PATH) as con:
        cur = con.cursor()
        names = {c[1] for c in cur.execute("PRAGMA table_info(sessions);").fetchall()}

        if "cohort_id" not in names:
            cur.execute("ALTER TABLE sessions ADD COLUMN cohort_id INTEGER;")

        if "stream_id" in names:
            cur.execute("""
                UPDATE sessions
                SET cohort_id = stream_id
                WHERE cohort_id IS NULL AND stream_id IS NOT NULL;
            """)

        cur.execute("""
            CREATE INDEX IF NOT EXISTS idx_sessions_cohort_start
            ON sessions(cohort_id, start_date);
        """)
        cur.execute("DROP INDEX IF EXISTS idx_sessions_stream_start;")
        con.commit()

    await message.answer("‚úÖ –ì–æ—Ç–æ–≤–æ: cohort_id –¥–æ–±–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª—ë–Ω, –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã, –∏–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω.")


@router.message(F.text.func(lambda t: _txt(t) == BTN_INDEXES) | F.text.func(lambda t: _txt(t) == "–∏–Ω–¥–µ–∫—Å—ã"))
async def action_indexes(message: Message):
    with sqlite3.connect(DB_PATH) as con:
        rows = con.execute("PRAGMA index_list(sessions);").fetchall()
    if not rows:
        await message.answer("–ù–µ—Ç –∏–Ω–¥–µ–∫—Å–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ sessions.")
    else:
        text = "üìÇ *–ò–Ω–¥–µ–∫—Å—ã sessions*:\n" + "\n".join(str(r) for r in rows)
        await message.answer(text, parse_mode="Markdown")


@router.message(F.text.func(lambda t: _txt(t) == BTN_BACK) | F.text.func(lambda t: _txt(t) == "–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
async def action_back_to_main(message: Message):
    # –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –≥–æ—Ç–æ–≤—ã–π —Ä–µ–Ω–¥–µ—Ä –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    from crm2.handlers import info as info_router
    # –≤ info.py (–∏–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º –º–æ–¥—É–ª–µ) –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö—ç–Ω–¥–ª–µ—Ä back_to_main(message)
    try:
        await info_router.back_to_main(message)
    except Exception:
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=None)
