# crm2/handlers/admin_db_doctor.py
"""
–•–µ–Ω–¥–ª–µ—Ä—ã —Ä–∞–∑–¥–µ–ª–∞ ü©∫ DB Doctor
–ü–æ–∑–≤–æ–ª—è—é—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –∏ —á–∏–Ω–∏—Ç—å –æ—à–∏–±–∫–∏.
"""

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message
from crm2.db import auto_migrate
import sqlite3
from pathlib import Path

router = Router(name="admin_db_doctor")

# --- –ö–Ω–æ–ø–∫–∏ ---
BTN_STRUCT = "üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ë–î"
BTN_FIX = "üõ† –ò—Å–ø—Ä–∞–≤–∏—Ç—å sessions"
BTN_INDEXES = "üìÇ –ò–Ω–¥–µ–∫—Å—ã"
BTN_BACK = "‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"

DB_PATH = Path("crm.db")  # –µ—Å–ª–∏ —É —Ç–µ–±—è –ø—É—Ç—å –¥—Ä—É–≥–æ–π, –ø–æ–ø—Ä–∞–≤—å


def _txt(t: str) -> str:
    return (t or "").strip().lower()


# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é DB Doctor ---
async def show_menu(message: Message):
    from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=BTN_STRUCT)],
            [KeyboardButton(text=BTN_FIX)],
            [KeyboardButton(text=BTN_INDEXES)],
            [KeyboardButton(text=BTN_BACK)],
        ],
        resize_keyboard=True
    )
    await message.answer("ü©∫ DB Doctor ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)


# --- –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ë–î ---
@router.message(
    F.text.startswith("üìä") | F.text.contains("—Ç—Ä—É–∫—Ç—É—Ä") | Command("db_sessions_info")
)
async def action_sessions_info(message: Message):
    try:
        con = sqlite3.connect(DB_PATH)
        cur = con.cursor()
        cur.execute("PRAGMA table_info(sessions);")
        cols = cur.fetchall()
        cur.execute("SELECT COUNT(*) FROM sessions;")
        count = cur.fetchone()[0]
        con.close()

        text = "üìä –¢–∞–±–ª–∏—Ü–∞ sessions:\n"
        for col in cols:
            text += f"- {col[1]} ({col[2]})\n"
        text += f"\n–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {count}"
        await message.answer(text)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")


# --- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ sessions ---
@router.message(
    F.text.startswith("üõ†") | F.text.contains("sessions") | Command("db_fix_cohort")
)
async def action_fix_sessions(message: Message):
    try:
        con = sqlite3.connect(DB_PATH)
        auto_migrate.ensure_topics_and_session_days(con)
        con.close()
        await message.answer("‚úÖ –ì–æ—Ç–æ–≤–æ: cohort_id –¥–æ–±–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª—ë–Ω, –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã, –∏–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")


# --- –ò–Ω–¥–µ–∫—Å—ã ---
@router.message(
    F.text.startswith("üìÇ") | F.text.contains("–Ω–¥–µ–∫—Å") | Command("db_indexes")
)
async def action_indexes(message: Message):
    try:
        con = sqlite3.connect(DB_PATH)
        cur = con.cursor()
        cur.execute("PRAGMA index_list(sessions);")
        idx = cur.fetchall()
        con.close()

        if not idx:
            await message.answer("‚ùå –ò–Ω–¥–µ–∫—Å—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
            return

        text = "üìÇ –ò–Ω–¥–µ–∫—Å—ã —Ç–∞–±–ª–∏—Ü—ã sessions:\n"
        for row in idx:
            text += f"- {row[1]} (unique={row[2]})\n"
        await message.answer(text)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")


# --- –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
@router.message(F.text == BTN_BACK)
async def back_to_main(message: Message):
    from crm2.keyboards import role_kb
    from crm2.db.users import get_user_by_tg

    user = await get_user_by_tg(message.from_user.id)
    role = user["role"] if user else "user"
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=role_kb(role))
