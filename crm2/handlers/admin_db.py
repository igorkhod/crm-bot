# crm2/handlers/admin_db.py
# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
# –§—É–Ω–∫—Ü–∏–∏:
# - db_sessions_info - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–∞–±–ª–∏—Ü—ã sessions (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)
# - db_fix_cohort - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã sessions (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ cohort_id, –º–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö)
from __future__ import annotations

import sqlite3
from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message

from crm2.db.sqlite import DB_PATH

# –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–æ—É—Ç–µ—Ä —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è; –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∏–∑ app.py —á–µ—Ä–µ–∑ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π include.

router = Router(name="admin_db")


@router.message(Command("db_sessions_info"))
async def db_sessions_info(message: Message):
    # –£–ü–†–û–©–Å–ù–ù–û: –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏
    with sqlite3.connect(DB_PATH) as con:
        con.row_factory = sqlite3.Row
        cols = con.execute("PRAGMA table_info(sessions);").fetchall()
        cnt = con.execute("SELECT COUNT(*) AS c FROM sessions;").fetchone()["c"]

        # –∞–∫–∫—É—Ä–∞—Ç–Ω–æ —Å—á–∏—Ç–∞–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ–ª—è ‚Äî –µ—Å–ª–∏ —Å—Ç–æ–ª–±—Ü–∞ –Ω–µ—Ç, –Ω–µ –ø–∞–¥–∞–µ–º
        def safe_count_distinct(col: str):
            try:
                row = con.execute(f"SELECT COUNT(DISTINCT {col}) AS n FROM sessions;").fetchone()
                return row["n"]
            except Exception:
                return "‚Äî"

        ds = safe_count_distinct("cohort_id")
        dc = safe_count_distinct("cohort_id")

    lines = [
        "üóÑ *sessions* ‚Äî —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:",
        *(f"‚Ä¢ {c['cid']}: {c['name']}  {c['type']}" for c in cols),
        "",
        f"–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: *{cnt}*",
        f"–ï—Å—Ç—å cohort_id: *{any(c['name']=='cohort_id' for c in cols)}*  |  –ï—Å—Ç—å cohort_id: *{any(c['name']=='cohort_id' for c in cols)}*",
        f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö cohort_id: *{ds}*  |  –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö cohort_id: *{dc}*",
        "",
        "–ü–æ–¥—Å–∫–∞–∑–∫–∞: –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /db_fix_cohort",
    ]
    await message.answer("\n".join(lines), parse_mode="Markdown")


@router.message(Command("db_fix_cohort"))
async def db_fix_cohort(message: Message):
    # –£–ü–†–û–©–Å–ù–ù–û: –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏
    with sqlite3.connect(DB_PATH) as con:
        cur = con.cursor()
        cols = cur.execute("PRAGMA table_info(sessions);").fetchall()
        names = {c[1] for c in cols}  # c[1] = name

        # 1) –¥–æ–±–∞–≤–∏—Ç—å cohort_id, –µ—Å–ª–∏ –Ω–µ—Ç
        if "cohort_id" not in names:
            cur.execute("ALTER TABLE sessions ADD COLUMN cohort_id INTEGER;")

        # 2) –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ cohort_id (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if "cohort_id" in names:
            cur.execute("""
                UPDATE sessions
                SET cohort_id = cohort_id
                WHERE cohort_id IS NULL AND cohort_id IS NOT NULL;
            """)

        # 3) –∏–Ω–¥–µ–∫—Å –ø–æ –Ω–æ–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ
        cur.execute("""
            CREATE INDEX IF NOT EXISTS idx_sessions_cohort_start
            ON sessions(cohort_id, start_date);
        """)

        # 4) —É–±—Ä–∞—Ç—å —Å—Ç–∞—Ä—ã–π –∏–Ω–¥–µ–∫—Å (–µ—Å–ª–∏ –±—ã–ª)
        cur.execute("DROP INDEX IF EXISTS idx_sessions_cohort_start;")

        con.commit()

    await message.answer("‚úÖ –ì–æ—Ç–æ–≤–æ: cohort_id –¥–æ–±–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª—ë–Ω, –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã, –∏–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω.")