#
# === –§–∞–π–ª: crm2/handlers/auth.py
# –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è: –º–æ–¥—É–ª—å CRM, —Ö–µ–Ω–¥–ª–µ—Ä—ã –∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π Telegram, Telegram-–±–æ—Ç –Ω–∞ aiogram 3.x, –¥–æ—Å—Ç—É–ø –∫ SQLite/ORM, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ. –í–Ω—É—Ç—Ä–∏ –∫–ª–∞—Å—Å—ã: LoginFSM, —Ñ—É–Ω–∫—Ü–∏–∏: build_main_menu, get_db, fetch_user_by_nickname, touch_last_seen, attach_telegram_if_empty....
# –î–æ–±–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ 2025-08-21 05:43:17

# crm2/handlers/auth.py
import logging  # –µ—Å–ª–∏ –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤–≤–µ—Ä—Ö—É
import sqlite3
from passlib.hash import bcrypt
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from crm2.keyboards import role_kb
from crm2.db.sqlite import DB_PATH


router = Router()

# ---------- FSM ----------
class LoginFSM(StatesGroup):
    nickname = State()
    password = State()


def build_main_menu(role: str) -> ReplyKeyboardMarkup:
    """
    –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:
      ‚Ä¢ –¥–ª—è admin: –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É 'üõ† –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'
      ‚Ä¢ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ä–æ–ª–µ–π: –±–µ–∑ –∞–¥–º–∏–Ω–∫–∏
    """
    rows = [
        [KeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")],
        [KeyboardButton(text="üè† –ú–µ–Ω—é")],
    ]
    if (role or "").lower() == "admin":
        rows.insert(0, [KeyboardButton(text="üõ† –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")])
    return ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True)


# ---------- DB helpers ----------

# ---------- DB helpers (BEGIN) ----------
def get_db() -> sqlite3.Connection:
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    return conn

def fetch_user_by_nickname(nickname: str) -> dict | None:
    with get_db() as conn:
        cur = conn.cursor()
        cur.execute(
            """
            SELECT id, telegram_id, full_name, nickname, password AS password_hash, role, cohort_id
              FROM users
             WHERE nickname = ?
             LIMIT 1
            """,
            (nickname,),
        )
        row = cur.fetchone()
        return dict(row) if row else None

def touch_last_seen(telegram_id: int) -> None:
    with get_db() as conn:
        cur = conn.cursor()
        cur.execute(
            "UPDATE users SET last_seen = datetime('now') WHERE telegram_id = ?",
            (telegram_id,),
        )
        conn.commit()

def attach_telegram_if_empty(user_id: int, tg_id: int) -> None:
    with get_db() as conn:
        cur = conn.cursor()
        cur.execute(
            """
            UPDATE users
               SET telegram_id = ?
             WHERE id = ?
               AND telegram_id IS NULL
            """,
            (tg_id, user_id),
        )
        conn.commit()
# ---------- DB helpers (END) ----------

# ---------- Handlers ----------
# –∑–∞–ø—É—Å–∫–∞–µ–º –ª–æ–≥–∏–Ω: –∫–Ω–æ–ø–∫–∞ ¬´–í–æ–π—Ç–∏¬ª, —Ç–µ–∫—Å—Ç ¬´–≤–æ–π—Ç–∏¬ª, –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞ /login
@router.message(F.text == "üîê –í–æ–π—Ç–∏")
@router.message(F.text.func(lambda t: isinstance(t, str) and "–≤–æ–π—Ç–∏" in t.lower()))
@router.message(Command("login"))
async def start_login(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(LoginFSM.nickname)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º:", reply_markup=ReplyKeyboardRemove())


@router.message(LoginFSM.nickname)
async def login_nickname(message: Message, state: FSMContext):
    nickname = (message.text or "").strip()
    if len(nickname) < 3:
        await message.answer("–ù–∏–∫ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return

    user = fetch_user_by_nickname(nickname)
    if not user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–∏–∫–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∏–∫ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.")
        return

    await state.update_data(user_id=user["id"], nickname=nickname)
    await state.set_state(LoginFSM.password)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")


@router.message(LoginFSM.password)
async def login_password(message: Message, state: FSMContext):
    data = await state.get_data()
    nickname = data.get("nickname") or ""

    user = fetch_user_by_nickname(nickname)
    if not user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –≤—Ö–æ–¥ –∑–∞–Ω–æ–≤–æ: /login")
        await state.clear()
        return

    pwd = (message.text or "").strip()
    hash_ = user.get("password_hash") or ""

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ö—ç—à
    try:
        ok = bool(hash_) and bcrypt.verify(pwd, hash_)
    except Exception:
        ok = False

    if not ok:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /login –∑–∞–Ω–æ–≤–æ.")
        return

    # –∑–∞—â–∏—Ç–∞ –æ—Ç ¬´—á—É–∂–æ–≥–æ¬ª tg –∞–∫–∫–∞—É–Ω—Ç–∞: –µ—Å–ª–∏ –≤ –∑–∞–ø–∏—Å–∏ –¥—Ä—É–≥–æ–π telegram_id ‚Äî –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏–º
    tg_id = message.from_user.id
    u_tg = user.get("telegram_id")
    if u_tg is not None and u_tg != "" and u_tg != tg_id:
        await state.clear()
        await message.answer(
            "‚ö†Ô∏è –≠—Ç–æ—Ç –Ω–∏–∫ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É Telegram-–∞–∫–∫–∞—É–Ω—Ç—É. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        return

    # –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º tg_id, –µ—Å–ª–∏ –ø—É—Å—Ç–æ–π; –æ–±–Ω–æ–≤–ª—è–µ–º last_seen
    attach_telegram_if_empty(user["id"], tg_id)
    touch_last_seen(tg_id)

    role = user.get("role") or "curious"

    logging.info(f"login: nickname={user.get('nickname')}, tg_id={tg_id}, role_in_db={role}")
    await state.clear()
    await message.answer(
        f"‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω.\n–í—ã –≤–æ—à–ª–∏ –∫–∞–∫: {user.get('full_name') or nickname}\n–†–æ–ª—å: {role}",
        reply_markup=role_kb(role)
    )
    from crm2.handlers_schedule import send_schedule_keyboard
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–∞—Ç—ã –∑–∞–Ω—è—Ç–∏—è, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Ç–µ–º—É –∑–∞–Ω—è—Ç–∏—è –∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.")
    await send_schedule_keyboard(message, limit=5)

    # txt = next_training_text_for_user(message.from_user.id)
    # if txt:
    #     await message.answer(txt)