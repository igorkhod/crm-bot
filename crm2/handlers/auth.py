# from __future__ import annotations
#
# import asyncio, re
# import logging
# from typing import Optional, Tuple
#
# from aiogram import F, Router
# from aiogram.fsm.context import FSMContext
# from aiogram.fsm.state import State, StatesGroup
# from aiogram.types import Message
#
# from crm2.db.core import get_db_connection
# from crm2.db.sessions import get_user_stream_title_by_tg
# from crm2.handlers_schedule import send_schedule_keyboard
# from crm2.keyboards import role_kb

from __future__ import annotations

import asyncio
import logging
import re
import hashlib
from typing import Optional

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message

from crm2.db.core import get_db_connection
from crm2.db.sessions import get_user_stream_title_by_tg
from crm2.handlers_schedule import send_schedule_keyboard
from crm2.keyboards import role_kb



router = Router(name="auth")


# -----------------------
# FSM –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É
# -----------------------
class LoginSG(StatesGroup):
    nickname = State()
    password = State()


# -----------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# -----------------------
def _normalize(s: str) -> str:
    """
    –£–±–∏—Ä–∞–µ–º –Ω–µ–≤–∏–¥–∏–º—ã–µ –ø—Ä–æ–±–µ–ª—ã/–º–∞—Ä–∫–µ—Ä BOM –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –ø–æ –∫—Ä–∞—è–º.
    """
    if s is None:
        return ""
    # NBSP, BOM, zero-width
    s = s.replace("\u00A0", " ").replace("\uFEFF", "").replace("\u200B", "").replace("\u200C", "").replace("\u200D", "")
    # —Å—Ö–ª–æ–ø—ã–≤–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
    s = re.sub(r"\s+", " ", s)
    return s.strip()
#  –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def _normalize(s: str) -> str:
    if s is None:
        return ""
    # —É–±–∏—Ä–∞–µ–º NBSP/BOM/Zero-Width –∏ —Å—Ö–ª–æ–ø—ã–≤–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
    s = (s.replace("\u00A0", " ")
           .replace("\uFEFF", "")
           .replace("\u200B", "")
           .replace("\u200C", "")
           .replace("\u200D", ""))
    s = re.sub(r"\s+", " ", s)
    return s.strip()

def _to_hex_bytes(s: str) -> str:
    return (s or "").encode("utf-8", "replace").hex()

def _sha256(s: str) -> str:
    return hashlib.sha256((s or "").encode("utf-8")).hexdigest()

def _debug_auth_dump(db_pw: str, in_pw: str, who: str = "users.password") -> None:
    """
    –ü–µ—á–∞—Ç–∞–µ–º –≤ –ª–æ–≥–∏ —Å—ã—Ä—ã–µ –±–∞–π—Ç—ã –∏ sha256 –ø–∞—Ä–æ–ª—è –∏–∑ –ë–î –∏ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ.
    –î–µ–ª–∞–µ—Ç —ç—Ç–æ –∏ –¥–ª—è —Å—ã—Ä—ã—Ö —Å—Ç—Ä–æ–∫, –∏ –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö.
    """
    try:
        db_raw = db_pw or ""
        in_raw = in_pw or ""
        db_norm = _normalize(db_raw)
        in_norm = _normalize(in_raw)

        logging.warning("[AUTH DEBUG] field=%s RAW   len=%d hex=%s sha256=%s",
                        who, len(db_raw), _to_hex_bytes(db_raw), _sha256(db_raw))
        logging.warning("[AUTH DEBUG] input     RAW   len=%d hex=%s sha256=%s",
                        len(in_raw), _to_hex_bytes(in_raw), _sha256(in_raw))
        logging.warning("[AUTH DEBUG] field=%s NORM  len=%d hex=%s sha256=%s",
                        who, len(db_norm), _to_hex_bytes(db_norm), _sha256(db_norm))
        logging.warning("[AUTH DEBUG] input     NORM  len=%d hex=%s sha256=%s",
                        len(in_norm), _to_hex_bytes(in_norm), _sha256(in_norm))
    except Exception:
        logging.exception("[AUTH DEBUG] dump failed")

#  –∫–æ–Ω–µ—Ü –æ—Ç–ª–∞–¥–∫–∏

def _fetch_user_by_credentials(nickname: str, password: str) -> Optional[dict]:
    """
    –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–∏–∫—É (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ), –ø–∞—Ä–æ–ª—å —Å–≤–µ—Ä—è–µ–º –≤ Python.
    –ü–µ—Ä–µ–¥ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º –ø–µ—á–∞—Ç–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: hex/sha256 —Å—ã—Ä—ã—Ö –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.
    """
    nn = _normalize(nickname)
    pw = _normalize(password)
    if not nn or not pw:
        return None

    with get_db_connection() as con:
        # —á–∏—Ç–∞–µ–º —Å—Ö–µ–º—É ‚Äî –∫–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–ª–æ–Ω–∫–∞ –Ω–∏–∫–∞?
        cols = {row[1] for row in con.execute("PRAGMA table_info('users')").fetchall()}
        name_col = next((c for c in ("nickname", "login", "username") if c in cols), None)
        if not name_col:
            return None

        # —Ä–∞–±–æ—Ç–∞–µ–º —Å–æ —Å–ª–æ–≤–∞—Ä—è–º–∏
        con.row_factory = lambda cur, row: {d[0]: row[i] for i, d in enumerate(cur.description)}

        # –±–µ—Ä—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–∏–∫—É (–±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)
        user = con.execute(
            f"SELECT * FROM users WHERE {name_col} = ? COLLATE NOCASE LIMIT 1",
            (nn,),
        ).fetchone()

        if not user:
            # fallback: –ø—Ä–æ–±–µ–≥–∞–µ–º –≤—Å–µ—Ö –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –Ω–∏–∫–Ω–µ–π–º—ã
            for r in con.execute("SELECT * FROM users"):
                if _normalize(str(r.get(name_col) or "")) == nn:
                    user = r
                    break

        if not user:
            return None

        # –Ω–∞–π–¥—ë–º —Ä–µ–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ —Å –ø–∞—Ä–æ–ª–µ–º –∏ –≤—ã–≤–µ–¥–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ/—Ö—ç—à–∏ –≤ –ª–æ–≥–∏
        pwd_field = next((k for k in ("password", "pass", "pwd", "passwd", "secret") if k in user), None)
        if not pwd_field:
            return None

        db_pw = str(user.get(pwd_field) or "")
        _debug_auth_dump(db_pw, password, who=f"users.{pwd_field}")

        return user if _normalize(db_pw) == pw else None


def _human_name(user_row: dict) -> str:
    """
    –ê–∫–∫—É—Ä–∞—Ç–Ω–æ –±–µ—Ä—ë–º "—á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ" –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª–µ–π.
    Fallback ‚Äî nickname.
    """
    for key in ("full_name", "fio", "name"):
        if key in user_row and user_row[key]:
            return str(user_row[key])
    return str(user_row.get("nickname", "‚Äî"))


def _user_role(user_row: dict) -> str:
    return str(user_row.get("role", "user"))


# -----------------------
# –•–µ–Ω–¥–ª–µ—Ä—ã
# -----------------------
@router.message(F.text.in_({"/login", "üîê –í–æ–π—Ç–∏"}))
async def cmd_login(message: Message, state: FSMContext) -> None:
    await state.clear()
    await state.set_state(LoginSG.nickname)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º:")


@router.message(LoginSG.nickname)
async def login_nickname(message: Message, state: FSMContext) -> None:
    await state.update_data(nickname=message.text.strip())
    await state.set_state(LoginSG.password)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")


@router.message(LoginSG.password)
async def login_password(message: Message, state: FSMContext) -> None:
    data = await state.get_data()
    nickname = str(data.get("nickname", "")).strip()
    password = (message.text or "").strip()

    if not nickname or not password:
        await message.answer("–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∏ –Ω–∏–∫–Ω–µ–π–º, –∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑: /login")
        await state.clear()
        return

    # --- –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    user = await asyncio.to_thread(_fetch_user_by_credentials, nickname, password)
    if not user:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑: /login")
        await state.clear()
        return

    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º Telegram ID
    tg_id = message.from_user.id
    try:
        await asyncio.to_thread(_bind_telegram_id, int(user["id"]), tg_id)
    except Exception:  # pragma: no cover
        logging.exception("failed to bind telegram id")

    # –ì–æ—Ç–æ–≤–∏–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    full_name = _human_name(user)
    role = _user_role(user)

    # –£–∑–Ω–∞—ë–º –ø–æ—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (id + —É–¥–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å—å)
    stream_id, stream_title = await asyncio.to_thread(get_user_stream_title_by_tg, tg_id)

    text = (
        "‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω.\n"
        f"–í—ã –≤–æ—à–ª–∏ –∫–∞–∫: {full_name}\n"
        f"–†–æ–ª—å: {role}"
    )
    if stream_title:
        text += f"\n–ü–æ—Ç–æ–∫: {stream_title}"

    # –°–æ–æ–±—â–µ–Ω–∏–µ + –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ —Ä–æ–ª–∏
    await message.answer(text, reply_markup=role_kb(role))

    # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–¢–û–õ–¨–ö–û –æ–¥–∏–Ω —Ä–∞–∑)
    await message.answer(
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–∞—Ç—ã –∑–∞–Ω—è—Ç–∏—è, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Ç–µ–º—É –∑–∞–Ω—è—Ç–∏—è –∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ."
    )
    # –í–∞–∂–Ω–æ: –ø–µ—Ä–µ–¥–∞—ë–º tg_id, —á—Ç–æ–±—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±—ã–ª–æ –∏–º–µ–Ω–Ω–æ –¥–ª—è –ø–æ—Ç–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await send_schedule_keyboard(message, limit=5, tg_id=tg_id)

    await state.clear()
