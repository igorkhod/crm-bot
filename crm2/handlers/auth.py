from __future__ import annotations

import asyncio, re
import logging
from typing import Optional, Tuple

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message

from crm2.db.core import get_db_connection
from crm2.db.sessions import get_user_stream_title_by_tg
from crm2.handlers_schedule import send_schedule_keyboard
from crm2.keyboards import role_kb


router = Router(name="auth")


# -----------------------
# FSM –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É
# -----------------------
class LoginSG(StatesGroup):
    nickname = State()
    password = State()


# -----------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# -----------------------
def _normalize(s: str) -> str:
    """
    –£–±–∏—Ä–∞–µ–º –Ω–µ–≤–∏–¥–∏–º—ã–µ –ø—Ä–æ–±–µ–ª—ã/–º–∞—Ä–∫–µ—Ä BOM –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –ø–æ –∫—Ä–∞—è–º.
    """
    if s is None:
        return ""
    # NBSP, BOM, zero-width
    s = s.replace("\u00A0", " ").replace("\uFEFF", "").replace("\u200B", "").replace("\u200C", "").replace("\u200D", "")
    # —Å—Ö–ª–æ–ø—ã–≤–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
    s = re.sub(r"\s+", " ", s)
    return s.strip()

def _fetch_user_by_credentials(nickname: str, password: str) -> Optional[dict]:
    """
    –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–∏–∫—É (–±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞), –ø–∞—Ä–æ–ª—å —Å–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏.
    –î–µ–ª–∞–µ–º –¥–≤–∞ —à–∞–≥–∞:
      1) –æ–±—ã—á–Ω—ã–π SELECT –ø–æ –Ω–∏–∫—É COLLATE NOCASE;
      2) –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –ø—Ä–æ–±–µ–≥–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –Ω–∏–∫–Ω–µ–π–º—ã.
    """
    nn = _normalize(nickname)
    pw = _normalize(password)
    if not nn or not pw:
        return None

    with get_db_connection() as con:
        # —É–∑–Ω–∞—ë–º –∏–º—è –∫–æ–ª–æ–Ω–∫–∏ –Ω–∏–∫–∞
        cols = {row[1] for row in con.execute("PRAGMA table_info('users')").fetchall()}
        name_col = next((c for c in ("nickname", "login", "username") if c in cols), None)
        if not name_col:
            return None

        # —Ö–æ—Ç–∏–º —Å–ª–æ–≤–∞—Ä–∏ –∏–∑ SELECT
        con.row_factory = lambda cur, row: {d[0]: row[i] for i, d in enumerate(cur.description)}

        # —à–∞–≥ 1: –ø—Ä—è–º–æ–π –ø–æ–∏—Å–∫
        user = con.execute(
            f"SELECT * FROM users WHERE {name_col} = ? COLLATE NOCASE LIMIT 1",
            (nn,),
        ).fetchone()

        # —à–∞–≥ 2: fallback –ø–æ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏, –µ—Å–ª–∏ –ø—Ä—è–º–æ–π –Ω–µ –Ω–∞—à—ë–ª
        if not user:
            for r in con.execute("SELECT * FROM users"):
                if _normalize(str(r.get(name_col) or "")) == nn:
                    user = r
                    break

        if not user:
            return None

        # –Ω–∞—Ö–æ–¥–∏–º –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ
        for key in ("password", "pass", "pwd", "passwd", "secret"):
            if key in user:
                db_pw = _normalize(str(user[key] or ""))
                return user if db_pw == pw else None

        # –≤ —Ç–∞–±–ª–∏—Ü–µ –Ω–µ—Ç –ø–æ–ª—è –ø–∞—Ä–æ–ª—è ‚Äî —Å—á–∏—Ç–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –Ω–µ—É—Å–ø–µ—à–Ω–æ–π
        return None




def _bind_telegram_id(user_id: int, tg_id: int) -> None:
    """–ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç telegram_id –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –æ–Ω –µ—â—ë –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∏–ª–∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è."""
    with get_db_connection() as con:
        con.execute(
            """
            UPDATE users
            SET telegram_id = ?
            WHERE id = ?
            """,
            (tg_id, user_id),
        )
        con.commit()


def _human_name(user_row: dict) -> str:
    """
    –ê–∫–∫—É—Ä–∞—Ç–Ω–æ –±–µ—Ä—ë–º "—á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ" –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª–µ–π.
    Fallback ‚Äî nickname.
    """
    for key in ("full_name", "fio", "name"):
        if key in user_row and user_row[key]:
            return str(user_row[key])
    return str(user_row.get("nickname", "‚Äî"))


def _user_role(user_row: dict) -> str:
    return str(user_row.get("role", "user"))


# -----------------------
# –•–µ–Ω–¥–ª–µ—Ä—ã
# -----------------------
@router.message(F.text.in_({"/login", "üîê –í–æ–π—Ç–∏"}))
async def cmd_login(message: Message, state: FSMContext) -> None:
    await state.clear()
    await state.set_state(LoginSG.nickname)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º:")


@router.message(LoginSG.nickname)
async def login_nickname(message: Message, state: FSMContext) -> None:
    await state.update_data(nickname=message.text.strip())
    await state.set_state(LoginSG.password)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")


@router.message(LoginSG.password)
async def login_password(message: Message, state: FSMContext) -> None:
    data = await state.get_data()
    nickname = str(data.get("nickname", "")).strip()
    password = (message.text or "").strip()

    if not nickname or not password:
        await message.answer("–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∏ –Ω–∏–∫–Ω–µ–π–º, –∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑: /login")
        await state.clear()
        return

    # --- –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    user = await asyncio.to_thread(_fetch_user_by_credentials, nickname, password)
    if not user:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑: /login")
        await state.clear()
        return

    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º Telegram ID
    tg_id = message.from_user.id
    try:
        await asyncio.to_thread(_bind_telegram_id, int(user["id"]), tg_id)
    except Exception:  # pragma: no cover
        logging.exception("failed to bind telegram id")

    # –ì–æ—Ç–æ–≤–∏–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    full_name = _human_name(user)
    role = _user_role(user)

    # –£–∑–Ω–∞—ë–º –ø–æ—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (id + —É–¥–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å—å)
    stream_id, stream_title = await asyncio.to_thread(get_user_stream_title_by_tg, tg_id)

    text = (
        "‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω.\n"
        f"–í—ã –≤–æ—à–ª–∏ –∫–∞–∫: {full_name}\n"
        f"–†–æ–ª—å: {role}"
    )
    if stream_title:
        text += f"\n–ü–æ—Ç–æ–∫: {stream_title}"

    # –°–æ–æ–±—â–µ–Ω–∏–µ + –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ —Ä–æ–ª–∏
    await message.answer(text, reply_markup=role_kb(role))

    # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–¢–û–õ–¨–ö–û –æ–¥–∏–Ω —Ä–∞–∑)
    await message.answer(
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–∞—Ç—ã –∑–∞–Ω—è—Ç–∏—è, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Ç–µ–º—É –∑–∞–Ω—è—Ç–∏—è –∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ."
    )
    # –í–∞–∂–Ω–æ: –ø–µ—Ä–µ–¥–∞—ë–º tg_id, —á—Ç–æ–±—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±—ã–ª–æ –∏–º–µ–Ω–Ω–æ –¥–ª—è –ø–æ—Ç–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await send_schedule_keyboard(message, limit=5, tg_id=tg_id)

    await state.clear()
