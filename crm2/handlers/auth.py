# crm2/handlers/auth.py
# auth.py
# –ü—É—Ç—å: crm2/handlers/auth.py
# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ª–æ–≥–∏–Ω, –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–µ–π)
# –ö–ª–∞—Å—Å—ã:
# AuthStates - –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (waiting_username, waiting_password)
# –§—É–Ω–∫—Ü–∏–∏:
# start_with_auth - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã (–≥–æ—Å—Ç–µ–≤–æ–µ –º–µ–Ω—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
# show_guest_auth_menu - –ü–æ–∫–∞–∑ –º–µ–Ω—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –≥–æ—Å—Ç—è
# handle_auth_start - –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–∫–Ω–æ–ø–∫–∞ '–í–æ–π—Ç–∏')
# handle_username_input - –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ username
# handle_password_input - –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
# authenticate_user - –§—É–Ω–∫—Ü–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–Ω–∞/–ø–∞—Ä–æ–ª—è)
# show_main_menu - –ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
# is_authenticated - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# get_user_session - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# cmd_login - –ê–ª–∏–∞—Å –¥–ª—è handle_auth_start
import logging

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.markdown import hcode

from crm2.services.users import get_user_by_nickname, update_user_telegram_id

# –•—Ä–∞–Ω–∏–º —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ë–î)
user_sessions = {}


class AuthStates(StatesGroup):
    waiting_username = State()
    waiting_password = State()


router = Router()


async def start_with_auth(message: Message, state: FSMContext) -> None:
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã - –≤—Å–µ–≥–¥–∞ –≥–æ—Å—Ç–µ–≤–æ–π —ç–∫—Ä–∞–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    user_id = message.from_user.id

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å—Ç–∞—Ä—Ç–µ
    user_sessions[user_id] = {'authenticated': False, 'username': None}

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.clear()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–æ—Å—Ç–µ–≤–æ–µ –º–µ–Ω—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    await show_guest_auth_menu(message)


async def show_guest_auth_menu(message: Message) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –≥–æ—Å—Ç—è"""
    auth_keyboard = [[KeyboardButton(text="–í–æ–π—Ç–∏")]]
    reply_markup = ReplyKeyboardMarkup(
        keyboard=auth_keyboard,
        resize_keyboard=True,
        input_field_placeholder="–ù–∞–∂–º–∏—Ç–µ '–í–æ–π—Ç–∏' –¥–ª—è –Ω–∞—á–∞–ª–∞"
    )

    welcome_text = (
        "üîê –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Psytech CRM!\n\n"
        "–ó–¥–µ—Å—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤–∞—à –ø—É—Ç—å –∏–∑ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –≤ —Å–≤–æ–±–æ–¥—É.\n"
        "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ '–í–æ–π—Ç–∏' –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"
    )

    await message.answer(welcome_text, reply_markup=reply_markup)


async def handle_auth_start(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–∫–Ω–æ–ø–∫–∞ '–í–æ–π—Ç–∏')"""
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–æ–∂–∏–¥–∞–Ω–∏–µ username"
    await state.set_state(AuthStates.waiting_username)

    await message.answer(
        "üë§ –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º:"
    )


async def handle_username_input(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ username"""
    username = message.text.strip()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º username –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–∂–∏–¥–∞–Ω–∏—é –ø–∞—Ä–æ–ª—è
    await state.update_data(username=username)
    await state.set_state(AuthStates.waiting_password)

    await message.answer(
        "üîí –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º–µ\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {hcode(username)}\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:"
    )

    # async def handle_password_input(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""


async def handle_password_input(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    user_id = message.from_user.id
    password = message.text.strip()

    # –ü–æ–ª—É—á–∞–µ–º username –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    username = user_data.get('username')

    if not username:
        await handle_auth_start(message, state)
        return

    # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    auth_result = await authenticate_user(username, password)

    if auth_result['success']:
        # –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è - –æ–±–Ω–æ–≤–ª—è–µ–º telegram_id –≤ –ë–î
        user_db_id = auth_result['user_data']['user_id']
        await update_user_telegram_id(user_db_id, user_id)

        user_sessions[user_id] = {
            'authenticated': True,
            'username': username,
            'user_data': auth_result['user_data']
        }

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

        await message.answer(
            f"‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ, {hcode(username)}!\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É Psytech CRM!"
        )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await show_main_menu(message)
    else:
        # –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞!\n\n"
            "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º –∏–ª–∏ –ø–∞—Ä–æ–ª—å.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –Ω–∞—á–∞–ª—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        await handle_auth_start(message, state)


from crm2.utils.password_utils import verify_and_upgrade_password
from crm2.services.users import update_user_password


async def authenticate_user(username: str, password: str) -> dict:
    """–§—É–Ω–∫—Ü–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –ë–î —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ö–µ—à–∞"""
    try:
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –ø–æ nickname
        user = await get_user_by_nickname(username)

        logging.info(f"üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}")
        logging.info(f"üìã –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {bool(user)}")

        if user:
            stored_password = user.get('password', '')
            logging.info(f"üîê –•–µ—à –ø–∞—Ä–æ–ª—è –∏–∑ –ë–î: {stored_password}")
            logging.info(f"üìù –í–≤–µ–¥–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: {password}")

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–∞—Ä–æ–ª—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π bcrypt
            success, new_hash = verify_and_upgrade_password(password, stored_password, user.get('id'))

            if success:
                logging.info("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")

                # –ï—Å–ª–∏ –ø–∞—Ä–æ–ª—å –±—ã–ª –≤ plain text –∏ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ö–µ—à
                if new_hash != stored_password:
                    await update_user_password(user.get('id'), new_hash)
                    logging.info("üîÑ –ü–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω —Å plain text –Ω–∞ bcrypt")

                return {
                    'success': True,
                    'user_data': {
                        'username': user.get('nickname'),
                        'role': user.get('role', 'user'),
                        'user_id': user.get('id')
                    }
                }
            else:
                logging.info("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")

        return {'success': False}
    except Exception as e:
        logging.error(f"Auth error: {e}")
        return {'success': False}


async def show_main_menu(message: Message) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    user_id = message.from_user.id
    user_data = user_sessions.get(user_id, {})

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º KeyboardButton
    menu_keyboard = [
        [
            KeyboardButton(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"),
            KeyboardButton(text="üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã")
        ],
        [
            KeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"),
            KeyboardButton(text="ü§ñ –ò–ò-–∞–≥–µ–Ω—Ç—ã")
        ],
        [
            KeyboardButton(text="‚öôÔ∏è –ê–¥–º–∏–Ω"),
            KeyboardButton(text="üìä –ü–æ—Å–µ—â–µ–Ω–∏–µ")
        ]
    ]

    reply_markup = ReplyKeyboardMarkup(
        keyboard=menu_keyboard,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª..."
    )

    username = user_data.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
    role = user_data.get('user_data', {}).get('role', 'user')

    await message.answer(
        f"üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {hcode(username)}\n"
        f"–†–æ–ª—å: {hcode(role)}",
        reply_markup=reply_markup
    )


def is_authenticated(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    return user_sessions.get(user_id, {}).get('authenticated', False)


def get_user_session(user_id: int):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return user_sessions.get(user_id)


# –ê–ª–∏–∞—Å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
async def cmd_login(message: Message, state: FSMContext) -> None:
    """–ê–ª–∏–∞—Å –¥–ª—è handle_auth_start –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º"""
    await handle_auth_start(message, state)


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ router
router.message.register(start_with_auth, Command("start"))
router.message.register(handle_auth_start, F.text == "–í–æ–π—Ç–∏")
router.message.register(handle_username_input, AuthStates.waiting_username)
router.message.register(handle_password_input, AuthStates.waiting_password)
