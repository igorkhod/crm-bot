# === –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫: crm2/handlers/auth.py
# –°–ø–∏—Å–æ–∫ –≤–µ—Ä—Ö–Ω–µ—É—Ä–æ–≤–Ω–µ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ —Ñ–∞–π–ª–∞ (–∫–ª–∞—Å—Å—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏).
# –û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–∞–≤–∞ —Ñ—É–Ω–∫—Ü–∏–π/–∫–ª–∞—Å—Å–æ–≤.
# –ö–ª–∞—Å—Å—ã: LoginSG
# –§—É–Ω–∫—Ü–∏–∏: _normalize, _is_bcrypt, _check_password, _human_name, _user_role, _bind_telegram_id, _fetch_user_by_credentials, cmd_login, login_nickname, login_password, _show_role_keyboard
# === –ö–æ–Ω–µ—Ü –∞–≤—Ç–æ–∑–∞–≥–æ–ª–æ–≤–∫–∞
# -*- coding: utf-8 -*-
# crm2/handlers/auth.py
# """–•–µ–Ω–¥–ª–µ—Ä—ã –≤—Ö–æ–¥–∞/–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."""

from __future__ import annotations  # ‚Üê —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–µ—Ä–≤—ã–º –∫–æ–¥-–æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º

import asyncio
import hmac
import logging
import re
from typing import Optional

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery

from crm2.db.core import get_db_connection
from crm2.handlers_schedule import send_nearest_session
# ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã ...
from crm2.keyboards import role_kb  # ‚Üê —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç –ø–µ—Ä–µ–Ω–æ—Å–∏–º –ù–ò–ñ–ï
from crm2.services.users import get_user_by_telegram
from aiogram.filters import Command

router = Router(name="auth")


# -----------------------
# FSM –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É
# -----------------------
class LoginSG(StatesGroup):
    nickname = State()
    password = State()


# -----------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# -----------------------
def _normalize(s: str) -> str:
    """–£–±–∏—Ä–∞–µ–º –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ/–Ω–µ–≤–∏–¥–∏–º—ã–µ –ø—Ä–æ–±–µ–ª—ã –∏ –æ–±—Ä–µ–∑–∞–µ–º –∫—Ä–∞—è."""
    if s is None:
        return ""
    s = (s.replace("\u00A0", " ")  # NBSP
         .replace("\uFEFF", "")  # BOM
         .replace("\u200B", "")
         .replace("\u200C", "")
         .replace("\u200D", ""))
    s = re.sub(r"\s+", " ", s)
    return s.strip()


# bcrypt (–µ—Å–ª–∏ –≤ –ë–î $2b$‚Ä¶ ‚Äî —Å–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ bcrypt, –∏–Ω–∞—á–µ –æ–±—ã—á–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π)
_BCRYPT_RE = re.compile(r"^\$2[aby]?\$\d{2}\$[./A-Za-z0-9]{53}$")


def _is_bcrypt(s: str) -> bool:
    return bool(s) and bool(_BCRYPT_RE.match(s))


def _check_password(db_pw: str, input_pw: str) -> bool:
    raw_db = str(db_pw or "")
    raw_in = str(input_pw or "")

    if _is_bcrypt(raw_db):
        try:
            import bcrypt
            return bcrypt.checkpw(raw_in.encode("utf-8"), raw_db.encode("utf-8"))
        except Exception:
            logging.exception("[AUTH] bcrypt check failed")
            return False

    a = _normalize(raw_db)
    b = _normalize(raw_in)
    try:
        return hmac.compare_digest(a, b)
    except Exception:
        return a == b


def _human_name(user_row: dict) -> str:
    for key in ("full_name", "fio", "name"):
        val = user_row.get(key)
        if val:
            return str(val)
    return str(user_row.get("nickname", "‚Äî"))


def _user_role(user_row: dict) -> str:
    return str(user_row.get("role", "user"))


def _bind_telegram_id(user_id: int, tg_id: int) -> None:
    with get_db_connection() as con:
        con.execute(
            """
            UPDATE users
            SET telegram_id = ?
            WHERE id = ?
              AND (telegram_id IS NULL OR telegram_id <> ?)
            """,
            (tg_id, user_id, tg_id),
        )
        con.commit()


def _fetch_user_by_credentials(nickname: str, password: str) -> Optional[dict]:
    nn = _normalize(nickname)
    pw = _normalize(password)
    if not nn or not pw:
        return None

    with get_db_connection() as con:
        cols = {row[1] for row in con.execute("PRAGMA table_info('users')").fetchall()}
        name_col = next((c for c in ("nickname", "login", "username") if c in cols), None)
        if not name_col:
            return None

        con.row_factory = lambda cur, row: {d[0]: row[i] for i, d in enumerate(cur.description)}
        user = con.execute(
            f"SELECT * FROM users WHERE {name_col} = ? COLLATE NOCASE LIMIT 1",
            (nn,),
        ).fetchone()

        if not user:
            # fallback –Ω–∞ ¬´–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ¬ª —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
            for r in con.execute("SELECT * FROM users"):
                if _normalize(str(r.get(name_col) or "")) == nn:
                    user = r
                    break

        if not user:
            return None

        pwd_field = next((k for k in ("password", "pass", "pwd", "passwd", "secret") if k in user), None)
        if not pwd_field:
            return None

        db_pw = str(user.get(pwd_field) or "")
        return user if _check_password(db_pw, password) else None


# -----------------------
# –•–µ–Ω–¥–ª–µ—Ä—ã
# -----------------------
# –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤—Ö–æ–¥–∞
# @router.message(F.text == "üîê –í–æ–π—Ç–∏")
# async def login_handler(message: Message):
#     # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
#     user = get_user_by_telegram(message.from_user.id)
#     if user and user.get('nickname') and user.get('password'):
#         role = user.get("role", "user")
#         await message.answer(
#             f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.get('full_name', '–¥—Ä—É–≥')}! üëã\n"
#             f"–í—ã –≤–æ—à–ª–∏ —Å —Ä–æ–ª—å—é: {role}",
#             reply_markup=role_kb(role)  # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ —Ä–æ–ª–∏
#         )


@router.message(F.text == "üîê –í–æ–π—Ç–∏")
async def login_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –í–æ–π—Ç–∏ - –≤—Å–µ–≥–¥–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    # –í–°–ï–ì–î–ê –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –¥–∞–∂–µ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞–π–¥–µ–Ω
    await state.set_state(LoginSG.nickname)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º:")


@router.message(LoginSG.nickname)
async def login_nickname(message: Message, state: FSMContext) -> None:
    await state.update_data(nickname=_normalize(message.text or ""))
    await state.set_state(LoginSG.password)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")


# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–¥ login_from_inline
@router.message(Command("login"))
async def cmd_login(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /login"""
    await state.set_state(LoginSG.nickname)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º:")

# –ò –¥–æ–±–∞–≤—å—Ç–µ –∏–º–ø–æ—Ä—Ç Command –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞:
from aiogram.filters import Command


@router.callback_query(F.data == "login:start")
async def login_from_inline(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    await cmd_login(cb.message, state)


@router.message(LoginSG.password)
async def login_password(message: Message, state: FSMContext) -> None:
    data = await state.get_data()
    nickname = str(data.get("nickname", "")).strip()
    password = _normalize(message.text or "")

    if not nickname or not password:
        await message.answer("–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∏ –Ω–∏–∫–Ω–µ–π–º, –∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑: /login")
        await state.clear()
        return

    # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (—Ç–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞—ë—Ç—Å—è —Ç–æ–π –∂–µ)
    user = await asyncio.to_thread(_fetch_user_by_credentials, nickname, password)
    if not user:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑: /login")
        await state.clear()
        return

    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø–æ–ª—è–º –∏ –¥–ª—è dict, –∏ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞
    def uget(u, key, default=None):
        return (u.get(key, default) if isinstance(u, dict) else getattr(u, key, default))

    tg_id = message.from_user.id
    full_name = (uget(user, "full_name") or uget(user, "nickname") or "–ì–æ—Å—Ç—å").strip()
    role = (uget(user, "role") or "user").strip()
    cohort = uget(user, "cohort_id") or uget(user, "cohort_id")

    from crm2.keyboards import role_kb

    # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤–º–µ—Å—Ç–æ "–ú–µ–Ω—é"
    lines = [f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {full_name}!"]

    role_line = f"–†–æ–ª—å: {role}"
    if cohort is not None:
        role_line += f" | –ü–æ—Ç–æ–∫: {cohort}"
    lines.append(role_line)

    await message.answer("\n".join(lines), reply_markup=role_kb(role or "user"))

    # –ü–æ–∫–∞–∑–∞—Ç—å –±–ª–∏–∂–∞–π—à–µ–µ –∑–∞–Ω—è—Ç–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    try:
        await send_nearest_session(message, tg_id=tg_id, limit=5)
    except Exception:
        logging.exception("send_schedule_keyboard failed")

    await state.clear()


async def _show_role_keyboard(message, role: str):
    try:
        await message.answer(f"–í–∞—à –∫–∞–±–∏–Ω–µ—Ç. –†–æ–ª—å: {role}", reply_markup=role_kb(role))
    except Exception:
        pass
