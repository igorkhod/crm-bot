# guest_menu.py
# –ü—É—Ç—å: crm2/handlers/guest_menu.py
# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –ì–æ—Å—Ç–µ–≤–æ–µ –º–µ–Ω—é –¥–ª—è –Ω–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
# –ö–ª–∞—Å—Å—ã:
#
# GuestLoginStates - –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –≥–æ—Å—Ç–µ–≤–æ–≥–æ –≤—Ö–æ–¥–∞ (waiting_password)
# –§—É–Ω–∫—Ü–∏–∏:
#
# guest_start - –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –≥–æ—Å—Ç–µ–π
#
# guest_login - –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í–æ–π—Ç–∏" (–ø–µ—Ä–µ—Ö–æ–¥ –≤ –ø—Ä–æ—Ü–µ—Å—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
#
# process_login_password - –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
from __future__ import annotations

import logging
# "\crm2\handlers\guest_menu.py"
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message

from crm2.keyboards import guest_start_kb, role_kb
from crm2.services.users import get_user_by_telegram, update_user_password  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º update_user_password
from crm2.utils.password_utils import verify_and_upgrade_password, \
    normalize_string  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º verify_and_upgrade_password

logger = logging.getLogger(__name__)
router = Router()


class GuestLoginStates(StatesGroup):
    waiting_password = State()


@router.message(Command("start"))
async def guest_start(message: Message):
    u = await get_user_by_telegram(message.from_user.id)

    if u and u.get("nickname") and u.get("password"):
        await message.answer(
            f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {u.get('nickname', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=role_kb(u.get("role", "user"))
        )
    else:
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Psytech CRM!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=guest_start_kb()
        )


@router.message(F.text == "üîê –í–æ–π—Ç–∏")
async def guest_login(message: Message, state: FSMContext):
    # –í—Å–µ–≥–¥–∞ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /login
    from crm2.handlers.auth import cmd_login
    await cmd_login(message, state)


@router.message(GuestLoginStates.waiting_password)
async def process_login_password(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    password = normalize_string(message.text.strip())
    u = await get_user_by_telegram(message.from_user.id)

    if not u:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return

    stored_password = u.get("password", "")

    # –û–¢–õ–ê–î–û–ß–ù–´–ô –í–´–í–û–î
    print(f"[DEBUG] User object: {u}")
    print(f"[DEBUG] Nickname: {u.get('nickname')}")
    print(f"[DEBUG] Role: {u.get('role')}")
    print(f"[DEBUG] All keys: {list(u.keys())}")

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å –∞–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Ö–µ—à–∞
    success, new_hash = verify_and_upgrade_password(password, stored_password)

    if success:
        # –ï—Å–ª–∏ –ø–∞—Ä–æ–ª—å –±—ã–ª –≤ plain text - –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –≤ –±–∞–∑–µ
        if new_hash != stored_password:
            await update_user_password(message.from_user.id, new_hash)
            logger.info(f"Password upgraded to bcrypt for user {u.get('nickname')}")

        # –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–∞–Ω–Ω—ã—Ö
        nickname = u.get('nickname', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        role = u.get('role', 'user')

        print(f"[DEBUG] Final nickname: {nickname}")
        print(f"[DEBUG] Final role: {role}")

        await message.answer(
            f"‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ, {nickname}!",
            reply_markup=role_kb(role)
        )
        await state.clear()
    else:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é."
        )

# ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ...
