from __future__ import annotations

import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import State, StatesGroup

from crm2.services.users import get_user_by_telegram
from crm2.keyboards import guest_start_kb, role_kb

logger = logging.getLogger(__name__)
router = Router()


class GuestLoginStates(StatesGroup):
    waiting_password = State()


@router.message(Command("start"))
async def guest_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –≥–æ—Å—Ç–µ–π"""
    u = get_user_by_telegram(message.from_user.id)

    if u and u.get("nickname") and u.get("password"):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–æ–π—Ç–∏
        await message.answer(
            "üîê –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üîê –í–æ–π—Ç–∏' –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É.",
            reply_markup=guest_start_kb()
        )
    else:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–æ—Å—Ç–µ–≤–æ–µ –º–µ–Ω—é
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Psytech CRM!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=guest_start_kb()
        )


@router.message(F.text == "üîê –í–æ–π—Ç–∏")
async def guest_login(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞ –≤ –≥–æ—Å—Ç–µ–≤–æ–º –º–µ–Ω—é"""
    u = get_user_by_telegram(message.from_user.id)

    if u and u.get("nickname") and u.get("password"):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–æ–π—Ç–∏
        await message.answer(
            "üîê –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞:"
        )
        await state.set_state(GuestLoginStates.waiting_password)
    else:
        await message.answer(
            "‚ùå –£—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n"
            "–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.",
            reply_markup=guest_start_kb()
        )


@router.message(GuestLoginStates.waiting_password)
async def process_login_password(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è"""
    password = message.text.strip()
    u = get_user_by_telegram(message.from_user.id)

    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
    # –°–µ–π—á–∞—Å –ø—Ä–æ—Å—Ç–æ –∑–∞–≥–ª—É—à–∫–∞
    if u and u.get("password") == password:  # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        await message.answer(
            "‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!",
            reply_markup=role_kb(u.get("role", "user"))
        )
        await state.clear()
    else:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é."
        )


@router.message(F.text == "üÜï –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
async def guest_register(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –≥–æ—Å—Ç–µ–≤–æ–º –º–µ–Ω—é"""
    u = get_user_by_telegram(message.from_user.id)

    if u and u.get("nickname") and u.get("password"):
        await message.answer(
            "‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üîê –í–æ–π—Ç–∏' –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É.",
            reply_markup=guest_start_kb()
        )
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–∞–Ω–¥—É –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
        from crm2.bot import bot, dp
        await message.answer(
            "üìù –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /register\n"
            "–∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: /register"
        )


@router.message(F.text == "üìñ –û –ø—Ä–æ–µ–∫—Ç–µ")
async def guest_about(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û –ø—Ä–æ–µ–∫—Ç–µ' –≤ –≥–æ—Å—Ç–µ–≤–æ–º –º–µ–Ω—é"""
    await message.answer(
        "üß† **Psytech CRM**\n\n"
        "–≠—Ç–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–µ–±–Ω—ã–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ "
        "–≤ —Ä–∞–º–∫–∞—Ö –ø—Å–∏—Ö–æ–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫.\n\n"
        "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã:\n"
        "‚Ä¢ üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –∑–∞–Ω—è—Ç–∏–π\n"
        "‚Ä¢ ‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏\n"
        "‚Ä¢ üìö –†–∞–±–æ—Ç–∞ —Å –¥–æ–º–∞—à–Ω–∏–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏\n"
        "‚Ä¢ üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–µ–±–Ω—ã–º–∏ –≥—Ä—É–ø–ø–∞–º–∏\n\n"
        "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª–Ω–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è.",
        reply_markup=guest_start_kb()
    )


@router.message(F.text == "üîô –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é")
@router.message(Command("menu"))
async def back_to_guest_menu(message: Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–æ—Å—Ç–µ–≤–æ–µ –º–µ–Ω—é"""
    await state.clear()
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=guest_start_kb()
    )


@router.message(Command("cancel"))
async def cancel_handler(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    current_state = await state.get_state()
    if current_state is None:
        return

    await state.clear()
    await message.answer(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=guest_start_kb()
    )