# crm2/handlers/registration.py

from __future__ import annotations

import sqlite3
from passlib.hash import bcrypt

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
)
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

router = Router()

NO_COHORT = "–ë–µ–∑ –ø–æ—Ç–æ–∫–∞"


# ===================== FSM =====================
class RegistrationFSM(StatesGroup):
    full_name = State()
    nickname = State()
    password = State()
    password_confirm = State()
    cohort = State()


# ================== helpers ====================
def get_db_connection() -> sqlite3.Connection:
    # —Ñ–∞–π–ª –ë–î –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å —Ç–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ–µ–∫—Ç
    return sqlite3.connect("crm2.db")


def get_cohorts() -> list[tuple[int, str]]:
    with get_db_connection() as conn:
        cur = conn.cursor()
        cur.execute("SELECT id, name FROM cohorts ORDER BY id")
        rows = cur.fetchall()
    # rows: [(id, name), ...]
    return rows


def nickname_exists(nickname: str) -> bool:
    with get_db_connection() as conn:
        cur = conn.cursor()
        cur.execute("SELECT 1 FROM users WHERE nickname=?", (nickname,))
        return cur.fetchone() is not None


# ================ handlers =====================
# –°—Ç–∞—Ä—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ‚Äî –ª–æ–≤–∏–º –∏ –∫–Ω–æ–ø–∫—É —Å —ç–º–æ–¥–∑–∏, –∏ —Ç–µ–∫—Å—Ç ¬´–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä‚Ä¶¬ª, –∏ /register
@router.message(F.text == "üÜï –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
@router.message(F.text.func(lambda t: isinstance(t, str) and "–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä" in t.lower()))
@router.message(Command("register"))
async def start_registration(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(RegistrationFSM.full_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")


@router.message(RegistrationFSM.full_name)
async def reg_full_name(message: Message, state: FSMContext):
    full_name = (message.text or "").strip()
    if len(full_name) < 3:
        await message.answer("–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ. –í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é:")
        return
    await state.update_data(full_name=full_name)
    await state.set_state(RegistrationFSM.nickname)
    await message.answer("–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –Ω–∏–∫–Ω–µ–π–º –¥–ª—è –≤—Ö–æ–¥–∞:")


@router.message(RegistrationFSM.nickname)
async def reg_nickname(message: Message, state: FSMContext):
    nickname = (message.text or "").strip()
    if len(nickname) < 3:
        await message.answer("–ù–∏–∫ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π:")
        return
    if nickname_exists(nickname):
        await message.answer("‚ùå –¢–∞–∫–æ–π –Ω–∏–∫ —É–∂–µ –∑–∞–Ω—è—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π:")
        return

    await state.update_data(nickname=nickname)
    await state.set_state(RegistrationFSM.password)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")


@router.message(RegistrationFSM.password)
async def reg_password(message: Message, state: FSMContext):
    pwd = (message.text or "").strip()
    if len(pwd) < 6:
        await message.answer("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 6 —Å–∏–º–≤–æ–ª–æ–≤. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    await state.update_data(password=pwd)
    await state.set_state(RegistrationFSM.password_confirm)
    await message.answer("–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")


@router.message(RegistrationFSM.password_confirm)
async def reg_password_confirm(message: Message, state: FSMContext):
    confirm = (message.text or "").strip()
    data = await state.get_data()
    if confirm != data.get("password", ""):
        await message.answer("‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –µ—â—ë —Ä–∞–∑:")
        await state.set_state(RegistrationFSM.password)
        return

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø–æ—Ç–æ–∫–∞
    await state.set_state(RegistrationFSM.cohort)

    cohorts = get_cohorts()
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é (–¥–≤—É—Ö—É—Ä–æ–≤–Ω–µ–≤—É—é) —Ä–∞—Å–∫–ª–∞–¥–∫—É –∫–Ω–æ–ø–æ–∫
    rows: list[list[KeyboardButton]] = [[KeyboardButton(text=name)] for _, name in cohorts]
    rows.append([KeyboardButton(text=NO_COHORT)])

    kb = ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ç–æ–∫:", reply_markup=kb)


@router.message(RegistrationFSM.cohort)
async def reg_cohort(message: Message, state: FSMContext):
    choice = (message.text or "").strip()

    cohorts = get_cohorts()
    name_to_id = {name: cid for cid, name in cohorts}

    if choice.lower() == NO_COHORT.lower():
        cohort_id = None
        cohort_name = NO_COHORT
    elif choice in name_to_id:
        cohort_id = name_to_id[choice]
        cohort_name = choice
    else:
        await message.answer("‚ùå –¢–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    data = await state.get_data()
    password_hash = bcrypt.hash(data["password"])

    # –í–ê–ñ–ù–û: –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ /start (ensure_user),
    # –ø–æ—ç—Ç–æ–º—É –∑–¥–µ—Å—å –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–æ–∫—É, –∞ –Ω–µ INSERT!
    with get_db_connection() as conn:
        cur = conn.cursor()
        cur.execute(
            """
            UPDATE users
               SET full_name = ?,
                   nickname = ?,
                   password_hash = ?,
                   role = 'user',
                   cohort_id = ?
             WHERE telegram_id = ?
            """,
            (
                data["full_name"],
                data["nickname"],
                password_hash,
                cohort_id,                # None –¥–æ–ø—É—Å—Ç–∏–º ‚Äî –±—É–¥–µ—Ç NULL
                message.from_user.id,
            ),
        )
        conn.commit()

    await state.clear()
    await message.answer(
        f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {data['full_name']}.\n"
        f"–ü–æ—Ç–æ–∫: {cohort_name}",
        reply_markup=ReplyKeyboardRemove(),
    )
