# crm2/handlers/attendance.py
from __future__ import annotations
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message

from crm2.keyboards.admin_attendance import choose_stream_kb
from crm2.db.sessions import get_upcoming_sessions_by_stream

router = Router(name="attendance")

class AttStates(StatesGroup):
    stream = State()

@router.message(F.text == "üìä –ü–æ—Å–µ—â–µ–Ω–∏–µ")
async def attendance_entry(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(AttStates.stream)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ç–æ–∫:", reply_markup=choose_stream_kb())

@router.message(AttStates.stream, F.text.in_(["1 –ø–æ—Ç–æ–∫ ¬∑ –Ω–∞–±–æ—Ä 09.2023", "2 –ø–æ—Ç–æ–∫ ¬∑ –Ω–∞–±–æ—Ä 04.2025"]))
async def pick_stream(message: Message, state: FSMContext):
    stream_id = 1 if message.text.startswith("1 –ø–æ—Ç–æ–∫") else 2
    await state.update_data(stream_id=stream_id)
    await message.answer("–ü–æ—Ç–æ–∫ –≤—ã–±—Ä–∞–Ω. –ù–∞–∂–º–∏—Ç–µ ¬´üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å¬ª, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ –∑–∞–Ω—è—Ç–∏—è.")

@router.message(AttStates.stream, F.text == "üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å")
async def show_stream_sessions(message: Message, state: FSMContext):
    data = await state.get_data()
    stream_id = data.get("stream_id")
    if not stream_id:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ç–æ–∫.")
        return
    sessions = get_upcoming_sessions_by_stream(stream_id, limit=10)
    if not sessions:
        await message.answer("–ë–ª–∏–∂–∞–π—à–∏—Ö –∑–∞–Ω—è—Ç–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    lines = ["–ë–ª–∏–∂–∞–π—à–∏–µ –∑–∞–Ω—è—Ç–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞:"]
    for s in sessions:
        d1, d2 = s["start_date"], s["end_date"]
        code = (s.get("topic_code") or "").strip()
        dates = f"{d1} ‚Äî {d2}" if (d1 and d2 and d1 != d2) else (d1 or d2 or "‚Äî")
        lines.append("‚Ä¢ " + dates + (f" ‚Ä¢ {code}" if code else ""))
    await message.answer("\n".join(lines))
