# crm2/handlers/profile.py
from __future__ import annotations

from aiogram import Router, F
from aiogram.types import Message
import sqlite3

from crm2.db.sqlite import DB_PATH
from crm2.keyboards.profile import profile_menu_kb
from crm2.keyboards import role_kb, guest_start_kb
from crm2.db.sessions import get_upcoming_sessions, get_user_cohort_title_by_tg
from crm2.db.attendance import get_last_attendance, get_summary

router = Router(name="profile")

def _get_user_row(tg_id: int):
    with sqlite3.connect(DB_PATH) as con:
        con.row_factory = sqlite3.Row
        return con.execute(
            "SELECT id, full_name, nickname, role FROM users WHERE telegram_id=? LIMIT 1",
            (tg_id,),
        ).fetchone()

@router.message(F.text == "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
async def show_profile(message: Message):
    tg_id = message.from_user.id
    row = _get_user_row(tg_id)

    if not row:
        # –≥–æ—Å—Ç—å
        await message.answer(
            "–í—ã –ø–æ–∫–∞ –≥–æ—Å—Ç—å. –í–æ–π–¥–∏—Ç–µ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç.",
            reply_markup=guest_start_kb(),
        )
        return

    uid = row["id"]
    role = row["role"] or "user"
    fio = row["full_name"] or message.from_user.full_name or (row["nickname"] or "")
    cohort_id, cohort_title = get_user_cohort_title_by_tg(tg_id)

    # –±–ª–∏–∂–∞–π—à–µ–µ –∑–∞–Ω—è—Ç–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å –µ–≥–æ –ø–æ—Ç–æ–∫–æ–º, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å)
    nearest = None
    upc = get_upcoming_sessions(limit=1, tg_id=tg_id)
    if upc:
        s = upc[0]
        d1, d2 = s["start_date"], s["end_date"]
        code = (s.get("topic_code") or "").strip()
        dates = f"{d1} ‚Äî {d2}" if (d1 and d2 and d1 != d2) else (d1 or d2 or "‚Äî")
        nearest = f"{dates}" + (f" ‚Ä¢ {code}" if code else "")

    # –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å: —Å—É–º–º–∞—Ä–Ω–æ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∑–∞–ø–∏—Å–∏
    present, absent, late = get_summary(uid)
    last3 = get_last_attendance(uid, limit=3)
    if last3:
        last_lines = "\n".join([f"‚Ä¢ #{sid}: {st} ({at})" for (sid, st, at) in last3])
    else:
        last_lines = "‚Ä¢ –∑–∞–ø–∏—Å–µ–π –ø–æ–∫–∞ –Ω–µ—Ç"

    text = (
        "üë§ *–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç*\n\n"
        f"*–§–ò–û:* {fio}\n"
        f"*–†–æ–ª—å:* {role}\n"
        f"*–ü–æ—Ç–æ–∫:* {cohort_title or '–ë–µ–∑ –ø–æ—Ç–æ–∫–∞'}\n"
        f"*–ë–ª–∏–∂–∞–π—à–µ–µ –∑–∞–Ω—è—Ç–∏–µ:* {nearest or '‚Äî'}\n\n"
        f"*–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å:*\n"
        f"–ë—ã–ª: {present} ¬∑ –ü—Ä–æ–ø—É—Å—Ç–∏–ª: {absent} ¬∑ –û–ø–æ–∑–¥–∞–ª: {late}\n"
        f"_–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏:_\n{last_lines}\n\n"
        "–†–∞–∑–¥–µ–ª ¬´–ú–æ–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã¬ª ‚Äî —Å–∫–æ—Ä–æ."
    )
    await message.answer(text, parse_mode="Markdown", reply_markup=profile_menu_kb())

@router.message(F.text == "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –≤–∫–ª/–≤—ã–∫–ª")
async def toggle_notify(message: Message):
    # –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å user_flags.notify_enabled
    with sqlite3.connect(DB_PATH) as con:
        con.row_factory = sqlite3.Row
        u = con.execute("SELECT id FROM users WHERE telegram_id=? LIMIT 1", (message.from_user.id,)).fetchone()
        if not u:
            await message.answer("–î–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.", reply_markup=guest_start_kb())
            return
        uid = u["id"]
        # —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        r = con.execute("SELECT notify_enabled FROM user_flags WHERE user_id=? LIMIT 1", (uid,)).fetchone()
        cur = (r["notify_enabled"] if r else 1)
        nxt = 0 if cur else 1
        if r:
            con.execute("UPDATE user_flags SET notify_enabled=? WHERE user_id=?", (nxt, uid))
        else:
            con.execute("INSERT INTO user_flags(user_id, notify_enabled) VALUES (?, ?)", (uid, nxt))
        con.commit()

    await message.answer(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'–≤–∫–ª—é—á–µ–Ω—ã' if nxt else '–≤—ã–∫–ª—é—á–µ–Ω—ã'}")

@router.message(F.text == "üìÑ –ú–æ–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã")
async def my_materials(message: Message):
    # –ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
    await message.answer("–ú–æ–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã: —Å–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö PDF/—Å—Å—ã–ª–æ–∫.")
