# crm2/handlers/profile.py
from __future__ import annotations

import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

# ... —Ç–≤–æ–∏ –∏–º–ø–æ—Ä—Ç(—ã) –ë–î/—Å–µ—Ä–≤–∏—Å–æ–≤ –æ—Å—Ç–∞—é—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å ...

router = Router()

# ----------------------------------------------------------------------
# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –ø–æ–º–æ—â–Ω–∏–∫–∏

def _extract_ids(obj: Message | CallbackQuery) -> tuple[int, int]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (chat_id, user_id) –¥–ª—è Message –∏–ª–∏ CallbackQuery.
    –ù–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–æ–∑–¥–∞—ë—Ç ¬´–ø–æ–¥–¥–µ–ª—å–Ω—ã–µ¬ª Message.
    """
    if isinstance(obj, CallbackQuery):
        chat_id = obj.message.chat.id
        user_id = obj.from_user.id
    else:
        chat_id = obj.chat.id
        user_id = obj.from_user.id
    return chat_id, user_id


def _profile_kb() -> InlineKeyboardBuilder:
    kb = InlineKeyboardBuilder()
    kb.button(text="üõ† –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ç–æ–∫", callback_data="profile:set_stream")
    kb.button(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –≤–∫–ª/–≤—ã–∫–ª", callback_data="profile:toggle_notify")
    kb.button(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="profile:back_main")
    kb.adjust(1, 1, 1)
    return kb
# ----------------------------------------------------------------------


@router.message(F.text == "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
async def profile_entry(message: Message):
    await show_profile(message)


async def show_profile(obj: Message | CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–æ—Ñ–∏–ª—è. –¢–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏ Message, –∏ CallbackQuery.
    """
    chat_id, tg_id = _extract_ids(obj)

    # --- —Ç—É—Ç —Ç–≤–æ—è –ª–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ---
    # –ø—Ä–∏–º–µ—Ä:
    # user = get_user_by_telegram(tg_id)
    # next_lesson = ...
    # attendance_stats = ...

    text = (
        "üë§ *–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç*\n\n"
        f"TG ID: `{tg_id}`\n"
        # –î–æ–ø–æ–ª–Ω–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ë–î:
        # f"–§–ò–û: {user.full_name}\n"
        # f"–†–æ–ª—å: {user.role}\n"
        # f"–ü–æ—Ç–æ–∫: {stream_title}\n"
        # f"–ë–ª–∏–∂–∞–π—à–µ–µ –∑–∞–Ω—è—Ç–∏–µ: {next_lesson}\n"
        "\n–í—ã –º–æ–∂–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –ø–æ—Ç–æ–∫."
    )

    # –û—Ç–≤–µ—á–∞–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    if isinstance(obj, CallbackQuery):
        # –ü—Ä–∏ –∫–æ–ª–ª–±—ç–∫–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å *–ø—Ä–µ–¥—ã–¥—É—â–µ–µ* —Å–æ–æ–±—â–µ–Ω–∏–µ
        await obj.message.edit_text(text, reply_markup=_profile_kb().as_markup(), parse_mode="Markdown")
        await obj.answer()
    else:
        await obj.answer(text, reply_markup=_profile_kb().as_markup(), parse_mode="Markdown")


# =======================
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–∞
# =======================

@router.callback_query(F.data == "profile:set_stream")
async def ask_stream(cq: CallbackQuery):
    # –ü–æ–∫–∞–∂–∏ –≤—ã–±–æ—Ä –ø–æ—Ç–æ–∫–æ–≤ (–ø—Ä–∏–º–µ—Ä –Ω–∞ –¥–≤—É—Ö –ø–æ—Ç–æ–∫–∞—Ö)
    kb = InlineKeyboardBuilder()
    kb.button(text="–ü–æ—Ç–æ–∫ 1", callback_data="profile:set_stream:1")
    kb.button(text="–ü–æ—Ç–æ–∫ 2", callback_data="profile:set_stream:2")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="profile:back")
    kb.adjust(2, 1)
    await cq.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –ø–æ—Ç–æ–∫:", reply_markup=kb.as_markup())
    await cq.answer()


@router.callback_query(F.data.startswith("profile:set_stream:"))
async def set_stream_cb(cq: CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ—Ç–æ–∫ –∏–∑ callback_data
    try:
        stream_id = int(cq.data.split(":")[-1])
    except Exception:
        logging.exception("[PROFILE] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π stream_id –≤ callback_data=%r", cq.data)
        await cq.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ—Ç–æ–∫", show_alert=True)
        return

    # chat_id/tg_id —Ä–µ–∞–ª—å–Ω—ã ‚Äî –±–µ—Ä—ë–º –Ω–∞–ø—Ä—è–º—É—é –∏–∑ CallbackQuery
    _, tg_id = _extract_ids(cq)

    # --- —Ç—É—Ç —Å–æ—Ö—Ä–∞–Ω–∏ stream_id –≤ –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è tg_id ---
    # –ø—Ä–∏–º–µ—Ä:
    # user = get_user_by_telegram(tg_id)
    # update_user_stream(user.id, stream_id)

    await cq.answer("–ü–æ—Ç–æ–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω üëç")
    # –ò –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–Ω–æ–≤–æ (–±–µ–∑ ¬´–ø–æ–¥–¥–µ–ª—å–Ω—ã—Ö¬ª Message):
    await show_profile(cq)


@router.callback_query(F.data == "profile:back")
async def profile_back(cq: CallbackQuery):
    await show_profile(cq)


@router.callback_query(F.data == "profile:back_main")
async def profile_back_main(cq: CallbackQuery):
    # –µ—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ‚Äî –ø–æ–¥—Å—Ç–∞–≤—å –µ—ë
    from crm2.keyboards import main_menu_kb  # –ø—Ä–∏–º–µ—Ä –∏–º–ø–æ—Ä—Ç–∞
    # –°–¢–ê–õ–û:
    # –£–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ
    await cq.message.delete()
    await cq.message.answer("–ú–µ–Ω—é:", reply_markup=main_menu_kb())
    await cq.answer()


@router.callback_query(F.data == "profile:toggle_notify")
async def toggle_notify(cq: CallbackQuery):
    # –ø–µ—Ä–µ–∫–ª—é—á–∏ —Ñ–ª–∞–≥ –≤ –ë–î ...
    await cq.answer("–ì–æ—Ç–æ–≤–æ")
    await show_profile(cq)
