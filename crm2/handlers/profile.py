from __future__ import annotations

import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from crm2.services.users import get_user_by_telegram, set_user_cohort, get_cohorts

# crm2/handlers/profile.py
# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–æ—Ñ–∏–ª—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –ø–æ—Ç–æ–∫–æ–º
# –§—É–Ω–∫—Ü–∏–∏:
# - _extract_ids - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ chat_id –∏ user_id –∏–∑ Message/CallbackQuery
# - _profile_kb - –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
# - show_profile - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∫–∞–∑ –ø—Ä–æ—Ñ–∏–ª—è (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Message –∏ CallbackQuery)
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏:
# - profile_entry - –í—Ö–æ–¥ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–æ –∫–Ω–æ–ø–∫–µ
# - ask_stream - –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—ã–±–æ—Ä–∞ —É—á–µ–±–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
# - set_stream_cb - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –≤ –ë–î
# - profile_back - –í–æ–∑–≤—Ä–∞—Ç –≤ –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–æ—Ñ–∏–ª—è
# - profile_back_main - –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å —É–¥–∞–ª–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
# - toggle_notify - –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
# ... —Ç–≤–æ–∏ –∏–º–ø–æ—Ä—Ç(—ã) –ë–î/—Å–µ—Ä–≤–∏—Å–æ–≤ –æ—Å—Ç–∞—é—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å ...
# –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
# crm2/handlers/profile.py
# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–æ—Ñ–∏–ª—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –ø–æ—Ç–æ–∫–æ–º
# –§—É–Ω–∫—Ü–∏–∏:
# - _extract_ids - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ chat_id –∏ user_id –∏–∑ Message/CallbackQuery
# - _profile_kb - –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
# - show_profile - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∫–∞–∑ –ø—Ä–æ—Ñ–∏–ª—è (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Message –∏ CallbackQuery)
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏:
# - profile_entry - –í—Ö–æ–¥ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–æ –∫–Ω–æ–ø–∫–µ
# - ask_stream - –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—ã–±–æ—Ä–∞ —É—á–µ–±–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
# - set_stream_cb - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –≤ –ë–î
# - profile_back - –í–æ–∑–≤—Ä–∞—Ç –≤ –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–æ—Ñ–∏–ª—è
# - profile_back_main - –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å —É–¥–∞–ª–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
# - toggle_notify - –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

router = Router()

# ----------------------------------------------------------------------
# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –ø–æ–º–æ—â–Ω–∏–∫–∏

def _extract_ids(obj: Message | CallbackQuery) -> tuple[int, int]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (chat_id, user_id) –¥–ª—è Message –∏–ª–∏ CallbackQuery.
    –ù–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–æ–∑–¥–∞—ë—Ç ¬´–ø–æ–¥–¥–µ–ª—å–Ω—ã–µ¬ª Message.
    """
    if isinstance(obj, CallbackQuery):
        chat_id = obj.message.chat.id
        user_id = obj.from_user.id
    else:
        chat_id = obj.chat.id
        user_id = obj.from_user.id
    return chat_id, user_id


def _profile_kb() -> InlineKeyboardBuilder:
    kb = InlineKeyboardBuilder()
    kb.button(text="üß≠ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ç–æ–∫", callback_data="profile:set_stream")
    kb.button(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –≤–∫–ª/–≤—ã–∫–ª", callback_data="profile:toggle_notify")
    kb.button(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="profile:back_main")
    kb.adjust(1, 1, 1)
    return kb
# ----------------------------------------------------------------------


@router.message(F.text == "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
async def profile_entry(message: Message):
    await show_profile(message)


async def show_profile(obj: Message | CallbackQuery):
    chat_id, tg_id = _extract_ids(obj)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    user = await get_user_by_telegram(tg_id)

    if not user:
        text = "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."
        if isinstance(obj, CallbackQuery):
            await obj.message.edit_text(text)
        else:
            await obj.answer(text)
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ç–æ–∫–µ
    cohort_info = "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    if user.get('cohort_id'):
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞
        cohorts = await get_cohorts()
        cohort_name = next((c['name'] for c in cohorts if c['id'] == user['cohort_id']), f"–ü–æ—Ç–æ–∫ {user['cohort_id']}")
        cohort_info = f"{cohort_name}"

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    created_at = user.get('created_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    if created_at and created_at != '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ':
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º SQLite datetime –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
            from datetime import datetime
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ '2025-10-15 10:59:43'
            dt = datetime.strptime(created_at, '%Y-%m-%d %H:%M:%S')
            created_at = dt.strftime('%d.%m.%Y –≤ %H:%M')
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
            logging.debug(f"Could not parse date {created_at}: {e}")

    text = (
        "üë§ *–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç*\n\n"
        f"üÜî TG ID: `{tg_id}`\n"
        f"üë§ –õ–æ–≥–∏–Ω: {user.get('nickname', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üìõ –ü–æ–ª–Ω–æ–µ –∏–º—è: {user.get('full_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üìß Email: {user.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üß≠ –ü–æ—Ç–æ–∫: {cohort_info}\n"
        f"üé≠ –†–æ–ª—å: {user.get('role', 'user')}\n"
        f"üìÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {created_at}\n"
        "\n–í—ã –º–æ–∂–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –ø–æ—Ç–æ–∫ –æ–±—É—á–µ–Ω–∏—è."
    )

    # if isinstance(obj, CallbackQuery):
    #     await obj.message.edit_text(text, reply_markup=_profile_kb().as_markup(), parse_mode="Markdown")
    #     await obj.answer()
    # else:
    #     await obj.answer(text, reply_markup=_profile_kb().as_markup(), parse_mode="Markdown")
    if isinstance(obj, CallbackQuery):
        await obj.message.edit_text(text, reply_markup=_profile_kb().as_markup())
        await obj.answer()
    else:
        await obj.answer(text, reply_markup=_profile_kb().as_markup())

# =======================
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–∞
# =======================

@router.callback_query(F.data == "profile:set_stream")
async def ask_stream(cq: CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Ç–æ–∫–æ–≤ –∏–∑ –ë–î
    cohorts = await get_cohorts()

    if not cohorts:
        await cq.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤", show_alert=True)
        return

    kb = InlineKeyboardBuilder()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Ç–æ–∫–∞
    for cohort in cohorts:
        kb.button(text=f"üß≠ {cohort['name']}", callback_data=f"profile:set_stream:{cohort['id']}")

    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="profile:back")
    kb.adjust(1)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥

    await cq.message.edit_text(
        "üéØ *–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —É—á–µ–±–Ω—ã–π –ø–æ—Ç–æ–∫:*\n\n"
        "‚Ä¢ 09.2023 - –ü–æ—Ç–æ–∫ —Å–µ–Ω—Ç—è–±—Ä—è 2023\n"
        "‚Ä¢ 04.2025 - –ü–æ—Ç–æ–∫ –∞–ø—Ä–µ–ª—è 2025",
        reply_markup=kb.as_markup(),
        parse_mode="Markdown"
    )
    await cq.answer()


@router.callback_query(F.data.startswith("profile:set_stream:"))
async def set_stream_cb(cq: CallbackQuery):
    try:
        cohort_id = int(cq.data.split(":")[-1])
    except Exception:
        logging.exception("[PROFILE] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π cohort_id")
        await cq.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ—Ç–æ–∫", show_alert=True)
        return

    _, tg_id = _extract_ids(cq)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ç–æ–∫ –≤ –ë–î
    success = await set_user_cohort(tg_id, cohort_id)

    if success:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        cohorts = await get_cohorts()
        cohort_name = next((c['name'] for c in cohorts if c['id'] == cohort_id), f"–ü–æ—Ç–æ–∫ {cohort_id}")

        await cq.answer(f"‚úÖ –ü–æ—Ç–æ–∫ '{cohort_name}' —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
        await show_profile(cq)
    else:
        await cq.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞", show_alert=True)


# –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
@router.callback_query(F.data == "profile:back")
async def profile_back(cq: CallbackQuery):
    await show_profile(cq)


@router.callback_query(F.data == "profile:back_main")
async def profile_back_main(cq: CallbackQuery):
    from crm2.keyboards import main_menu_kb
    await cq.message.delete()
    await cq.message.answer("–ú–µ–Ω—é:", reply_markup=main_menu_kb())
    await cq.answer()


@router.callback_query(F.data == "profile:toggle_notify")
async def toggle_notify(cq: CallbackQuery):
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    await cq.answer("üîî –§—É–Ω–∫—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    await show_profile(cq)
