import os
import asyncio
import requests
from dotenv import load_dotenv
from telegram import Update, Message, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
load_dotenv('token.env')
TOKEN = os.getenv('TOKEN')
API_KEY = os.getenv('IGOR_KHOD_API_KEY')


class AIBot:
    def __init__(self):
        self.API_URL = "https://api.deepseek.com/v1/chat/completions"
        self.API_TIMEOUT = 10
        self.MAX_RETRIES = 3
        self.RETRY_DELAY = 1.5

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –∫–Ω–æ–ø–∫–æ–π"""
        button = KeyboardButton("üîÑ –°–ø—Ä–æ—Å–∏—Ç—å –ò–ò")
        reply_markup = ReplyKeyboardMarkup([[button]], resize_keyboard=True)
        await update.message.reply_text(
            "ü§ñ –ì–æ—Ç–æ–≤ –∫ –≤–æ–ø—Ä–æ—Å–∞–º! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=reply_markup
        )

    async def show_animation(self, update: Update) -> Message:
        """–í–∏–∑—É–∞–ª—å–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏"""
        phases = [
            "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–ø—Ä–æ—Å",
            "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–ø—Ä–æ—Å.",
            "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–ø—Ä–æ—Å..",
            "üß† –§–æ—Ä–º–∏—Ä—É—é –æ—Ç–≤–µ—Ç",
            "üß† –§–æ—Ä–º–∏—Ä—É—é –æ—Ç–≤–µ—Ç.",
            "üß† –§–æ—Ä–º–∏—Ä—É—é –æ—Ç–≤–µ—Ç.."
        ]
        msg = await update.message.reply_text(phases[0])

        for i in range(16):  # 8 —Å–µ–∫—É–Ω–¥ –∞–Ω–∏–º–∞—Ü–∏–∏
            await asyncio.sleep(0.5)
            try:
                await msg.edit_text(phases[i % len(phases)])
            except:
                break
        return msg

    async def query_ai(self, prompt: str) -> str:
        """–£—Å—Ç–æ–π—á–∏–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ API —Å –ø–æ–≤—Ç–æ—Ä–∞–º–∏"""
        headers = {
            "Authorization": f"Bearer {API_KEY}",
            "Content-Type": "application/json"
        }
        payload = {
            "model": "deepseek-chat",
            "messages": [{"role": "user", "content": prompt}],
            "temperature": 0.7
        }

        for attempt in range(self.MAX_RETRIES):
            try:
                response = requests.post(
                    self.API_URL,
                    headers=headers,
                    json=payload,
                    timeout=self.API_TIMEOUT
                )
                response.raise_for_status()
                return response.json()['choices'][0]['message']['content']

            except requests.exceptions.Timeout:
                if attempt == self.MAX_RETRIES - 1:
                    raise Exception("–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ–∂–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ ‚è≥")
                await asyncio.sleep(self.RETRY_DELAY * (attempt + 1))

            except Exception as e:
                raise Exception(f"–û—à–∏–±–∫–∞ API: {str(e)}")

    async def handle_request(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤"""
        if update.message.text == "üîÑ –°–ø—Ä–æ—Å–∏—Ç—å –ò–ò":
            await update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:", reply_markup=None)
            context.user_data['awaiting_question'] = True
            return

        if not context.user_data.get('awaiting_question'):
            button = KeyboardButton("üîÑ –°–ø—Ä–æ—Å–∏—Ç—å –ò–ò")
            reply_markup = ReplyKeyboardMarkup([[button]], resize_keyboard=True)
            await update.message.reply_text("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞:", reply_markup=reply_markup)
            return

        question = update.message.text
        processing_msg = None

        try:
            # –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏
            processing_msg = await self.show_animation(update)

            # –ó–∞–ø—Ä–æ—Å –∫ API
            answer = await self.query_ai(question)

            # –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
            await processing_msg.delete()
            chunks = [answer[i:i + 4000] for i in range(0, len(answer), 4000)]
            for chunk in chunks:
                await update.message.reply_text(chunk)

        except Exception as e:
            error_msg = str(e)
            if processing_msg:
                await processing_msg.edit_text(error_msg)
            else:
                await update.message.reply_text(error_msg)

        finally:
            # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            button = KeyboardButton("üîÑ –°–ø—Ä–æ—Å–∏—Ç—å –ò–ò")
            reply_markup = ReplyKeyboardMarkup([[button]], resize_keyboard=True)
            final_msg = "‚úÖ –ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤—ã–º –≤–æ–ø—Ä–æ—Å–∞–º!" if not processing_msg else ""
            await update.message.reply_text(final_msg, reply_markup=reply_markup)
            context.user_data['awaiting_question'] = False


def main():
    bot = AIBot()
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", bot.start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_request))

    print("üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –≤ Telegram.")
    app.run_polling()


if __name__ == "__main__":
    main()