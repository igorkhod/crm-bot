import os
import json
import random
from datetime import datetime
from pathlib import Path
import telebot
from telebot import types
from telegram_bot_calendar import DetailedTelegramCalendar, LSTEP
from dotenv import load_dotenv
import requests
import time  # –î–æ–±–∞–≤—å—Ç–µ –≤ –∏–º–ø–æ—Ä—Ç—ã
from pytils.dt import ru_strftime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
from db import update_visitor

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv(Path(__file__).parent / 'token.env')
TOKEN = os.getenv("TELEGRAM_TOKEN")
bot = Bot(token=TOKEN)
dp = Dispatcher()

WEATHER_API_KEY = os.getenv("WEATHER_API_KEY")
CURRENCY_API = "https://www.cbr-xml-daily.ru/daily_json.js"
QUOTES_FILE = Path(__file__).parent / 'quotes.json'
# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –∫–µ—à–∞ –ø–æ–≥–æ–¥—ã
WEATHER_CACHE = {}

# –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –ø–æ–≥–æ–¥—ã
CITIES = {
    "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫": "Krasnoyarsk",
    "–ò—Ä–∫—É—Ç—Å–∫": "Irkutsk"
}

WEEKDAYS_RU = {
    'Monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
    'Tuesday': '–í—Ç–æ—Ä–Ω–∏–∫',
    'Wednesday': '–°—Ä–µ–¥–∞',
    'Thursday': '–ß–µ—Ç–≤–µ—Ä–≥',
    'Friday': '–ü—è—Ç–Ω–∏—Ü–∞',
    'Saturday': '–°—É–±–±–æ—Ç–∞',
    'Sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
}


def get_cached_weather(city_code):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–≥–æ–¥—É –∏–∑ –∫–µ—à–∞, –µ—Å–ª–∏ –æ–Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞"""
    cached = WEATHER_CACHE.get(city_code)
    if cached and (time.time() - cached['timestamp']) < 3600:  # 1 —á–∞—Å
        return cached['data']
    return None


def cache_weather(city_code, data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–≥–æ–¥—É –≤ –∫–µ—à"""
    WEATHER_CACHE[city_code] = {
        'data': data,
        'timestamp': time.time()
    }


def load_quotes():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ü–∏—Ç–∞—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        if QUOTES_FILE.exists():
            with open(QUOTES_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        return []
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–∏—Ç–∞—Ç: {e}")
        return []


def create_keyboard():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        types.KeyboardButton("üîÆüïâÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –≥—Ä—É–ø–ø—É –ü—Å–∏—Ö–æ–Ω–µ—Ç–∏–∫–∞ –ò–Ω—å-–Ø–Ω"),
        types.KeyboardButton("üå≤‚öôÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –≥—Ä—É–ø–ø—É –ò—Ä–∫—É—Ç—Å–∫ –ø—Å–∏—Ö–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"),
        types.KeyboardButton("üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å"),
        types.KeyboardButton("üå§ –ü–æ–≥–æ–¥–∞"),
        types.KeyboardButton("üíµ –ö—É—Ä—Å –≤–∞–ª—é—Ç"),
        types.KeyboardButton("üí¨ –°–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞"),
        types.KeyboardButton("‚ùì –ü–æ–º–æ—â—å")
    ]
    markup.add(*buttons)
    return markup


@bot.message_handler(func=lambda m: m.text == "üîÆüïâÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –≥—Ä—É–ø–ø—É –ü—Å–∏—Ö–æ–Ω–µ—Ç–∏–∫–∞ –ò–Ω—å-–Ø–Ω")
def go_to_psychonetics(message):
    group_link = "https://t.me/+EL9esd0xZ-xkMTU6"

    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è MarkdownV2
    escaped_link = group_link.replace('-', r'\-').replace('.', r'\.').replace('_', r'\_')

    text = (
            r"üîÆ –ì—Ä—É–ø–ø–∞ ¬´–ü—Å–∏—Ö–æ–Ω–µ—Ç–∏–∫–∞ –ò–Ω—å\-–Ø–Ω¬ª:" + "\n\n"
                                                 f"[–ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å]({escaped_link}) –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞" + "\n\n"
                                                                                                   r"_–ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ—ë –≤—Ä—É—á–Ω—É—é:_" + "\n"
                                                                                                                                                          f"`{escaped_link}`"
    )

    bot.send_message(
        chat_id=message.chat.id,
        text=text,
        parse_mode="MarkdownV2",
        reply_markup=create_keyboard()
    )


@bot.message_handler(func=lambda m: m.text == "üå≤‚öôÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –≥—Ä—É–ø–ø—É –ò—Ä–∫—É—Ç—Å–∫ –ø—Å–∏—Ö–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏")
def go_to_irkutsk(message):
    group_link = "https://t.me/+7ZBrobhAJoRhM2U6"
    bot.send_message(
        chat_id=message.chat.id,
        text=f"üå≤ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –≥—Ä—É–ø–ø–µ '–ò—Ä–∫—É—Ç—Å–∫ –ø—Å–∏—Ö–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏':\n{group_link}",
        reply_markup=create_keyboard()
    )


def create_city_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        types.KeyboardButton("–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫"),
        types.KeyboardButton("–ò—Ä–∫—É—Ç—Å–∫"),
        types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥")
    ]
    markup.add(*buttons)
    return markup


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"

@dp.message(Command("start"))
async def cmd_start(message: Message):
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    update_visitor(
        user_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name,
    )

    today = datetime.now().strftime("%d.%m.%Y")
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç! –Ø —Ä–∞–±–æ—Ç–∞—é —á–µ—Ä–µ–∑ WEBHOOK ‚òÅÔ∏è\n–°–µ–≥–æ–¥–Ω—è {today}\n–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: RENDER",
        reply_markup=main_keyboard()
    )
    await message.answer("–ü–æ–ø—Ä–æ–±—É–π –ò–ò:", reply_markup=ai_keyboard())


# –∫–æ–Ω–µ—Ü –±–ª–æ–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"

@bot.message_handler(func=lambda m: m.text == "üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å")
def calendar_handler(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    calendar, step = DetailedTelegramCalendar(calendar_id=2, locale='ru').build()
    bot.send_message(
        message.chat.id,
        f"–ö–∞–ª–µ–Ω–¥–∞—Ä—å: –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥",
        # f"–ö–∞–ª–µ–Ω–¥–∞—Ä—å 2: –í—ã–±–æ—Ä  {LSTEP[step]}",
        reply_markup=calendar

    )


@bot.callback_query_handler(func=DetailedTelegramCalendar.func(calendar_id=2))
def calendar_callback(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ"""
    result, key, step = DetailedTelegramCalendar(calendar_id=2, locale='ru').process(call.data)
    if not result and key:
        bot.edit_message_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ {LSTEP[step]}",
            # f"–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü, –¥–µ–Ω—å",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=key
        )
    elif result:
        bot.edit_message_text(
            f"üìÖ –í—ã–±—Ä–∞–Ω–æ: {result.strftime('%d.%m.%Y')}",
            call.message.chat.id,
            call.message.message_id
        )
        bot.send_message(
            call.message.chat.id,
            "–ß—Ç–æ –¥–∞–ª—å—à–µ?",
            reply_markup=create_keyboard()
        )


@bot.message_handler(func=lambda m: m.text == "üå§ –ü–æ–≥–æ–¥–∞")
def ask_city_for_weather(message):
    """–ó–∞–ø—Ä–æ—Å –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–≥–æ–¥—ã"""
    bot.send_message(
        chat_id=message.chat.id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:",
        reply_markup=create_city_keyboard()
    )


# -------------–ø–æ–≥–æ–¥–∞--------------------------

@bot.message_handler(func=lambda m: m.text in ["–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫", "–ò—Ä–∫—É—Ç—Å–∫"])
def show_weather(message):
    """–ü–æ–∫–∞–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞"""
    try:
        city_name = message.text
        city_code = CITIES.get(city_name)

        if not city_code:
            bot.send_message(
                chat_id=message.chat.id,
                text=f"‚ö†Ô∏è –ì–æ—Ä–æ–¥ {city_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ",
                reply_markup=create_keyboard()
            )
            return

        url = f"http://api.openweathermap.org/data/2.5/weather?q={city_code},RU&appid={WEATHER_API_KEY}&units=metric&lang=ru"
        response = requests.get(url)
        data = response.json()

        if response.status_code != 200:
            error_msg = data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API')
            raise Exception(f"API Error {response.status_code}: {error_msg}")

        temp = data['main']['temp']
        description = data['weather'][0]['description'].capitalize()
        humidity = data['main']['humidity']
        wind = data['wind']['speed']

        weather_text = (
            f"üå§ –ü–æ–≥–æ–¥–∞ –≤ {city_name}:\n"
            f"‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {round(temp, 1)}¬∞C\n"
            f"‚Ä¢ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {description}\n"
            f"‚Ä¢ –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
            f"‚Ä¢ –í–µ—Ç–µ—Ä: {wind} –º/—Å"
        )

        bot.send_message(
            chat_id=message.chat.id,
            text=weather_text,
            reply_markup=create_keyboard()
        )

    except Exception as e:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        error_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        error_details = f"Time: {error_time}, City: {city_name}, Error: {str(e)}"
        print(f"‚õà Weather API Error: {error_details}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        if "404" in str(e):
            error_msg = "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –ø–æ–≥–æ–¥—ã"
        elif "401" in str(e):
            error_msg = "–ü—Ä–æ–±–ª–µ–º–∞ —Å API-–∫–ª—é—á–æ–º –ø–æ–≥–æ–¥—ã"
        else:
            error_msg = "–°–µ—Ä–≤–∏—Å –ø–æ–≥–æ–¥—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.send_message(
            chat_id=message.chat.id,
            text=f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è {city_name}\n"
                 f"–ü—Ä–∏—á–∏–Ω–∞: {error_msg}\n"
                 f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
            reply_markup=create_keyboard()
        )

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        admin_chat_id = os.getenv("ADMIN_ID")  # –ß—Ç–µ–Ω–∏–µ –∏–∑ token.env
        if admin_chat_id:
            try:
                bot.send_message(
                    chat_id=int(admin_chat_id),
                    text=f"üö® –û—à–∏–±–∫–∞ –ø–æ–≥–æ–¥—ã:\n{error_details}"
                )
            except Exception as admin_error:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: {admin_error}")


# ------------------–∫–æ–Ω–µ—Ü –±–ª–æ–∫–∞ –ø–æ–≥–æ–¥–∞--------------

@bot.message_handler(func=lambda m: m.text == "üíµ –ö—É—Ä—Å –≤–∞–ª—é—Ç")
def show_currency(message):
    try:
        response = requests.get(CURRENCY_API)
        data = response.json()

        usd = data['Valute']['USD']['Value']
        eur = data['Valute']['EUR']['Value']
        cny = data['Valute']['CNY']['Value']

        text = (
            "üìä –ö—É—Ä—Å –¶–ë –†–§:\n"
            f"‚Ä¢ USD: {usd:.2f} ‚ÇΩ\n"
            f"‚Ä¢ EUR: {eur:.2f} ‚ÇΩ\n"
            f"‚Ä¢ CNY: {cny:.2f} ‚ÇΩ\n"
            f"\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {data['Date'][:10]}"
        )
        bot.send_message(message.chat.id, text, reply_markup=create_keyboard())
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}", reply_markup=create_keyboard())


@bot.message_handler(func=lambda m: m.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥")
def back_to_main(message):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    bot.send_message(
        chat_id=message.chat.id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_keyboard()
    )


@bot.message_handler(func=lambda m: m.text == "üí¨ –°–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞")
def send_random_quote(message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–π —Ü–∏—Ç–∞—Ç—ã"""
    quotes = load_quotes()

    if not quotes:
        bot.send_message(
            chat_id=message.chat.id,
            text="üì≠ –¶–∏—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
            reply_markup=create_keyboard()
        )
        return

    quote = random.choice(quotes)
    if isinstance(quote, dict):
        text = quote.get('text', '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞')
        response = f"üí¨ –¶–∏—Ç–∞—Ç–∞:\n\n¬´{text}¬ª\n‚Äî"
    else:
        response = f"üí¨ –¶–∏—Ç–∞—Ç–∞:\n\n¬´{quote}¬ª"

    bot.send_message(
        chat_id=message.chat.id,
        text=response,
        reply_markup=create_keyboard()
    )


@bot.message_handler(func=lambda m: m.text == "‚ùì –ü–æ–º–æ—â—å")
def show_help(message):
    """–ü–æ–∫–∞–∑ —Å–ø—Ä–∞–≤–∫–∏"""
    help_text = (
        "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É:\n\n"
        "üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å - –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É\n"
        "üå§ –ü–æ–≥–æ–¥–∞ - —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É\n"
        "üí¨ –°–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞ - –ø–æ–ª—É—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—É\n"
        "‚ùì –ü–æ–º–æ—â—å - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )
    bot.send_message(
        chat_id=message.chat.id,
        text=help_text,
        reply_markup=create_keyboard()
    )


if __name__ == '__main__':
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    bot.polling(none_stop=True)
