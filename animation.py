import os
import asyncio
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞
load_dotenv("token.env")
BOT_TOKEN = os.getenv("TELEGRAM_TOKEN")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


# 1. –ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—Ä–µ–ª–∏–≤–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ DeepSeek
async def animate_deepseek_button(chat_id: int, message_id: int):
    emojis = ["üî∑", "üîµ", "üí†", "üåÄ", "üåê", "üíé"]
    for emoji in emojis * 2:  # 2 –ø–æ–ª–Ω—ã—Ö —Ü–∏–∫–ª–∞
        keyboard = InlineKeyboardBuilder()
        keyboard.row(
            types.InlineKeyboardButton(text=f"{emoji} DeepSeek", callback_data="deepseek"),
            types.InlineKeyboardButton(text="ü§ñ OpenAI", callback_data="openai")
        )
        try:
            await bot.edit_message_reply_markup(
                chat_id=chat_id,
                message_id=message_id,
                reply_markup=keyboard.as_markup()
            )
            await asyncio.sleep(0.3)  # –°–∫–æ—Ä–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏
        except:
            break


# 2. –ê–Ω–∏–º–∞—Ü–∏—è —Ç–æ—á–µ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ (–≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç)
async def show_waiting_dots(chat_id: int):
    # dots = ["", ".", "..", "..."]
    # dots = ["‚óè", "‚óè", "‚óè‚óè", "‚óè‚óè‚óè"]
    dots = ["‚Ä¢", "‚óè", "‚óè‚óè", "‚óè‚óè‚óè"]
    msg = await bot.send_message(chat_id, "–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ò–ò –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å")

    for _ in range(8):  # 8 —Ü–∏–∫–ª–æ–≤ (~4 —Å–µ–∫—É–Ω–¥—ã)
        for dot in dots:
            try:
                await msg.edit_text(f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ò–ò –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å  {dot}")
                await asyncio.sleep(0.25)  # –ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            except:
                return
    return msg


# 3. –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def get_main_keyboard():
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="üî∑ DeepSeek", callback_data="deepseek"),
        types.InlineKeyboardButton(text="ü§ñ OpenAI", callback_data="openai")
    )
    return builder.as_markup()


# 4. –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ò–ò –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞:",
        reply_markup=get_main_keyboard()
    )


@dp.callback_query(F.data.in_(["deepseek", "openai"]))
async def handle_ai_selection(callback: types.CallbackQuery):
    chat_id = callback.message.chat.id
    message_id = callback.message.message_id

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    button_animation = asyncio.create_task(animate_deepseek_button(chat_id, message_id))
    dots_message = await show_waiting_dots(chat_id)

    # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É (4 —Å–µ–∫—É–Ω–¥—ã)
    await asyncio.sleep(4)

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏
    button_animation.cancel()
    await dots_message.delete()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    ai_name = "DeepSeek" if callback.data == "deepseek" else "OpenAI"
    await callback.message.answer(
        f"‚úÖ {ai_name} –æ—Ç–≤–µ—Ç–∏–ª:\n"
        "–≠—Ç–æ –∏–º–∏—Ç–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏",
        reply_markup=get_main_keyboard()
    )
    await callback.answer()


# –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start")
    asyncio.run(main())