import os
import asyncio
import requests
from dotenv import load_dotenv
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    Message
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
load_dotenv('token.env')
TOKEN = os.getenv('TOKEN')
DEEPSEEK_API_KEY = os.getenv('IGOR_KHOD_API_KEY')


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    button = KeyboardButton("üîÑ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ò–ò")
    reply_markup = ReplyKeyboardMarkup([[button]], resize_keyboard=True)
    await update.message.reply_text(
        "ü§ñ –Ø –±–æ—Ç —Å DeepSeek AI. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞:",
        reply_markup=reply_markup
    )


async def show_typing_animation(update: Update) -> Message:
    """–ê–Ω–∏–º–∞—Ü–∏—è —Ç–æ—á–µ–∫ —á–µ—Ä–µ–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    dots = ["", ".", "..", "..."]
    message = await update.message.reply_text("ü§ñ –î—É–º–∞—é")

    for i in range(12):  # 12 –∏—Ç–µ—Ä–∞—Ü–∏–π √ó 0.5 —Å–µ–∫ = 6 —Å–µ–∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ
        await asyncio.sleep(0.5)
        try:
            await message.edit_text(f"ü§ñ –î—É–º–∞—é{dots[i % 4]}")
        except:
            break
    return message


async def handle_ai_request(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message.text == "üîÑ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ò–ò":
        await update.message.reply_text(
            "üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:",
            reply_markup=None
        )
        context.user_data['awaiting_question'] = True
        return

    if not context.user_data.get('awaiting_question'):
        button = KeyboardButton("üîÑ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ò–ò")
        reply_markup = ReplyKeyboardMarkup([[button]], resize_keyboard=True)
        await update.message.reply_text(
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞:",
            reply_markup=reply_markup
        )
        return

    question = update.message.text

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    animation_task = asyncio.create_task(show_typing_animation(update))

    try:
        # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
        headers = {"Authorization": f"Bearer {DEEPSEEK_API_KEY}"}
        data = {
            "model": "deepseek-chat",
            "messages": [{"role": "user", "content": question}],
            "temperature": 0.7
        }

        response = requests.post(
            "https://api.deepseek.com/v1/chat/completions",
            headers=headers,
            json=data,
            timeout=10
        ).json()

        answer = response['choices'][0]['message']['content']

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        animation_task.cancel()

        # –£–¥–∞–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not animation_task.done():
            await (await animation_task).delete()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await update.message.reply_text(answer)

    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É
        button = KeyboardButton("üîÑ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ò–ò")
        reply_markup = ReplyKeyboardMarkup([[button]], resize_keyboard=True)
        await update.message.reply_text(
            "–ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤—ã–º –≤–æ–ø—Ä–æ—Å–∞–º!",
            reply_markup=reply_markup
        )


def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_ai_request))
    print("üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ /start –≤ Telegram.")
    app.run_polling()


if __name__ == "__main__":
    main()