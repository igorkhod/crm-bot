import os
import requests
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from PIL import Image, ImageDraw, ImageFont
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# logging.basicConfig(
#     format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
#     level=logging.INFO
# )
# logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
load_dotenv("token.env")
TOKEN = os.getenv("TOKEN")
WEATHER_API_KEY = os.getenv("WEATHER_API_KEY")

# –°–ª–æ–≤–∞—Ä—å –≥–æ—Ä–æ–¥–æ–≤
CITIES = {
    "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫": {
        "code": "Krasnoyarsk",
        "emoji": "üèôÔ∏è"
    },
    "–ò—Ä–∫—É—Ç—Å–∫": {
        "code": "Irkutsk",
        "emoji": "üèîÔ∏è"
    }
}


async def generate_weather_image(city: str, weather_data: dict):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–≥–æ–¥–æ–π"""
    try:
        img = Image.new('RGB', (800, 400), color=(240, 240, 240))
        draw = ImageDraw.Draw(img)

        # –õ–µ–≤–∞—è —á–∞—Å—Ç—å - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
        try:
            city_img = Image.open(f"images/{CITIES[city]['code']}.jpg")
            city_img = city_img.resize((400, 400))
            img.paste(city_img, (0, 0))
        except Exception as e:
            #            logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞: {e}")
            draw.rectangle([0, 0, 400, 400], fill="#3498db")
            try:
                font = ImageFont.truetype("arial.ttf", 30)
            except:
                font = ImageFont.load_default()
            draw.text((100, 180), f"{CITIES[city]['emoji']} {city}", fill="white", font=font)

        # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–≥–æ–¥–µ
        try:
            font = ImageFont.truetype("arial.ttf", 30)
        except:
            font = ImageFont.load_default()

        weather_text = f"""{CITIES[city]['emoji']} –ü–æ–≥–æ–¥–∞ –≤ {city}
üå°Ô∏è {weather_data['temp']}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è {weather_data['feels_like']}¬∞C)
‚òÄÔ∏è {weather_data['description']}
üå¨Ô∏è –í–µ—Ç–µ—Ä: {weather_data['wind_speed']} –º/—Å
üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather_data['humidity']}%
üïí {weather_data['time']}"""

        draw.text((420, 50), weather_text, fill="black", font=font)
        img.save("weather_card.jpg")
        return True
    except Exception as e:
        #        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return False


async def get_weather_data(city: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ"""
    try:
        city_code = CITIES.get(city, {}).get('code', city)
        url = f"http://api.openweathermap.org/data/2.5/weather?q={city_code}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
        response = requests.get(url).json()

        return {
            'temp': int(response["main"]["temp"]),
            'feels_like': int(response["main"]["feels_like"]),
            'description': response["weather"][0]["description"],
            'wind_speed': response["wind"]["speed"],
            'humidity': response["main"]["humidity"],
            'time': datetime.now().strftime("%H:%M")
        }
    except Exception as e:
        #        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–≥–æ–¥—ã: {e}")
        return None


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    cities_list = "\n".join([f"{data['emoji']} {name}" for name, data in CITIES.items()])
    await update.message.reply_text(
        f"üå§Ô∏è –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ–≥–æ–¥—ã.\n"
        f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞:\n{cities_list}\n\n"
        "–û—Ç–ø—Ä–∞–≤—å /weather [–≥–æ—Ä–æ–¥] –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: /weather –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫"
    )


async def weather(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /weather"""
    city = " ".join(context.args) if context.args else "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫"

    if city not in CITIES:
        await update.message.reply_text("–≠—Ç–æ—Ç –≥–æ—Ä–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞:\n" +
                                        "\n".join(CITIES.keys()))
        return

    #    logger.info(f"–ó–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞: {city}")

    weather_data = await get_weather_data(city)
    if not weather_data:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    if await generate_weather_image(city, weather_data):
        with open("weather_card.jpg", "rb") as photo:
            await update.message.reply_photo(
                photo=photo,
                caption=f"{CITIES[city]['emoji']} –ü–æ–≥–æ–¥–∞ –≤ {city} –Ω–∞ {weather_data['time']}"
            )
    else:
        await update.message.reply_text(
            f"{CITIES[city]['emoji']} –ü–æ–≥–æ–¥–∞ –≤ {city}:\n"
            f"üå°Ô∏è {weather_data['temp']}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è {weather_data['feels_like']}¬∞C)\n"
            f"‚òÄÔ∏è {weather_data['description']}\n"
            f"üå¨Ô∏è –í–µ—Ç–µ—Ä: {weather_data['wind_speed']} –º/—Å\n"
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather_data['humidity']}%\n"
            f"üïí –û–±–Ω–æ–≤–ª–µ–Ω–æ: {weather_data['time']}"
        )


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        app = Application.builder().token(TOKEN).build()

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("weather", weather))

        #        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
        app.run_polling()
#    except Exception as e:


#       logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")


if __name__ == "__main__":
    main()
