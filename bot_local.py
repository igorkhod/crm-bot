import os
import json
import random
from datetime import datetime
from pathlib import Path

from fastapi import FastAPI, Request
import uvicorn
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
import requests
import aiohttp
from db import init_db
from contextlib import asynccontextmanager

# ---- –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ----
local_env = Path(__file__).parent / "token.env"

if local_env.exists():
    ENVIRONMENT = "LOCAL"
    load_dotenv(local_env)
    print("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ token.env")
else:
    ENVIRONMENT = "RENDER"
    load_dotenv("/etc/secrets/token.env")
    print("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ /etc/secrets/token.env")

TOKEN = os.getenv("TELEGRAM_TOKEN")
WEATHER_API_KEY = os.getenv("WEATHER_API_KEY")

bot = Bot(token=TOKEN)
init_db()
dp = Dispatcher()
app = FastAPI()

user_choice = {}
QUOTES_FILE = Path(__file__).parent / "data" / "quotes.json"

CITIES = {
    "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫": "Krasnoyarsk",
    "–ò—Ä–∫—É—Ç—Å–∫": "Irkutsk"
}

WEEKDAYS_RU = {
    'Monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
    'Tuesday': '–í—Ç–æ—Ä–Ω–∏–∫',
    'Wednesday': '–°—Ä–µ–¥–∞',
    'Thursday': '–ß–µ—Ç–≤–µ—Ä–≥',
    'Friday': '–ü—è—Ç–Ω–∏—Ü–∞',
    'Saturday': '–°—É–±–±–æ—Ç–∞',
    'Sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
}


# === –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ===
def main_keyboard():
    kb = [
        [KeyboardButton(text="üîÆ –ü—Å–∏—Ö–æ–Ω–µ—Ç–∏–∫–∞ –ò–Ω—å-–Ø–Ω"),
         KeyboardButton(text="üå≤ –ò—Ä–∫—É—Ç—Å–∫ –ø—Å–∏—Ö–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏")],
        [KeyboardButton(text="üå§ –ü–æ–≥–æ–¥–∞"),
         KeyboardButton(text="üíµ –ö—É—Ä—Å –≤–∞–ª—é—Ç")],
        [KeyboardButton(text="üí¨ –¶–∏—Ç–∞—Ç–∞"),
         KeyboardButton(text="ü§ñ –í—ã–±–æ—Ä –ò–ò")],
        [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")]
    ]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)


def ai_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="ü§ñ ChatGPT", callback_data="ask_gpt"),
            InlineKeyboardButton(text="üß† DeepSeek", callback_data="ask_deepseek"),
        ]
    ])


def city_keyboard():
    kb = [
        [KeyboardButton(text=name)] for name in CITIES.keys()
    ]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)


def load_quotes():
    if QUOTES_FILE.exists():
        try:
            with open(QUOTES_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        except:
            return []
    return []


# === /start ===
@dp.message(Command("start"))
async def cmd_start(message: Message):
    now = datetime.now()
    weekday_en = now.strftime("%A")
    weekday_ru = WEEKDAYS_RU.get(weekday_en, weekday_en)
    date_str = now.strftime("%d.%m.%Y") + f" ({weekday_ru})"

    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç! "
        f"–°–µ–≥–æ–¥–Ω—è {date_str}\n"
        f"–ó–∞–ø—É—Å–∫: {ENVIRONMENT}\n"
        f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: RENDER",
        reply_markup=main_keyboard()
    )
    await message.answer("–ü–æ–ø—Ä–æ–±—É–π –ò–ò:", reply_markup=ai_keyboard())


# === Callback-–∫–Ω–æ–ø–∫–∏ ChatGPT / DeepSeek ===
@dp.callback_query(lambda c: c.data in ["ask_gpt", "ask_deepseek"])
async def ask_ai(callback_query: types.CallbackQuery):
    service = "ChatGPT" if callback_query.data == "ask_gpt" else "DeepSeek"
    await callback_query.message.answer(f"–¢—ã –≤—ã–±—Ä–∞–ª {service}. –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.")
    user_choice[callback_query.from_user.id] = callback_query.data


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ ===
@dp.message()
async def process_user_message(message: Message):
    choice = user_choice.get(message.from_user.id)
    if choice:
        if choice == "ask_gpt":
            await message.answer("–ñ–¥—É –æ—Ç–≤–µ—Ç –æ—Ç ChatGPT...")
            answer = await call_chatgpt_api(message.text)
            await message.answer(answer)
        elif choice == "ask_deepseek":
            await message.answer("–ñ–¥—É –æ—Ç–≤–µ—Ç –æ—Ç DeepSeek...")
            answer = await call_deepseek_api(message.text)
            await message.answer(answer)
        user_choice.pop(message.from_user.id, None)
        return

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é ---
    if message.text == "üîÆ –ü—Å–∏—Ö–æ–Ω–µ—Ç–∏–∫–∞ –ò–Ω—å-–Ø–Ω":
        await message.answer(
            "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –≥—Ä—É–ø–ø–µ:\nhttps://t.me/+EL9esd0xZ-xkMTU6",
            reply_markup=main_keyboard()
        )

    elif message.text == "üå≤ –ò—Ä–∫—É—Ç—Å–∫ –ø—Å–∏—Ö–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏":
        await message.answer(
            "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –≥—Ä—É–ø–ø–µ:\nhttps://t.me/+7ZBrobhAJoRhM2U6",
            reply_markup=main_keyboard()
        )

    elif message.text == "üå§ –ü–æ–≥–æ–¥–∞":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=city_keyboard())

    elif message.text in CITIES:
        await show_weather(message)

    elif message.text == "üíµ –ö—É—Ä—Å –≤–∞–ª—é—Ç":
        await show_currency(message)

    elif message.text == "üí¨ –¶–∏—Ç–∞—Ç–∞":
        await send_random_quote(message)

    elif message.text == "ü§ñ –í—ã–±–æ—Ä –ò–ò":
        await message.answer("–í—ã–±–µ—Ä–∏ –ò–ò:", reply_markup=ai_keyboard())

    elif message.text == "‚ùì –ü–æ–º–æ—â—å":
        await show_help(message)


# === –ü–æ–≥–æ–¥–∞ ===
async def show_weather(message: Message):
    city = message.text
    code = CITIES[city]
    url = f"http://api.openweathermap.org/data/2.5/weather?q={code},RU&appid={WEATHER_API_KEY}&units=metric&lang=ru"
    try:
        r = requests.get(url)
        data = r.json()
        temp = data['main']['temp']
        desc = data['weather'][0]['description'].capitalize()
        await message.answer(f"–ü–æ–≥–æ–¥–∞ –≤ {city}: {temp:.1f}¬∞C, {desc}", reply_markup=main_keyboard())
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø–æ–≥–æ–¥—ã: {e}", reply_markup=main_keyboard())


# === –ö—É—Ä—Å –≤–∞–ª—é—Ç ===
async def show_currency(message: Message):
    data = requests.get("https://www.cbr-xml-daily.ru/daily_json.js").json()
    usd = data['Valute']['USD']['Value']
    eur = data['Valute']['EUR']['Value']
    await message.answer(f"USD: {usd:.2f}‚ÇΩ\nEUR: {eur:.2f}‚ÇΩ", reply_markup=main_keyboard())


# === –¶–∏—Ç–∞—Ç—ã ===
async def send_random_quote(message: Message):
    quotes = load_quotes()
    if not quotes:
        await message.answer("–ù–µ—Ç —Ü–∏—Ç–∞—Ç.", reply_markup=main_keyboard())
        return
    q = random.choice(quotes)
    text = q['text'] if isinstance(q, dict) else str(q)
    await message.answer(f"¬´{text}¬ª", reply_markup=main_keyboard())


# === –ü–æ–º–æ—â—å ===
async def show_help(message: Message):
    await message.answer("–ü–æ–º–æ—â—å: /start, –ø–æ–≥–æ–¥–∞, –∫—É—Ä—Å –≤–∞–ª—é—Ç, —Ü–∏—Ç–∞—Ç—ã", reply_markup=main_keyboard())


# === –í—ã–∑–æ–≤—ã API ===
async def call_chatgpt_api(prompt: str) -> str:
    api_key = os.getenv("IGOR_OPENAI_API")
    url = "https://api.openai.com/v1/chat/completions"
    headers = {"Authorization": f"Bearer {api_key}", "Content-Type": "application/json"}
    data = {
        "model": "gpt-4o-mini",
        "messages": [{"role": "user", "content": prompt}],
        "max_tokens": 200
    }
    async with aiohttp.ClientSession() as session:
        async with session.post(url, headers=headers, json=data) as resp:
            r = await resp.json()
            return r["choices"][0]["message"]["content"]


async def call_deepseek_api(prompt: str) -> str:
    api_key = os.getenv("IGOR_KHOD_DEEPSEEK_API_KEY")
    url = "https://api.deepseek.com/v1/chat/completions"
    headers = {"Authorization": f"Bearer {api_key}", "Content-Type": "application/json"}
    data = {
        "model": "deepseek-chat",
        "messages": [
            {"role": "system",
             "content": "–¢—ã ‚Äî –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç DeepSeek. –û—Ç–≤–µ—á–∞–π –∫–∞–∫ DeepSeek –∏ –Ω–µ —É–ø–æ–º–∏–Ω–∞–π GPT –∏–ª–∏ OpenAI."},
            {"role": "user", "content": prompt}
        ],
        "max_tokens": 200
    }
    async with aiohttp.ClientSession() as session:
        async with session.post(url, headers=headers, json=data) as resp:
            r = await resp.json()
            return r["choices"][0]["message"]["content"]


# @app.on_event("startup") - –≤–µ—Ä—Å–∏—è —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
@asynccontextmanager
async def lifespan(app: FastAPI):
    # –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    await bot.set_webhook(WEBHOOK_URL)
    yield



@app.get("/")
def root():
    return {"status": "ok", "bot": "running"}


if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=10000)
