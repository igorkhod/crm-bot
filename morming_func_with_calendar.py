import os
import json
import random
import requests
from datetime import datetime
from pathlib import Path
import telebot
from telebot import types
from telegram_bot_calendar import DetailedTelegramCalendar, LSTEP
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv(Path(__file__).parent / 'token.env')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TOKEN")
bot = telebot.TeleBot(TOKEN)

# –ü–æ–ª—É—á–µ–Ω–∏–µ API-–∫–ª—é—á–∞ –¥–ª—è –ø–æ–≥–æ–¥—ã
WEATHER_API_KEY = os.getenv("WEATHER_API_KEY")

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —Ü–∏—Ç–∞—Ç–∞–º–∏
QUOTES_FILE = Path(__file__).parent / 'quotes.json'


# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–∏—Ç–∞—Ç –∏–∑ JSON-—Ñ–∞–π–ª–∞
def load_quotes():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ü–∏—Ç–∞—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞ quotes.json"""
    try:
        if QUOTES_FILE.exists():
            with open(QUOTES_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        return []
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–∏—Ç–∞—Ç: {e}")
        return []


# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
def create_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        types.KeyboardButton("üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å"),
        types.KeyboardButton("üå§ –ü–æ–≥–æ–¥–∞"),
        types.KeyboardButton("üí¨ –°–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞"),
        types.KeyboardButton("‚ùì –ü–æ–º–æ—â—å")
    ]
    markup.add(*buttons)
    return markup


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    bot.send_message(
        chat_id=message.chat.id,
        text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö–∞–ª–µ–Ω–¥–∞—Ä—å"
@bot.message_handler(func=lambda m: m.text == "üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å")
def show_calendar(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å"""
    calendar, step = DetailedTelegramCalendar().build()
    bot.send_message(
        chat_id=message.chat.id,
        text=f"–í—ã–±–µ—Ä–∏—Ç–µ {LSTEP[step]}",
        reply_markup=calendar
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
@bot.callback_query_handler(func=DetailedTelegramCalendar.func())
def handle_calendar(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–∞—Ç—ã –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ"""
    result, key, step = DetailedTelegramCalendar().process(call.data)

    if not result and key:
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"–í—ã–±–µ—Ä–∏—Ç–µ {LSTEP[step]}",
            reply_markup=key
        )
    elif result:
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"üìÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: {result.strftime('%d.%m.%Y')}"
        )
        bot.send_message(
            chat_id=call.message.chat.id,
            text="–ß—Ç–æ –¥–∞–ª—å—à–µ?",
            reply_markup=create_keyboard()
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–≥–æ–¥–∞"
@bot.message_handler(func=lambda m: m.text == "üå§ –ü–æ–≥–æ–¥–∞")
def ask_city_for_weather(message):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–≥–æ–¥—ã"""
    msg = bot.send_message(
        chat_id=message.chat.id,
        text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:",
        reply_markup=types.ReplyKeyboardRemove()
    )
    bot.register_next_step_handler(msg, process_city_input)


def process_city_input(message):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–≥–æ–¥—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞"""
    city = message.text
    try:
        url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
        response = requests.get(url)
        data = response.json()

        temp = data['main']['temp']
        description = data['weather'][0]['description']
        humidity = data['main']['humidity']

        weather_text = (
            f"üå§ –ü–æ–≥–æ–¥–∞ –≤ {city}:\n"
            f"‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
            f"‚Ä¢ –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%"
        )
        bot.send_message(
            chat_id=message.chat.id,
            text=weather_text,
            reply_markup=create_keyboard()
        )
    except Exception as e:
        bot.send_message(
            chat_id=message.chat.id,
            text=f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è {city}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥.",
            reply_markup=create_keyboard()
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞"
@bot.message_handler(func=lambda m: m.text == "üí¨ –°–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞")
def send_random_quote(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Ü–∏—Ç–∞—Ç—É –∏–∑ —Ñ–∞–π–ª–∞"""
    quotes = load_quotes()

    if not quotes:
        bot.send_message(
            chat_id=message.chat.id,
            text="üì≠ –¶–∏—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –§–∞–π–ª quotes.json –ø—É—Å—Ç –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.",
            reply_markup=create_keyboard()
        )
        return

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ü–∏—Ç–∞—Ç—É
    quote = random.choice(quotes)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ü–∏—Ç–∞—Ç—ã
    if isinstance(quote, dict):
        quote_text = quote.get('text', '–¢–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
        author = quote.get('author', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä')
        response = f"üí¨ –¶–∏—Ç–∞—Ç–∞:\n\n¬´{quote_text}¬ª\n‚Äî {author}"
    else:
        response = f"üí¨ –¶–∏—Ç–∞—Ç–∞:\n\n¬´{quote}¬ª"

    bot.send_message(
        chat_id=message.chat.id,
        text=response,
        reply_markup=create_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–º–æ—â—å"
@bot.message_handler(func=lambda m: m.text == "‚ùì –ü–æ–º–æ—â—å")
def show_help(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    help_text = (
        "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É:\n\n"
        "üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å - –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É\n"
        "üå§ –ü–æ–≥–æ–¥–∞ - —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –ª—é–±–æ–º –≥–æ—Ä–æ–¥–µ\n"
        "üí¨ –°–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞ - –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —Ü–∏—Ç–∞—Ç—É\n"
        "‚ùì –ü–æ–º–æ—â—å - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )
    bot.send_message(
        chat_id=message.chat.id,
        text=help_text,
        reply_markup=create_keyboard()
    )


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    bot.polling(none_stop=True)