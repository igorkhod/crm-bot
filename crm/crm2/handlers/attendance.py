# === –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫: crm2/handlers/attendance.py
# –°–ø–∏—Å–æ–∫ –≤–µ—Ä—Ö–Ω–µ—É—Ä–æ–≤–Ω–µ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ —Ñ–∞–π–ª–∞ (–∫–ª–∞—Å—Å—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏).
# –û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–∞–≤–∞ —Ñ—É–Ω–∫—Ü–∏–π/–∫–ª–∞—Å—Å–æ–≤.
# –ö–ª–∞—Å—Å—ã: AttStates
# –§—É–Ω–∫—Ü–∏–∏: attendance_entry, pick_cohort, show_cohort_sessions, enter_attendance, enter_payments, on_pick_session, _mark_kb_att, _mark_kb_pay, mark_attendance, mark_payment
# === –ö–æ–Ω–µ—Ü –∞–≤—Ç–æ–∑–∞–≥–æ–ª–æ–≤–∫–∞
# crm2/handlers/attendance.py
from __future__ import annotations

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery
import sqlite3

from crm2.keyboards.admin_attendance import choose_cohort_kb
from crm2.keyboards.session_picker import build_session_picker
from crm2.db.sessions import get_upcoming_sessions_by_cohort, get_recent_past_sessions_by_cohort
from crm2.db.users import list_users_by_cohort
from crm2.db.sqlite import DB_PATH

router = Router(name="attendance")

class AttStates(StatesGroup):
    cohort = State()
    mode = State()           # 'att' | 'pay'
    session = State()        # –≤—ã–±—Ä–∞–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è (–¥–ª—è att/pay)

# --- –≤—Ö–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª ---
@router.message(F.text == "üìä –ü–æ—Å–µ—â–µ–Ω–∏–µ")
async def attendance_entry(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(AttStates.cohort)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ç–æ–∫:", reply_markup=choose_cohort_kb())

# --- –≤—ã–±–æ—Ä –ø–æ—Ç–æ–∫–∞ ---
@router.message(AttStates.cohort, F.text.in_(["1 –ø–æ—Ç–æ–∫ ¬∑ –Ω–∞–±–æ—Ä 09.2023", "2 –ø–æ—Ç–æ–∫ ¬∑ –Ω–∞–±–æ—Ä 04.2025"]))
async def pick_cohort(message: Message, state: FSMContext):
    cohort_id = 1 if message.text.startswith("1 –ø–æ—Ç–æ–∫") else 2
    await state.update_data(cohort_id=cohort_id)
    await message.answer(
        "–ü–æ—Ç–æ–∫ –≤—ã–±—Ä–∞–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
        "‚Ä¢ ‚úçÔ∏è –í–Ω–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å ¬´–±—ã–ª/–Ω–µ –±—ã–ª¬ª\n"
        "‚Ä¢ üí≥ –û–ø–ª–∞—Ç–∞ ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å ¬´–æ–ø–ª–∞—Ç–∏–ª/–Ω–µ –æ–ø–ª–∞—Ç–∏–ª¬ª\n"
        "‚Ä¢ üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ –∑–∞–Ω—è—Ç–∏—è",
        reply_markup=choose_cohort_kb()
    )

# --- —Ä–µ–∂–∏–º—ã: –≤–Ω–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ / –æ–ø–ª–∞—Ç–∞ / –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å ---
@router.message(AttStates.cohort, F.text == "üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å")
async def show_cohort_sessions(message: Message, state: FSMContext):
    data = await state.get_data()
    cohort_id = data.get("cohort_id")
    if not cohort_id:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ç–æ–∫.")
        return
    sessions = get_upcoming_sessions_by_cohort(cohort_id, limit=10)
    if not sessions:
        await message.answer("–ë–ª–∏–∂–∞–π—à–∏—Ö –∑–∞–Ω—è—Ç–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    lines = ["–ë–ª–∏–∂–∞–π—à–∏–µ –∑–∞–Ω—è—Ç–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞:"]
    for s in sessions:
        d1, d2 = s["start_date"], s["end_date"]
        code = (s.get("topic_code") or "").strip()
        dates = f"{d1} ‚Äî {d2}" if (d1 and d2 and d1 != d2) else (d1 or d2 or "‚Äî")
        lines.append("‚Ä¢ " + dates + (f" ‚Ä¢ {code}" if code else ""))
    await message.answer("\n".join(lines))

@router.message(AttStates.cohort, F.text == "‚úçÔ∏è –í–Ω–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ")
async def enter_attendance(message: Message, state: FSMContext):
    data = await state.get_data()
    cohort_id = data.get("cohort_id")
    if not cohort_id:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ç–æ–∫.")
        return
    await state.set_state(AttStates.mode)
    await state.update_data(mode="att")
    sessions = get_recent_past_sessions_by_cohort(cohort_id, limit=5)
    if not sessions:
        await message.answer("–ü—Ä–æ—à–µ–¥—à–∏—Ö –∑–∞–Ω—è—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—à–µ–¥—à–µ–µ –∑–∞–Ω—è—Ç–∏–µ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏:", reply_markup=None)
    await message.answer(" ",
                         reply_markup=build_session_picker(sessions, mode="att"))

@router.message(AttStates.cohort, F.text == "üí≥ –û–ø–ª–∞—Ç–∞")
async def enter_payments(message: Message, state: FSMContext):
    data = await state.get_data()
    cohort_id = data.get("cohort_id")
    if not cohort_id:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ç–æ–∫.")
        return
    await state.set_state(AttStates.mode)
    await state.update_data(mode="pay")
    sessions = get_recent_past_sessions_by_cohort(cohort_id, limit=5)
    if not sessions:
        await message.answer("–ü—Ä–æ—à–µ–¥—à–∏—Ö –∑–∞–Ω—è—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—à–µ–¥—à–µ–µ –∑–∞–Ω—è—Ç–∏–µ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –æ–ø–ª–∞—Ç—ã:", reply_markup=None)
    await message.answer(" ",
                         reply_markup=build_session_picker(sessions, mode="pay"))

# --- –≤—ã–±–æ—Ä —Å–µ—Å—Å–∏–∏ (inline) ---
@router.callback_query(F.data.startswith("pick_session:"))
async def on_pick_session(cb: CallbackQuery, state: FSMContext):
    _, mode, sid = cb.data.split(":")
    session_id = int(sid)
    await state.update_data(mode=mode, session_id=session_id)

    data = await state.get_data()
    cohort_id = data.get("cohort_id")
    users = list_users_by_cohort(cohort_id)
    if not users:
        await cb.message.answer("–í –ø–æ—Ç–æ–∫–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        await cb.answer()
        return

    # –ø–æ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ‚Äî –∫–Ω–æ–ø–∫–∏ +/-
    header = "–û—Ç–º–µ—Ç–∫–∞ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏" if mode == "att" else "–û—Ç–º–µ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã"
    await cb.message.answer(f"{header} –¥–ª—è –∑–∞–Ω—è—Ç–∏—è #{session_id}:")

    for uid, name in users:
        if mode == "att":
            kb = _mark_kb_att(uid, session_id)
            await cb.message.answer(f"‚Ä¢ {name}", reply_markup=kb)
        else:
            kb = _mark_kb_pay(uid, session_id)
            await cb.message.answer(f"‚Ä¢ {name}", reply_markup=kb)

    await cb.answer()

# --- inline-–∫–Ω–æ–ø–∫–∏ ¬´+/-¬ª ---
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
def _mark_kb_att(user_id: int, session_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="+ –±—ã–ª", callback_data=f"mark:att:present:{user_id}:{session_id}"),
        InlineKeyboardButton(text="- –Ω–µ –±—ã–ª", callback_data=f"mark:att:absent:{user_id}:{session_id}"),
        InlineKeyboardButton(text="¬± –æ–ø–æ–∑–¥–∞–ª", callback_data=f"mark:att:late:{user_id}:{session_id}"),
    ]])

def _mark_kb_pay(user_id: int, session_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="+ –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"mark:pay:1:{user_id}:{session_id}"),
        InlineKeyboardButton(text="- –Ω–µ –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"mark:pay:0:{user_id}:{session_id}"),
    ]])

# --- –∑–∞–ø–∏—Å—å –≤ –ë–î ---
@router.callback_query(F.data.startswith("mark:att:"))
async def mark_attendance(cb: CallbackQuery):
    _, _, status, uid, sid = cb.data.split(":")
    user_id, session_id = int(uid), int(sid)
    with sqlite3.connect(DB_PATH) as con:
        con.execute(
            "INSERT INTO attendance(user_id, session_id, status, noted_by) VALUES (?,?,?,?)",
            (user_id, session_id, status, cb.from_user.id)
        )
        con.commit()
    await cb.answer("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
    await cb.message.edit_reply_markup(reply_markup=None)

@router.callback_query(F.data.startswith("mark:pay:"))
async def mark_payment(cb: CallbackQuery):
    _, _, paid, uid, sid = cb.data.split(":")
    user_id, session_id, paid_val = int(uid), int(sid), int(paid)
    with sqlite3.connect(DB_PATH) as con:
        con.execute(
            "INSERT INTO payments(user_id, session_id, paid, noted_by) VALUES (?,?,?,?)",
            (user_id, session_id, paid_val, cb.from_user.id)
        )
        con.commit()
    await cb.answer("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
    await cb.message.edit_reply_markup(reply_markup=None)
